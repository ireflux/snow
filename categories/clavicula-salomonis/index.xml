<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clavicula Salomonis on sherry's blog</title><link>https://ireflux.github.io/snow/categories/clavicula-salomonis/</link><description>Recent content in Clavicula Salomonis on sherry's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ireflux.github.io/snow/categories/clavicula-salomonis/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 通过虚拟机路由转发连接 EasyConnect</title><link>https://ireflux.github.io/snow/post/route-forward-connect-easyconnect/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/route-forward-connect-easyconnect/</guid><description>&lt;p>EasyConnect 虽然也有 Linux 版本，但在网上逛了一圈，好像会有一些坑，而且需要 root 权限执行一些操作，对于一向没啥节操的国产软件还是果断放弃物理机直接装的方案。但我还想在我的 Arch 上连内网，本着某些国产软件能不装到物理机就不装到物理机的原则，就想通过连着 EasyConnect 的虚拟机来上内网，又在网络上搜寻了一圈，没想到还真的找到一些解决方案，果然大家的痛点都是一样的。&lt;/p>
&lt;h3 id="虚拟机设置">虚拟机设置&lt;/h3>
&lt;p>首先在虚拟机上开启两个网卡，我的是 VirtualBox，就以它为例，依次进入 &lt;code>设置-&amp;gt;网络&lt;/code>，勾选两个网卡，启用网络连接，网卡一用于连接外部网络，连接方式 NAT 或桥接都可。网卡二用于和 Linux 物理机交换数据，连接方式选择 “&lt;a class="link" href="https://www.virtualbox.org/manual/ch06.html#network_hostonly" target="_blank" rel="noopener"
>仅主机（Host-Only）网络&lt;/a>”。顺便一提，如果选择完 “仅主机（Host-Only）” 后，界面名称选项为空的话，就需要去菜单 &lt;code>管理-&amp;gt;主机网络管理器&lt;/code> 中创建一个，然后再回到原来的地方，界面名称的选项就是刚刚在网络管理器中创建的。&lt;/p>
&lt;p>打开 Windows 虚拟机后，依次进入 &lt;code>控制面板-&amp;gt;网络和共享中心-&amp;gt;更改适配器设置&lt;/code>，里面会存在 “Sangfor SSL VPN CS Support System VNIC” 的本地连接和两个其他本地连接，其中一个是 “NAT/桥接” 的网卡一，另一个是 “仅主机（Host-Only）” 的网卡二，需要自己分辨一下。在 “Sangfor SSL VPN CS Support System VNIC” 的本地连接上依次 &lt;code>右键-&amp;gt;属性-&amp;gt;共享&lt;/code>，勾选 “允许其他网络用户通过此计算机 Internet 连接来连接” 选项，家庭网络连接选择 “仅主机（Host-Only）” 的本地连接，确定即可。查看一下 “仅主机（Host-Only）” 的 IP 地址，接下来需要在宿主机上设置路由，将要内网地址转发到 “仅主机（Host-Only）” 的 IP 地址上。&lt;/p>
&lt;h3 id="宿主机设置">宿主机设置&lt;/h3>
&lt;p>以我的为例，我的 “仅主机（Host-Only）” 的本地连接 IP 地址为 192.168.56.3，假设我要访问的公司内网 IP 在 172.16.x.x 的网段，就可以将 172.16 开头的内网地址全部转发到 “仅主机（Host-Only）” 的 IP 地址上，即在宿主机执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo route add -net 172.16.0.0/16 gw 192.168.56.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令执行完后可以通过 &lt;code>route&lt;/code> 查看一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ route
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Destination&lt;/th>
&lt;th style="text-align:center">Gateway&lt;/th>
&lt;th style="text-align:center">Genmask&lt;/th>
&lt;th style="text-align:center">Flags&lt;/th>
&lt;th style="text-align:center">Metric&lt;/th>
&lt;th style="text-align:center">Ref&lt;/th>
&lt;th style="text-align:center">Use&lt;/th>
&lt;th style="text-align:center">Iface&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">default&lt;/td>
&lt;td style="text-align:center">_gateway&lt;/td>
&lt;td style="text-align:center">0.0.0.0&lt;/td>
&lt;td style="text-align:center">UG&lt;/td>
&lt;td style="text-align:center">600&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">wlp3s0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">172.16.0.0&lt;/td>
&lt;td style="text-align:center">192.168.56.3&lt;/td>
&lt;td style="text-align:center">255.255.0.0&lt;/td>
&lt;td style="text-align:center">UG&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">vboxnet0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">192.168.31.0&lt;/td>
&lt;td style="text-align:center">0.0.0.0&lt;/td>
&lt;td style="text-align:center">255.255.255.0&lt;/td>
&lt;td style="text-align:center">U&lt;/td>
&lt;td style="text-align:center">600&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">wlp3s0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">192.168.56.0&lt;/td>
&lt;td style="text-align:center">0.0.0.0&lt;/td>
&lt;td style="text-align:center">255.255.255.0&lt;/td>
&lt;td style="text-align:center">U&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">vboxnet0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>至此就可以在宿主机上愉快的上内网了。&lt;/p>
&lt;p>刚刚添加的路由转发规则是临时的，宿主机重启后，就会重置。也可以在用完后手动删除，即在终端执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo route del -net 172.16.0.0/16 gw 192.168.56.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="后记">后记&lt;/h2>
&lt;p>这么做虽然繁琐一点，但可以使得我的 Arch 连上内网的同时又避免了直接在物理机上装软件，还是感觉极度舒适。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.virtualbox.org/manual/ch06.html" target="_blank" rel="noopener"
>Chapter 6. Virtual Networking&lt;/a>: &lt;a class="link" href="https://www.virtualbox.org/manual/ch06.html" target="_blank" rel="noopener"
>https://www.virtualbox.org/manual/ch06.html&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>WeeChat 不完全使用指南</title><link>https://ireflux.github.io/snow/post/weechat-guide/</link><pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/weechat-guide/</guid><description>&lt;p>前几天看了霍矩大佬做的一期关于 Clubhouse 视频，其中提到了 &lt;a class="link" href="https://en.wikipedia.org/wiki/Internet_Relay_Chat" target="_blank" rel="noopener"
>IRC&lt;/a> 这种古老的通信协议。其中有一段叙述很有意思，大意是说如今 IRC 服务器这种带有很强匿名性质的聊天室，由于界面或操作还停留在上世纪，是天然的过滤屏障，人少反而提供了优质的社区交流氛围。但同时也不容易打击盗版，用户通过各种代理、中继连上来，很难去追溯，再加上现如今用户较少，规模不复往昔，因此可能也失去了打击的价值。种种技术和非技术的因素，造就了这样的一个强匿名、低审查、较为自由的一个“避难所”。用视频中的话说：“互联网上，没人知道你是一条狗”。&lt;/p>
&lt;p>而这也正是吸引人的地方 :)&lt;/p>
&lt;p>从 &lt;a class="link" href="https://wiki.archlinux.org/index.php/List_of_applications/Internet#IRC_clients" target="_blank" rel="noopener"
>arch wiki&lt;/a> 中可以找到一些主流的支持 IRC 协议的软件。根据下面的图表对比，&lt;a class="link" href="https://WeeChat.org/" target="_blank" rel="noopener"
>WeeChat&lt;/a> 相比于其他软件来说更强大，扩展性更好，最有优势。&lt;/p>
&lt;p>下图表搬运自 arch wiki：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Name&lt;/th>
&lt;th style="text-align:center">Package&lt;/th>
&lt;th style="text-align:center">Written in&lt;/th>
&lt;th style="text-align:center">Extensible&lt;/th>
&lt;th style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener"
>SASL&lt;/a>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">BitchX&lt;/td>
&lt;td style="text-align:center">bitchx-git&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ERC&lt;/td>
&lt;td style="text-align:center">emacs&lt;/td>
&lt;td style="text-align:center">ELisp&lt;/td>
&lt;td style="text-align:center">in ELisp&lt;/td>
&lt;td style="text-align:center">via script&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ii&lt;/td>
&lt;td style="text-align:center">iiAUR&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">stdin/stdout&lt;/td>
&lt;td style="text-align:center">No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Irssi&lt;/td>
&lt;td style="text-align:center">irssi&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">in Perl&lt;/td>
&lt;td style="text-align:center">Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">pork&lt;/td>
&lt;td style="text-align:center">pork&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">in Perl&lt;/td>
&lt;td style="text-align:center">No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ScrollZ&lt;/td>
&lt;td style="text-align:center">scrollz&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sic&lt;/td>
&lt;td style="text-align:center">sicAUR&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">stdin/stdout&lt;/td>
&lt;td style="text-align:center">No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">tiny&lt;/td>
&lt;td style="text-align:center">tiny-irc-client-git&lt;/td>
&lt;td style="text-align:center">Rust&lt;/td>
&lt;td style="text-align:center">No&lt;/td>
&lt;td style="text-align:center">Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">WeeChat&lt;/td>
&lt;td style="text-align:center">WeeChat&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">multiple languages&lt;/td>
&lt;td style="text-align:center">Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="启动-weechat">启动 WeeChat&lt;/h3>
&lt;p>只需在终端中输入以下命令，回车即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ WeeChat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你发现启动后出现了一些诸如 &lt;code>Errors loading plugins&lt;/code> 之类的错误，是因为 WeeChat 启动时会默认加载这些插件，而你并未安装这些插件所需运行时所致。&lt;/p>
&lt;p>如果想要消除这些错误信息，可以使用以下两种方法：&lt;/p>
&lt;ol>
&lt;li>安装 lua, ruby, aspell，tcl 等软件&lt;/li>
&lt;li>在 WeeChat 终端执行 &lt;code>/set WeeChat.plugin.autoload &amp;quot;*,!ruby,!lua,!aspell,!tcl&amp;quot;&lt;/code> 就会在启动时阻止这些插件运行&lt;/li>
&lt;/ol>
&lt;p>WeeChat 本身是有一些界面交互命令，如 &lt;code>version&lt;/code>，&lt;code>uptime&lt;/code>，&lt;code>print&lt;/code> 之类，如果没有插件，WeeChat 本身没什么用，什么都做不了。WeeChat 对 IRC 的支持也是通过插件来实现的，只不过 IRC 插件是默认内置的，如果想知道都加载了哪些插件，可以通过 &lt;code>/plugin&lt;/code> 来查看。还可以在 &lt;a class="link" href="https://WeeChat.org/scripts/" target="_blank" rel="noopener"
>插件库&lt;/a> 安装脚本插件。&lt;/p>
&lt;h3 id="在线手册">在线手册&lt;/h3>
&lt;p>所有的命令都可以通过在 WeeChat 中输入 &lt;code>/help&lt;/code> 来查询，如果想看某个命令的功能描述和用法，比如 &lt;code>server&lt;/code>，可以像这样：&lt;/p>
&lt;pre tabindex="0">&lt;code>/help server
&lt;/code>&lt;/pre>&lt;p>还可以查看某个配置项的描述和用法，比如 &lt;code>irc.server.freenode.autojoin&lt;/code>：&lt;/p>
&lt;pre tabindex="0">&lt;code>/help irc.server.freenode.autojoin
&lt;/code>&lt;/pre>&lt;h3 id="设置选项">设置选项&lt;/h3>
&lt;p>在 WeeChat 中查看所有的选项，使用 &lt;code>/set&lt;/code> 命令，现在输入 &lt;code>/set&lt;/code> 实际上是插件提供的指令 &lt;code>/fset&lt;/code> 的 alias，还可以通过模糊匹配：&lt;/p>
&lt;pre tabindex="0">&lt;code>/fset WeeChat.*
&lt;/code>&lt;/pre>&lt;p>可以通过如下命令来修改选项的值，例如：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.username &amp;#34;sherry&amp;#34;
&lt;/code>&lt;/pre>&lt;p>修改后无需重启，WeeChat 会自动更新，或者使用 &lt;code>/save&lt;/code> 强制保存修改后的值。不建议手动编辑配置文件来修改，因为 WeeChat 可能会随时写入信息。&lt;/p>
&lt;h3 id="添加服务器">添加服务器&lt;/h3>
&lt;p>以当前最大的节点 &lt;code>chat.freenode.net&lt;/code> 为例，端口号为 6665-6667 和 8000-8002 用于纯文本连接，端口 6697, 7000 和 7070 为 TLS 加密连接。&lt;/p>
&lt;p>不加密的那种我在国内尝试了下连不上，使用了加密连接才连上，写法如下，其中 &lt;code>freenode&lt;/code> 是昵称：&lt;/p>
&lt;pre tabindex="0">&lt;code>/server add freenode chat.freenode.net/6697 -ssl
&lt;/code>&lt;/pre>&lt;p>进去之后会发现自己的用户名旁边有个(+iZ)，这个代表用户模式，&lt;code>i&lt;/code> 代表隐形，&lt;code>Z&lt;/code> 是通过加密连接到服务器的用户，会自动获得这个网络状态，更多用户模式可以通过 &lt;code>/help mode&lt;/code> 查看，或者浏览官方 Wiki &lt;a class="link" href="https://freenode.net/kb/answer/usermodes" target="_blank" rel="noopener"
>User Mode&lt;/a>&lt;/p>
&lt;h3 id="自定义-irc-服务器选项">自定义 IRC 服务器选项&lt;/h3>
&lt;p>如果您未为服务器选项指定特定值，则 WeeChat 会为所有服务器使用默认值。这些默认选项是 &lt;code>irc.server_default.*&lt;/code>，因此对于每个服务器都可以单独设置参数。&lt;/p>
&lt;p>默认情况下，昵称会和 un*x 的登陆用户名称相同，还可以修改昵称：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.nicks &amp;#34;sherry&amp;#34;
&lt;/code>&lt;/pre>&lt;p>设置用户名和真实姓名：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.username &amp;#34;My user name&amp;#34;
/set irc.server.freenode.realname &amp;#34;My real name&amp;#34;
&lt;/code>&lt;/pre>&lt;p>启动时自动连接服务器：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.autoconnect on
&lt;/code>&lt;/pre>&lt;p>使用 SSL 加密连接：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.addresses &amp;#34;chat.freenode.net/7000&amp;#34;
/set irc.server.freenode.ssl on
&lt;/code>&lt;/pre>&lt;p>如果服务器上有 &lt;a class="link" href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener"
>SASL&lt;/a>，可以将其用于身份验证：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.sasl_username &amp;#34;mynick&amp;#34;
/set irc.server.freenode.sasl_password &amp;#34;xxxxxxx&amp;#34;
&lt;/code>&lt;/pre>&lt;p>连接到服务器时自动加入频道：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.autojoin &amp;#34;#channel1,#channel2&amp;#34;
&lt;/code>&lt;/pre>&lt;p>重置所设置的选项：&lt;/p>
&lt;pre tabindex="0">&lt;code>/unset irc.server.freenode.nicks
&lt;/code>&lt;/pre>&lt;p>设置其他选项（xxx为输入一个不存在的选项名）：&lt;/p>
&lt;pre tabindex="0">&lt;code>/set irc.server.freenode.xxx value
&lt;/code>&lt;/pre>&lt;h3 id="连接到-irc-服务器">连接到 IRC 服务器&lt;/h3>
&lt;pre tabindex="0">&lt;code>/connect freenode
&lt;/code>&lt;/pre>&lt;h3 id="加入离开-irc-频道">加入/离开 IRC 频道&lt;/h3>
&lt;p>查询频道：&lt;/p>
&lt;pre tabindex="0">&lt;code>/list #channel
&lt;/code>&lt;/pre>&lt;p>加入频道：&lt;/p>
&lt;pre tabindex="0">&lt;code>/join #channel
&lt;/code>&lt;/pre>&lt;p>离开频道（界面不会关闭）：&lt;/p>
&lt;pre tabindex="0">&lt;code>/part [离开时的信息]]
&lt;/code>&lt;/pre>&lt;p>关闭服务器/频道/私聊（同时界面也会关闭，&lt;code>/close&lt;/code> 是 &lt;code>/buffer close&lt;/code> 的 alias）：&lt;/p>
&lt;pre tabindex="0">&lt;code>/close
&lt;/code>&lt;/pre>&lt;p>断开与服务器的连接：&lt;/p>
&lt;pre tabindex="0">&lt;code>/disconnect
&lt;/code>&lt;/pre>&lt;h2 id="后记">后记&lt;/h2>
&lt;p>除了以上的一些基本用法，还有 &lt;a class="link" href="https://weechat.org/files/doc/stable/weechat_user.en.html#irc_ssl_certificates" target="_blank" rel="noopener"
>SASL 认证&lt;/a> 以及 &lt;a class="link" href="https://freenode.net/kb/answer/sasl" target="_blank" rel="noopener"
>使用 SASL 连接&lt;/a>、通过 &lt;a class="link" href="https://weechat.org/files/doc/stable/weechat_user.en.html#irc_tor_freenode" target="_blank" rel="noopener"
>Tor 连接 Freenode&lt;/a> 等用法。此外，一些 WeeChat 软件的方面的问题，可以看这个 &lt;a class="link" href="https://weechat.org/files/doc/stable/weechat_faq.en.html" target="_blank" rel="noopener"
>FAQ&lt;/a>&lt;/p>
&lt;p>一些常用的 IRC 站点：&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://freenode.net" target="_blank" rel="noopener"
>https://freenode.net&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.dal.net/servers" target="_blank" rel="noopener"
>https://www.dal.net/servers&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.undernet.org" target="_blank" rel="noopener"
>https://www.undernet.org&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://weechat.org/doc/" target="_blank" rel="noopener"
>WeeChat Docs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://freenode.net/kb/all" target="_blank" rel="noopener"
>Freenode Knowledge Base&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/index.php/List_of_applications/Internet#IRC_clients" target="_blank" rel="noopener"
>Arch Wiki IRC_clients&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener"
>Wikipedia SASL&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Elasticsearch 入门 | 一</title><link>https://ireflux.github.io/snow/post/study-notes-of-elasticsearch-1/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/study-notes-of-elasticsearch-1/</guid><description>&lt;p>本文是我开始学习 Elasticsearch 系列的第一篇笔记，计划先以我初学者的状态对 Elasticsearch 的看法以及目前学到的知识做个概览性的总结，之后的系列再单独对其细节专门去学习和记录，留备后期翻阅查看。&lt;/p>
&lt;p>注：截至本文发表前，Elasticsearch 的版本号为 7.6.1，本文的内容也建立于此之上。&lt;/p>
&lt;h2 id="elasticsearch-是什么">Elasticsearch 是什么？&lt;/h2>
&lt;p>根据官方文档和 Wikipedia 的说法：&lt;/p>
&lt;p>Elasticsearch是一个基于Apache Lucene构建的分布式的开源搜索和分析引擎，可以处理所有类型的数据，包括文本，数字，地理空间，结构化和非结构化的数据。&lt;/p>
&lt;h2 id="elasticsearch-有什么用">Elasticsearch 有什么用？&lt;/h2>
&lt;ul>
&lt;li>应用程序搜索&lt;/li>
&lt;li>网站搜索&lt;/li>
&lt;li>企业搜索&lt;/li>
&lt;li>记录和日志分析&lt;/li>
&lt;li>基础架构指标和容器监控&lt;/li>
&lt;li>应用程序性能监控&lt;/li>
&lt;li>地理位置分析和可视化&lt;/li>
&lt;li>安全分析&lt;/li>
&lt;li>商业分析&lt;/li>
&lt;/ul>
&lt;p>了解到此就可以了，想要更深入的了解可以去翻阅&lt;a class="link" href="https://www.elastic.co/what-is/elasticsearch" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;h2 id="elasticsearch-的配置">Elasticsearch 的配置&lt;/h2>
&lt;p>在此跳过了 ES 的安装，是因为在我的安装体验里，并没有遇到什么阻力，因此无需记录。关于下载安装，可以查阅&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html" target="_blank" rel="noopener"
>此页面&lt;/a>&lt;/p>
&lt;p>ES 的配置主要是修改 &lt;code>elasticsearch.yml&lt;/code>，打开这个文件，文件中已经列出了大多数重要的设置，划分了几个区域，分别是 Cluster，Node，Paths，Memory，Network，Discorey，Gateway，Various&lt;/p>
&lt;h3 id="关于路径的设置">关于路径的设置&lt;/h3>
&lt;p>在生产中一定要设置其日志和数据的路径。如果使用默认路径，在升级 ES 的时候很可能会被删除掉。&lt;/p>
&lt;h3 id="关于集群名称的设置">关于集群名称的设置&lt;/h3>
&lt;p>不要在不同的环境中使用相同的名称，否则新节点可能会加入错误的集群中。&lt;/p>
&lt;h3 id="关于网络的配置">关于网络的配置&lt;/h3>
&lt;p>默认情况下，Elasticsearch 绑定的是环回地址，例如：127.0.0.1，[::1]，这在单台服务器下是没问题的。但如果要和其他服务器上的 ES 组成集群，需修改 &lt;code>network.host&lt;/code>。例如：&lt;/p>
&lt;pre tabindex="0">&lt;code>network.host: x.x.x.x
&lt;/code>&lt;/pre>&lt;p>注：一旦为 &lt;code>network.host&lt;/code> 设置了自定义配置，ES 就会认为你从开发模式转移到了生产模式，会自动将系统启动检查从警告升级为异常。见 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html#dev-vs-prod" target="_blank" rel="noopener"
>Development mode vs production mode&lt;/a>&lt;/p>
&lt;h3 id="关于-discovery-的配置">关于 Discovery 的配置&lt;/h3>
&lt;p>为使集群中各个 ES 之间可见，应设置 &lt;code>discovery.seed_hosts&lt;/code>：&lt;/p>
&lt;p>以下引用官网的例子：&lt;/p>
&lt;pre tabindex="0">&lt;code>discovery.seed_hosts:
- 192.168.1.10:9300
- 192.168.1.11
- seeds.mydomain.com
- [0:0:0:0:0:ffff:c0a8:10c]:9301
&lt;/code>&lt;/pre>&lt;p>注: 如果不加端口号，则默认是9300。&lt;/p>
&lt;p>当首次启动 ES 集群时，会有一个引导步骤，它确定了首次选举中来对其票数进行计数的有主要资格节点的集合。这个“计数权”在开发模式中是由节点自动确定的，但却是不安全的。若在生产模式中，应当指定 &lt;code>cluster.initial_master_nodes&lt;/code>，具体配置可详见&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-settings.html#initial_master_nodes" target="_blank" rel="noopener"
>文档&lt;/a>&lt;/p>
&lt;h2 id="es-的启动与关闭">ES 的启动与关闭&lt;/h2>
&lt;p>一般而言，ES 可使用 &lt;code>./bin/elasticsearch&lt;/code> 来启动，但我们往往需要它作为一个守护进程来运行。除了使用 &lt;code>nohup&lt;/code> 之外，ES 本身有自带的方法：&lt;code>./bin/elasticsearch -d -p pid&lt;/code>&lt;/p>
&lt;p>注：-p 选项将进程记录到文件中，因此此处的 pid 应为文件路径。&lt;/p>
&lt;p>一旦启动后，可以通过 &lt;code>curl localhost:9200&lt;/code> 来获取 ES 的相关信息。&lt;/p>
&lt;p>若开启了集群，可以通过 &lt;code>curl -X GET &amp;quot;localhost:9200/_cat/health?v&amp;amp;pretty&amp;quot;&lt;/code> 来查看节点信息。可以看到，多节点副本可用的情况下 status 为 green，若只有单节点的情况下执行，则 status 为 yellow，但也是正常的，只是没有副本而已。&lt;/p>
&lt;p>关闭时，只需 &lt;code>pkill -F pid&lt;/code> 即可。或者使用更通用的方法 &lt;code>ps -ef | grep Elasticsearch&lt;/code> 或者 &lt;code>jps | grep Elasticsearch&lt;/code> 来获取进程号。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Elasticsearch" target="_blank" rel="noopener"
>Elasticsearch Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/" target="_blank" rel="noopener"
>Elasticsearch&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>netcat 的使用笔记</title><link>https://ireflux.github.io/snow/post/netcat-note/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/netcat-note/</guid><description>&lt;p>当在&lt;a class="link" href="https://packages.debian.org/sid/netcat-openbsd" target="_blank" rel="noopener"
> debian 的仓库&lt;/a>中查看 openbsd 版本的 netcat 时，会看到描述中有这样一句话：“TCP/IP swiss army knife”，被誉为 TCP/IP 的瑞士军刀，可以想象，这可以说是很高的赞誉了。netcat 当年还是2001年，2003年，2006年的 insecure.org 几次安全工具的投票中的前五名，它不仅是一个非常优秀的软件，体积还很小（只有几十KB），&lt;a class="link" href="https://github.com/openbsd/src/tree/master/usr.bin/nc" target="_blank" rel="noopener"
>源代码&lt;/a> 也很少，以至于有很多人去重写，出现了很多变种。比较知名的有&lt;a class="link" href="https://packages.debian.org/sid/netcat-openbsd" target="_blank" rel="noopener"
>openbsd版本&lt;/a>，&lt;a class="link" href="http://netcat.sourceforge.net/download.php" target="_blank" rel="noopener"
>gnu版本&lt;/a>，&lt;a class="link" href="https://nmap.org/ncat/" target="_blank" rel="noopener"
>nmap社区版本ncat&lt;/a>。&lt;/p>
&lt;p>netcat 最初的作者是一个名为“&lt;em>Hobbit&lt;/em>”的人在 1995 年 10 月 28 号以源代码的形式发布的。在其&lt;a class="link" href="https://nc110.sourceforge.io/" target="_blank" rel="noopener"
>官网&lt;/a>还能找到一些其他信息以及由“&lt;em>Hobbit&lt;/em>”最后更新于2007年的那个版本。在本文中，我使用的是 openbsd-netcat，因此以下使用记录如无特殊说明默认都是 openbsd 版本的 netcat&lt;/p>
&lt;p>首先来看一下 &lt;code>nc -h&lt;/code> 里平时使用频率比较高的一些选项：&lt;/p>
&lt;ul>
&lt;li>h：输出帮助信息&lt;/li>
&lt;li>k：可以使客户端重复连接，一般配合 l 来使用&lt;/li>
&lt;li>l：开启监听模式，作为服务端。若不加该选项则默认为客户端&lt;/li>
&lt;li>n：不对命令行中的host进行域名解析。简单来说就是host写为x.x.x.x时加上该选项，写为域名时不加&lt;/li>
&lt;li>p：指定端口&lt;/li>
&lt;li>v：输出详细信息&lt;/li>
&lt;li>z：通常用于端口扫描，仅判断是否能够连接，不进行数据通讯&lt;/li>
&lt;/ul>
&lt;h3 id="开启服务">开启服务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc -l -k -p &lt;span style="color:#f92672">[&lt;/span>port&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>作为服务端，监听端口，开启服务。假设客户端通过 &lt;code>nc [ip] [port]&lt;/code> 连上服务端，当断开客户端，服务端也会停止，加上选项 k 可以使其保持开启状态。这个是挺常见的用法，使用频率挺高，例如在flink的官方教程就用到了这个。&lt;/p>
&lt;h3 id="测试端口">测试端口&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc -nv &lt;span style="color:#f92672">[&lt;/span>ip&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>port&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如某个远程主机上开启了某个端口，这样做可以测试端口是否能连上，若其中的 ip 的位置为域名，就不需要加 n 了。&lt;/p>
&lt;h3 id="端口扫描">端口扫描&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc -znv &lt;span style="color:#f92672">[&lt;/span>ip&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>port-port&lt;span style="color:#f92672">]&lt;/span> 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> | grep succeeded
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以用来做渗透测试。&lt;/p>
&lt;h3 id="文件传输">文件传输&lt;/h3>
&lt;p>首先在接收端开启监听：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc -l -p &lt;span style="color:#f92672">[&lt;/span>port&lt;span style="color:#f92672">]&lt;/span> &amp;gt; &lt;span style="color:#f92672">[&lt;/span>filename&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在发送端发送文件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc &lt;span style="color:#f92672">[&lt;/span>ip&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>port&lt;span style="color:#f92672">]&lt;/span> &amp;lt; &lt;span style="color:#f92672">[&lt;/span>filename&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样传输文件的好处是不需要应用层，直接在传输层层面传输的，相比于通过应用层的软件之间的传输，性能上会有优势。假如从本机要传文件到开启了nat模式的虚拟机中，由于此时虚拟机对于宿主机的访问是单向的，因此可以先在虚拟机上配置一个端口转发，然后从本机 &lt;code>nc localhost [port] &amp;lt; [filename]&lt;/code> 。注：传输过程中没有进度条，因此需要重新开一个 terminal，自行对比文件的大小判断是否发送完后，然后在发送端 &lt;code>ctrl+c&lt;/code> 即可。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>除了以上的常见操作外，netcat还能配合一些其他命令做到更多高端操作，诸如端口转发，代理转发，备份系统，开启后门等等，更多操作可以参考编程随想的博文——&lt;a class="link" href="https://program-think.blogspot.com/2019/09/Netcat-Tricks.html" target="_blank" rel="noopener"
>扫盲 netcat（网猫）的 N 种用法——从“网络诊断”到“系统入侵”&lt;/a>。值得一提的是开启后门的选项 -e 在 openbsd-netcat 被删掉了，可能是作者觉得过于危险，但是在其他很多变种中这个选项还有保留。虽然 -e 在 openbsd-netcat 中被删除了，但是还是可以通过创建命名管道的方法间接达到 -e 的作用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkfifo &lt;span style="color:#f92672">[&lt;/span>name&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &lt;span style="color:#f92672">[&lt;/span>name&lt;span style="color:#f92672">]&lt;/span> | /bin/bash 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> | nc -l -p &lt;span style="color:#f92672">[&lt;/span>port&lt;span style="color:#f92672">]&lt;/span> &amp;gt; &lt;span style="color:#f92672">[&lt;/span>name&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这可能也是编程随想的博客中有提到但并未透露的“间接的方式”。&lt;/p></description></item><item><title>使用 Github Actions 每天自动发送比特币的估值邮件</title><link>https://ireflux.github.io/snow/post/send-mail-with-bitcoin-rate-everyday/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/send-mail-with-bitcoin-rate-everyday/</guid><description>&lt;p>前段时间，在阮一峰老师那里看到了&lt;a class="link" href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener"
>GitHub Actions 入门教程&lt;/a>，于是自己也跑去申请了体验资格，然而玩了一下感觉太复杂就放弃了。时隔数日，Github Actions 正式发布了，阮老师又发布了一篇关于此的文章：&lt;a class="link" href="http://www.ruanyifeng.com/blog/2019/12/github_actions.html" target="_blank" rel="noopener"
>GitHub Actions 教程：定时发送天气邮件&lt;/a>，这又让我想起了这个功能，于是决定重新捡起来。&lt;/p>
&lt;p>Github Actions 对于个人用户来说确实是一个很棒的东西，因为它确实可以部分取代服务器，每个虚拟机的配置也足够：&lt;/p>
&lt;ul>
&lt;li>2-core CPU&lt;/li>
&lt;li>7 GB of RAM memory&lt;/li>
&lt;li>14 GB of SSD disk space&lt;/li>
&lt;/ul>
&lt;p>但为什么说“部分”呢？因为它还有一些限制，以下引用来自 github：&lt;/p>
&lt;ul>
&lt;li>You can execute up to 1000 API requests in an hour across all actions within a repository.&lt;/li>
&lt;li>Each job in a workflow can run for up to 6 hours of execution time.&lt;/li>
&lt;/ul>
&lt;p>如果需求不高，只是拿它来跑一些定时爬虫任务什么的还是很香的。&lt;/p>
&lt;p>本次阮老师的文章里面用到了一个非常有趣的项目：&lt;a class="link" href="https://github.com/chubin/wttr.in" target="_blank" rel="noopener"
>wttr.in&lt;/a>，于是我又去找了一些类似的好玩的项目：&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/chubin/cheat.sh" target="_blank" rel="noopener"
>cheat.sh&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/chubin/rate.sx" target="_blank" rel="noopener"
>rate.sx&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>在这个项目里，我使用 &lt;a class="link" href="https://github.com/chubin/rate.sx" target="_blank" rel="noopener"
>rate.sx&lt;/a> 来每天向我发送各种币的估值信息以及比特币的估值曲线：&lt;/p>
&lt;p>参考 rate.sx 的 README，直接获取各币种估值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl rate.sx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以获取单个币种的估值曲线如btc：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl rate.sx/btc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来配置 actions，在项目中创建文件夹 &lt;code>.github/workflows&lt;/code>，yml 配置文件必须放在 workflows 文件夹下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Github Actions Bitcoin Bot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0 20 * * *&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>name： workflow 的名称&lt;/li>
&lt;li>on： 任务触发条件&lt;/li>
&lt;/ol>
&lt;p>以上触发方式为push以及定时任务，定时任务将在 UTC 时间 20 点执行，也就是北京时间 4 点，详情见&lt;a class="link" href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#scheduled-events-schedule" target="_blank" rel="noopener"
>文档&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout codes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Get Result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">bash ./bitcoin.sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>runs-on: 运行环境，官方目前提供了&lt;a class="link" href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/virtual-environments-for-github-hosted-runners" target="_blank" rel="noopener"
>四种虚拟环境&lt;/a>：Windows Server 2019，Ubuntu 18.04，Ubuntu 16.04，macOS Catalina 10.15&lt;/li>
&lt;li>uses: 所使用的其他 actions，更多可见 &lt;a class="link" href="https://github.com/actions" target="_blank" rel="noopener"
>GitHub Actions&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>接下来是发送邮件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Send mail&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">dawidd6/action-send-mail@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_address&lt;/span>: &lt;span style="color:#ae81ff">smtp.163.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_port&lt;/span>: &lt;span style="color:#ae81ff">465&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{secrets.MAIL_USERNAME}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{secrets.MAIL_PASSWORD}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">subject&lt;/span>: &lt;span style="color:#ae81ff">Bitcoin Rate Report&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">body&lt;/span>: &lt;span style="color:#ae81ff">file://result.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">to&lt;/span>: &lt;span style="color:#ae81ff">mapleblue2007@gmail.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#ae81ff">GitHub Actions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">content_type&lt;/span>: &lt;span style="color:#ae81ff">text/html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上的 username 和 password 可在仓库的 &lt;code>Setting -&amp;gt; Secrets&lt;/code> 添加，还有更多用法可见&lt;a class="link" href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>发送邮件的用法可见 &lt;a class="link" href="https://github.com/dawidd6/action-send-mail" target="_blank" rel="noopener"
>dawidd6/action-send-mail&lt;/a>&lt;/p>
&lt;p>注： 开启 163 邮箱的 POP3/SMTP 服务，原来的密码处应填写为授权码。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://help.github.com/en/actions" target="_blank" rel="noopener"
>https://help.github.com/en/actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ruanyf/weather-action" target="_blank" rel="noopener"
>https://github.com/ruanyf/weather-action&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/dawidd6/action-send-mail" target="_blank" rel="noopener"
>https://github.com/dawidd6/action-send-mail&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>RabbitMQ 学习笔记 | 二</title><link>https://ireflux.github.io/snow/post/study-note-of-rabbitmq-2/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/study-note-of-rabbitmq-2/</guid><description>&lt;p>开始填坑第二篇笔记，没想到这一隔就是将近四个月/笑。第一篇在这里：&lt;a class="link" href="https://wanmei.ml/snow/post/study-note-of-rabbitmq-1/" target="_blank" rel="noopener"
>RabbitMQ 学习笔记(1)&lt;/a>&lt;/p>
&lt;p>对于 Spring AMQP，消息默认是持久化的，前提是消息到达的终端队列也必须是持久的。尽管是持久化的，但是在消息接收的短时间内并未保存在磁盘上，而是在内存里。&lt;/p>
&lt;p>RabbitMQ 有两种消息调度方式，一种是其默认的循环调度，即每个 consumer 都会收到相同数量的消息。另一种是公平调度，为 Spring AMQP 的默认配置。Spring AMQP 中 &lt;code>AbstractMessageListenerContainer&lt;/code> 定义的 &lt;code>DEFAULT_PREFETCH_COUNT&lt;/code> 值为 250,如果将其设置为 1,则将会变为循环调度。&lt;/p>
&lt;p>RabbitMQ 不指定 Exchange 也能发送到 Queue，是因为有默认的 Exchange，可使用 &lt;code>sudo rabbitmqctl list_exchanges&lt;/code>命令查看。当使用默认的 Exchange 的时候，每个 Queue 都会以自己的名字作为 routing key 自动绑定到默认的 Exchange。一般情况下，我们会根据情景选择 Exchange 自行绑定来进行使用，以下列举出几个常见的 Exchange。&lt;/p>
&lt;h3 id="fanout-exchange">Fanout exchange&lt;/h3>
&lt;p>这种 Exchange 可以一次性将消息发送到多个 consumer，也称为广播。但是无法灵活的控制消息发送，例如只发送到某个 consumer。此时就出现了另一个 Exchange，叫做 Direct exchange&lt;/p>
&lt;h3 id="direct-exchange">Direct exchange&lt;/h3>
&lt;p>可以发现，它可以在绑定 Queue 时多了个 &lt;code>.with(routing key)&lt;/code> 选项，用以指定某个 routing key，发送消息时指定这个 routing key，消息便会被 Exchange 转发绑定的 Queue 中。但它仍然有局限性，就是不能以多个条件进行路由，不够灵活，因此 Topic exchange 出现了。&lt;/p>
&lt;h3 id="topic-exchange">Topic exchange&lt;/h3>
&lt;p>它的 routing key 是以多个单词组成的，单词之间以 &lt;code>.&lt;/code> 隔开。因此我们就可以使用“通配符”来匹配，有以下两种“通配符”：&lt;/p>
&lt;ul>
&lt;li>* 可以代替一个单词&lt;/li>
&lt;li># 可以代替零个或多个单词&lt;/li>
&lt;/ul>
&lt;p>可以看出，Topic exchange 是灵活度最高的，它甚至可以“退化”为 Direct exchange 和 Fanout exchange&lt;/p>
&lt;p>由于它们使用起来都大同小异，因此不再展示代码，测试的时候可以通过 &lt;code>sudo rabbitmqctl list_bindings&lt;/code> 来确认是否绑定了自定义的 exchange。根据官方的文档，还有一种exchange 叫做 headers，tutorial 中没有介绍，以后有用到的时候再补吧。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol start="2">
&lt;li>&lt;a class="link" href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener"
>RabbitMQ Tutorials&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Spring Session 使用笔记</title><link>https://ireflux.github.io/snow/post/note-on-using-spring-session/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/note-on-using-spring-session/</guid><description>&lt;p>Spring Session 的配置非常简单，根据&lt;a class="link" href="https://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot-redis.html" target="_blank" rel="noopener"
>官方文档&lt;/a>的说明，只需配置依赖及配置文件即可使用，无需任何代码相关的配置项。&lt;/p>
&lt;p>首先需要添加依赖项:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- ... --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.session&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-session-data-redis&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 application.properties 中添加以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.host&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">localhost # Redis server host.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.password&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74"># Login password of the redis server.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">6379 # Redis server port.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.session.store-type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">redis # Session store type.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此就配置完成了，现在就可以写两个简单的方法去测试一下。例如以下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/set&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">setSession&lt;/span>&lt;span style="color:#f92672">(&lt;/span>HttpSession session&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sherry&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ok&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/get&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getSession&lt;/span>&lt;span style="color:#f92672">(&lt;/span>HttpSession session&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">)&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 maven package 将其打成 jar 包，若需要跳过测试，可使用 &lt;code>mvn -Dmaven.test.skip=true package&lt;/code>，或者在 pom.xml 中添加插件依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- ... --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>maven-surefire-plugin&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;skipTests&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/skipTests&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后开启两个服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nohup java -jar app.jar --server.port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span> &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ nohup java -jar app.jar --server.port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8081&lt;/span> &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在在 8080 里面 set，在 8081 里面 get，会发现也可以得到结果。&lt;/p>
&lt;p>这里顺便歪个楼，如果服务在前台启动，比如说启动 redis 时未将 redis.conf 中的 daemonize 设置为 yes。此时可以使用 &lt;code>CTRL + Z&lt;/code> 将其挂在后台，但此时服务会被暂停，使用 &lt;code>fg&lt;/code> 可以将其调回前台继续运行(若后台有多个，默认调回最后启动的那个)。也可以使用 &lt;code>bg&lt;/code> 使其后台继续运行。使用 &lt;code>jobs&lt;/code> 可查看在后台运行的服务列表。&lt;/p>
&lt;p>到此为止就算完成了，但还可以更进一步，在这两个服务前面加一层 Nginx 来做反向代理，还可以设置权重。首先来修改 nginx 的配置文件，一般来说需要修改 nginx.conf，由于我现在的环境是 debian，有一个默认的配置文件位于 /etc/nginx/sites-enabled 下的 default 文件，不同的发行版文件目录结构可能不大一样，可以根据自身情况自行查找。可根据以下示例来写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-conf" data-lang="conf">&lt;span style="display:flex;">&lt;span>upstream wanmei.ml{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>8080 weight&lt;span style="color:#f92672">=&lt;/span>1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>8081 weight&lt;span style="color:#f92672">=&lt;/span>2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80 default_server;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen &lt;span style="color:#960050;background-color:#1e0010">[::]:&lt;/span>80 default_server;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name localhost;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location &lt;span style="color:#960050;background-color:#1e0010">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_pass http&lt;span style="color:#960050;background-color:#1e0010">://&lt;/span>wanmei.ml;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_redirect default;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后 &lt;code>nginx -s reload&lt;/code> 重新加载配置文件。现在再来访问此服务器的 ip 地址，流量就会经过 nginx 了，可以查看位于 /var/log/nginx 下的 access.log 日志进行确认。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="http://nginx.org/en/docs/" target="_blank" rel="noopener"
>nginx documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://program-think.blogspot.com/2019/11/POSIX-TUI-from-TTY-to-Shell-Programming.html" target="_blank" rel="noopener"
>扫盲 Linux＆UNIX 命令行——从“电传打字机”聊到“shell 脚本编程”&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>栈和队列的相互转换</title><link>https://ireflux.github.io/snow/post/stack-to-queue/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/stack-to-queue/</guid><description>&lt;p>关于栈和队列，有时会在面试题中看到诸如以下的问题：&lt;/p>
&lt;ol>
&lt;li>如何使用栈实现队列？&lt;/li>
&lt;li>如何使用队列实现栈？&lt;/li>
&lt;/ol>
&lt;p>栈的特点是 last in, first out (LIFO)，而队列的特点是First-In-First-Out (FIFO)&lt;/p>
&lt;p>接下来根据和队列的特点开始分析一下，首先看第一个问题，要想用栈实现队列，则至少需要两个栈，假如用 stack1 和 stack2 分别表示这两个栈。思路如下：&lt;/p>
&lt;p>进入此 “队列” 时，需要先 push 进 stack1; pop 时如若 stack2 是非空的，则直接从 stack2 pop，如果是空的则需要将 stack1 中的元素全部 push 到 stack2 中，再进行出 pop 操作。&lt;/p>
&lt;p>以下是实现及测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StackToQueue&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> stack1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> stack2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">pushQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> num&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>num&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Integer &lt;span style="color:#a6e22e">popQueue&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>stack2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>stack1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stack2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>stack1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stack1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> stack2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StackToQueue stackToQueue &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StackToQueue&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popQueue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popQueue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popQueue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>stackToQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popQueue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二题使用队列实现栈，同样使用 queue1 和 queue2 来分别代表两个队列， 这里偏个题，忽然间发现，里面还有一个 ArrayDeque 的实现，以前没有见到过，查了下资料发现是 jdk6 加的，具有双向的特性，队列和栈的特性集一身，还看到了篇 stack over flow 的提问，详情不再赘述，见文末参考资料。言归正传，队列实现栈的思路如下：&lt;/p>
&lt;p>入 ”栈” 时，假设 1,2,3 依次进入了 queue1，出 “栈” 时，需要先出 3，因此需要先将 1,2 从队列中出来放到 queue2, 然后再次需要出 “栈” 时，需要出 2,因此此时需要先将 1 从 queue2 中出来放到 queue1 中，再从 queue2 中出 2。即出队列时，若队列不为空，需要将 n-1 元素转移到另一个空的队列中。&lt;/p>
&lt;p>以下是实现及测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">QueueToStack&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> queue1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayDeque&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> queue2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayDeque&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">pushStack&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Integer num&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>num&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>num&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Integer &lt;span style="color:#a6e22e">popStack&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> queue2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> QueueToStack queueToStack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> QueueToStack&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushStack&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushStack&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushStack&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popStack&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popStack&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pushStack&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popStack&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>queueToStack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">popStack&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/6163166/why-is-arraydeque-better-than-linkedlist" target="_blank" rel="noopener"
>Why is ArrayDeque better than LinkedList&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html" target="_blank" rel="noopener"
>java api queue&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html" target="_blank" rel="noopener"
>java api ArrayDeque&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>RabbitMQ 学习笔记 | 一</title><link>https://ireflux.github.io/snow/post/study-note-of-rabbitmq-1/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/study-note-of-rabbitmq-1/</guid><description>&lt;p>此文仅作个记录&lt;/p>
&lt;p>开始之前，首先需要安装 RabbitMQ 的服务端，由于我此次的安装环境为 Debian，根据官网所说，推荐使用 &lt;a class="link" href="https://www.rabbitmq.com/install-debian.html#apt" target="_blank" rel="noopener"
>apt repository on Package Cloud or Bintray&lt;/a>这种方式来安装，然而在这里还是遇到了一些问题，想要安装最新的 RabbitMQ，则需要高版本的 Erlang，具体详情可以看这个关于 RabbitMQ 和 Erlang/OPT 的兼容性&lt;a class="link" href="https://www.rabbitmq.com/which-erlang.html#compatibility-matrix" target="_blank" rel="noopener"
>表格&lt;/a>&lt;/p>
&lt;p>然而 Debian 的 Erlang 版本很旧，因此还需要先安装 Erlang，关于&lt;a class="link" href="https://www.rabbitmq.com/which-erlang.html#debian" target="_blank" rel="noopener"
>这一点&lt;/a>，官网上也提到了。因此也给出了&lt;a class="link" href="https://www.rabbitmq.com/install-debian.html#erlang-repositories" target="_blank" rel="noopener"
>解决方案&lt;/a>，安装过程此处不再赘述。&lt;/p>
&lt;p>安装完毕之后，其他一些需要注意的地方：比如说默认情况下端口号是 5672，HTTP的端口是 15672，更多默认端口可以参考&lt;a class="link" href="https://www.rabbitmq.com/install-debian.html#ports" target="_blank" rel="noopener"
>这里&lt;/a>。RabbitMQ 自带了一个管理界面，如若要开启这个 WEB 界面，需要开启一个插件，只需要输入以下命令即可开启：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rabbitmq-plugins enable rabbitmq_management
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后访问 &lt;code>ip:15672&lt;/code> 这个地址，这样就可以愉快的使用图形化界面来管理 RabbitMQ 了，更多详情还可以看&lt;a class="link" href="https://www.rabbitmq.com/management.html" target="_blank" rel="noopener"
>这里&lt;/a>。&lt;/p>
&lt;p>默认情况下还会有一个默认的账户用于登录，账户名和密码都是：guest，而且只能从本机上连接。一般正常使用过程中都是需要装在服务器上，然后远程连接的，新创建一个账户就没有这个限制了。可以使用上面那个图形化界面来添加账户，也可以使用 rabbitmqctl 来创建。命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rabbitmqctl add_user username password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rabbitmqctl set_user_tags username administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rabbitmqctl set_permissions -p / username &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令大概看英文就知道命令是做什么用的，几乎不用解释，更多关于权限控制的可以看&lt;a class="link" href="https://www.rabbitmq.com/access-control.html" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/p>
&lt;p>还有一个关于配置的文档，里面包含很多配置信息，以及很多基础配置的默认值都可以在这里找到，戳&lt;a class="link" href="https://www.rabbitmq.com/configure.html" target="_blank" rel="noopener"
>这里&lt;/a>查看。&lt;/p>
&lt;p>不得不说，RabbitMQ 的文档还是很全面的，基本上遇到的问题都可以在官方文档上找到想要的信息。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.rabbitmq.com/documentation.html" target="_blank" rel="noopener"
>RabbitMQ Documentation&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Spring Data Redis 学习笔记</title><link>https://ireflux.github.io/snow/post/study-note-of-spring-data-redis/</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/study-note-of-spring-data-redis/</guid><description>&lt;p>Redis 官网上有一些推荐的 redis client，在 Java 编程语言分类下，截至发文前，有三个 client 被官方推荐，分别是：&lt;a class="link" href="https://github.com/xetorthio/jedis" target="_blank" rel="noopener"
>Jedis&lt;/a>， &lt;a class="link" href="https://github.com/lettuce-io/lettuce-core" target="_blank" rel="noopener"
>lettuce&lt;/a>， &lt;a class="link" href="https://github.com/mrniko/redisson" target="_blank" rel="noopener"
>Redisson&lt;/a>， Spring Boot 2.X 中默认集成了 lettuce。&lt;/p>
&lt;p>以下是&lt;a class="link" href="https://github.com/lettuce-io/lettuce-core" target="_blank" rel="noopener"
>官方&lt;/a>对 lettuce 的描述，摘录如下：&lt;/p>
&lt;blockquote>
&lt;p>Lettuce is a scalable thread-safe Redis client for synchronous, asynchronous and reactive usage. Multiple threads may share one connection if they avoid blocking and transactional operations such as BLPOP and MULTI/EXEC. Lettuce is built with netty. Supports advanced Redis features such as Sentinel, Cluster, Pipelining, Auto-Reconnect and Redis data models.&lt;/p>
&lt;/blockquote>
&lt;p>因此可以看出，lettuce 是线程安全的，基于 netty，在不包含阻塞和事务的情况下多个线程还可以共用一个连接。相比之下 Jedis 的实现上是直连的 redis server，多线程环境下是非线程安全的。&lt;/p>
&lt;p>言归正传，在开始之前，首先需要在 pom.xml 文件中添加以下依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-data-redis&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.commons&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>commons-pool2&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中值得一提的是，如果不添加 commons-pool2，启动 Spring Application 会报错，大意是找不到 commons-pool2 之类的 blahblahblah&amp;hellip;可以添加以下配置来解决，但还是建议直接加上这个依赖。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LettuceConnectionFactory &lt;span style="color:#a6e22e">redisConnectionFactory&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> LettuceConnectionFactory&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> RedisStandaloneConfiguration&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ip&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">6379&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>连接 redis 及 lettuce pool 的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.database&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.password&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">6379&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.host&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">host ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.lettuce.pool.min-idle&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.lettuce.pool.max-idle&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.lettuce.pool.max-active&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.lettuce.pool.max-wait&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">1ms&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">spring.redis.lettuce.shutdown-timeout&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">100ms&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>redis 中包含的几种数据结构大都在 Spring Data Redis 中能够找到对应，基本上见文知意，不再赘述。以下是我测试时的 Demo，仅供参考：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RunWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SpringRunner&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@SpringBootTest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RedisDemoApplicationTests&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> StringRedisTemplate stringRedisTemplate&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">contextLoads&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueOperations&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> valueOperations&lt;span style="color:#f92672">=&lt;/span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">opsForValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valueOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;valueOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">expire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;valueOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">,&lt;/span> TimeUnit&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SECONDS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-------------valueOperations -&amp;gt; key: valueOperations, value: value--------------&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>valueOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;valueOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\texpire:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getExpire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;valueOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListOperations&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> listOperations &lt;span style="color:#f92672">=&lt;/span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">opsForList&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">leftPushAll&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;listOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Operation&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;s&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">expire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;listOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#f92672">,&lt;/span> TimeUnit&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SECONDS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-------------listOperations -&amp;gt; key: listOperations, value: list, Operation, s--------------&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;values:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>listOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">range&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;listOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\texpire:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getExpire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;listOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HashOperations&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> hashOperations &lt;span style="color:#f92672">=&lt;/span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">opsForHash&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hashOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hashOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hash&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Operations&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">expire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hashOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">80&lt;/span>&lt;span style="color:#f92672">,&lt;/span> TimeUnit&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SECONDS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-------------hashOperations -&amp;gt; key: hashOperations, value: hash: Operation--------------&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>hashOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hashOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hash&amp;#34;&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\texpire:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getExpire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hashOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetOperations&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> setOperations &lt;span style="color:#f92672">=&lt;/span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">opsForSet&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;setOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">expire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;setOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">70&lt;/span>&lt;span style="color:#f92672">,&lt;/span> TimeUnit&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SECONDS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-------------setOperations -&amp;gt; key: setOperations, value: 1, 2, 1--------------&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;values:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>setOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">members&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;setOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\texpire:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getExpire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;setOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ZSetOperations&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> zSetOperations &lt;span style="color:#f92672">=&lt;/span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">opsForZSet&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zSetOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSetOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSet&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">expire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSetOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>&lt;span style="color:#f92672">,&lt;/span> TimeUnit&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SECONDS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-------------zSetOperations -&amp;gt; key: zSetOperations, value: zSet score: 10--------------&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>zSetOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">range&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSetOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\texpire:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>stringRedisTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getExpire&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSetOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">)+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\tscore:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>zSetOperations&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">score&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSetOperations&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zSet&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他方法可参考 Spring Data Redis 的 &lt;a class="link" href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="noopener"
>API文档&lt;/a>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/lettuce-io/lettuce-core" target="_blank" rel="noopener"
>lettuce github&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="noopener"
>RedisTemplate&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.spring.io/spring-data/redis/docs/2.1.9.RELEASE/reference/html/" target="_blank" rel="noopener"
>Spring Data Redis&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Spring Boot 整合 Swagger2</title><link>https://ireflux.github.io/snow/post/spring-boot-and-swagger2/</link><pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/spring-boot-and-swagger2/</guid><description>&lt;p>关于 Spring Boot 整合 Swagger2，网络上有很多详细的文章，此文仅作个学习记录。&lt;/p>
&lt;p>首先需要引入 Swagger2 的依赖，截止发文前版本号如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>io.springfox&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springfox-swagger2&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>2.9.2&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>io.springfox&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springfox-swagger-ui&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>2.9.2&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后写一个 Swagger2 的配置类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EnableSwagger2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SwaggerConfig&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Docket &lt;span style="color:#a6e22e">createRestApi&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Docket&lt;span style="color:#f92672">(&lt;/span>DocumentationType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SWAGGER_2&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pathMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">select&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>&lt;span style="color:#f92672">(&lt;/span>RequestHandlerSelectors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">basePackage&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.example.demo.spider.controller&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">paths&lt;/span>&lt;span style="color:#f92672">(&lt;/span>PathSelectors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">apiInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> ApiInfoBuilder&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Swagger&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">description&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;接口信息……&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">version&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">contact&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Contact&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sherry&amp;#39;s blog&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://wanmei.ml/snow&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sherry@wanmei.com&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">license&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MIT License&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">licenseUrl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://choosealicense.com/licenses/mit/&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，启动项目，然后进入 &lt;code>http://[ip]:8080/swagger-ui.html&lt;/code> 应该就可以看到页面了，但是还没有显示任何接口，需要在接口上加上注解以保证 swagger2 能扫描到，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Api&lt;/span>&lt;span style="color:#f92672">(&lt;/span>tags &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;城市相关接口&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/city&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CitiesController&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> ICitiesService citiesService&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/list&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiOperation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;查询城市列表&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Cities&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getList&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> citiesService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getList&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiOperation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;根据id查询城市位置信息&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiImplicitParam&lt;/span>&lt;span style="color:#f92672">(&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;编号&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> defaultValue &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> required &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cities &lt;span style="color:#a6e22e">getCityById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Integer id&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> citiesService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getLocationById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处涉及到的 API 及解释如下所示：&lt;/p>
&lt;ol>
&lt;li>@Api：用于标记 Controller 的功能&lt;/li>
&lt;li>@ApiOperation：用于标记一个方法的功能。&lt;/li>
&lt;li>@ApiImplicitParam：用于描述一个参数所代表的意思，默认值及是否必填等相关信息（这里的 &lt;code>required = true&lt;/code> 只是在文档中表明必填，不会对接口产生作用），若有多个参数，多个 &lt;code>@ApiImplicitParam&lt;/code> 注解需要放在一个 &lt;code>@ApiImplicitParams&lt;/code> 注解中&lt;/li>
&lt;/ol>
&lt;p>还可以对实体类进行标记：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EqualsAndHashCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>callSuper &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Accessors&lt;/span>&lt;span style="color:#f92672">(&lt;/span>chain &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ApiModel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Cities&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Serializable &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> serialVersionUID &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1L&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiModelProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;编号&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Integer id&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiModelProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;城市名称&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String city&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiModelProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;位置&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String location&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>@ApiModelProperty：对一个属性进行标记&lt;/li>
&lt;/ol>
&lt;p>更多&lt;a class="link" href="https://springfox.github.io/springfox/docs/current/#overriding-descriptions-via-properties" target="_blank" rel="noopener"
>描述&lt;/a>及&lt;a class="link" href="https://springfox.github.io/springfox/docs/current/#property-file-lookup" target="_blank" rel="noopener"
>示例&lt;/a>点击链接即可。&lt;/p>
&lt;p>除 &lt;code>swagger-ui.html&lt;/code> 之外，还有一些默认的文档路径，详情见&lt;a class="link" href="https://springfox.github.io/springfox/docs/current/#customizing-the-swagger-endpoints" target="_blank" rel="noopener"
>此处&lt;/a>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://springfox.github.io/springfox/docs/current/" target="_blank" rel="noopener"
>Springfox Reference Documentation&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>初探PostgreSQL</title><link>https://ireflux.github.io/snow/post/the-first-exploration-of-postgresql/</link><pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/the-first-exploration-of-postgresql/</guid><description>&lt;p>在群友的安利（&lt;del>传教&lt;/del>）下，成功引起了我的兴趣&amp;hellip;&lt;/p>
&lt;p>在作了一些了解之后，记录如下。以下本文的命令是在 Arch Linux 上进行的，其他发行版暂不作讨论，不过应该也普遍适用。&lt;/p>
&lt;p>安装没什么可说的，直接 &lt;code>sudo pacman -S postgresql&lt;/code> 就好了。(其他发行版请使用对应的包管理器)&lt;/p>
&lt;p>安装 PostgreSQL 的时候会同时创建一个名为 postgres 的系统账户。这个账户同时也是 PostgreSQL 数据库中的 Superuser, 因此创建数据库账户或者创建数据库都需要由这个账户来进行操作。&lt;/p>
&lt;p>如果没有指定配置文件直接在 terminal 中键入 postgres 后显示可能会显示如下结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>postgres does not know where to find the server configuration file.
You must specify the --config-file or -D invocation option or set the PGDATA environment variable.
&lt;/code>&lt;/pre>&lt;p>因此需要先切换到 postgres 账户：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo -iu postgres
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后初始化配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ initdb -D /var/lib/postgres/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得一提的是，默认情况下，数据库的编码和语言环境会使用本机的系统编码和语言环境，因此如果系统不是英文环境或者编码不是 utf-8 的还是建议通过指定编码和语言环境的方式来覆盖掉默认值。就像这洋：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ initdb --locale en_US.UTF-8 -E UTF8 -D &lt;span style="color:#e6db74">&amp;#39;/var/lib/postgres/data&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上条与上上条命令中的 -D 会指定默认(default)的存储位置。若无特殊需求，一般使用默认位置就行，如果想要修改存储位置，可以看&lt;a class="link" href="https://wiki.archlinux.org/index.php/PostgreSQL#Change_default_data_directory" target="_blank" rel="noopener"
>这里&lt;/a>，此处不再赘述。&lt;/p>
&lt;p>如果一切顺利，应该会出现以下结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>The files belonging to this database system will be owned by user &amp;#34;postgres&amp;#34;.
This user must also own the server process.
The database cluster will be initialized with locale &amp;#34;en_US.UTF-8&amp;#34;.
The default database encoding has accordingly been set to &amp;#34;UTF8&amp;#34;.
The default text search configuration will be set to &amp;#34;english&amp;#34;.
Data page checksums are disabled.
fixing permissions on existing directory /var/lib/postgres/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok
syncing data to disk ... ok
WARNING: enabling &amp;#34;trust&amp;#34; authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.
Success. You can now start the database server using:
pg_ctl -D /var/lib/postgres/data -l logfile start
&lt;/code>&lt;/pre>&lt;p>然后启动 postgresql server 服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo systemctl start postgresql.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此处事实上已经完成了，但是这一切都是在 postgres 这个账户下进行操作的，为了便于自己本机日常使用的账户进行操作，可以在 postgresql 数据库中创建一个和自己本机账户同名的数据库账户，仍然需要 postgres 这个 Superuser 来继续操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ createuser --interactive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上条命令执行后，在这里为了方便，我将其设置成了 superuser，交互如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Enter name of role to add: [此处填写你的本机账户名]
Shall the new role be a superuser? (y/n) y
&lt;/code>&lt;/pre>&lt;p>创建完用户就可以输入 &lt;code>exit&lt;/code> 来换回本来的账户了。接下来创建数据库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ createdb &lt;span style="color:#f92672">[&lt;/span>此处填写数据库名称&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果创建的数据库用户名称与本机不同名，此时通过 &lt;code>createdb&lt;/code> 命令来创建数据库就会出现如下错误：&lt;/p>
&lt;pre tabindex="0">&lt;code>createdb: could not connect to database template1: FATAL: role &amp;#34;[你的本机账户名]&amp;#34; does not exist
&lt;/code>&lt;/pre>&lt;p>如果一切顺利，就可以通过 &lt;code>psql -d [数据库名称]&lt;/code>来访问你的数据库了。&lt;/p>
&lt;p>以下是进入数据库后的一些查询命令：&lt;/p>
&lt;blockquote>
&lt;p>\help -&amp;gt; 查看所有数据库的命令。&lt;br>
\help [命令] -&amp;gt; 查看此命令的详细信息及用法。类似于 man page。&lt;br>
\du -&amp;gt; 列出所有的账户及其权限。&lt;br>
\dt -&amp;gt; 显示当前数据库所有表的摘要信息。&lt;br>
\q -&amp;gt; 退出&lt;/p>
&lt;/blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.postgresql.org/docs/11/" target="_blank" rel="noopener"
>PostgreSQL Doc&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/index.php/PostgreSQL" target="_blank" rel="noopener"
>Arch Wiki PostgreSQL&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Docker Swarm 集群创建过程</title><link>https://ireflux.github.io/snow/post/docker-swarm-cluster-create/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/docker-swarm-cluster-create/</guid><description>&lt;p>Docker Swarm 入门用到的命令不多，初始化的时候提示写的就很详细，一步步下来感觉用起来很方便。&lt;/p>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker swarm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上句后，会有类似如下的东西出现：&lt;/p>
&lt;blockquote>
&lt;p>Swarm initialized: current node (xxxxxxxxxxxxxxxxxxxxxxxxx) is now a manager.&lt;br>
To add a worker to this swarm, run the following command:&lt;br>
docker swarm join &amp;ndash;token xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ip]:2377&lt;br>
To add a manager to this swarm, run &amp;lsquo;docker swarm join-token manager&amp;rsquo; and follow the instructions.&lt;/p>
&lt;/blockquote>
&lt;h2 id="加入集群">加入集群&lt;/h2>
&lt;p>直接复制初始化后显示的命令，在同一网段的另一台主机上输入即可。如果成功的话，会出现如下反馈：&lt;/p>
&lt;blockquote>
&lt;p>This node joined a swarm as a worker.&lt;/p>
&lt;/blockquote>
&lt;p>如果不小心关掉了 terminal ，还可以通过以下命令看到 token：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker swarm join-token worker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以查看添加管理节点到集群的 token：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker swarm join-token manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查看">查看&lt;/h2>
&lt;p>查看集群节点列表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker node ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看集群上的服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker service ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="终止集群">终止集群&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo docker swarm leave --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://docs.docker.com/get-started/part3/" target="_blank" rel="noopener"
>docker docs part 3 &amp;amp; part 4&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Linux上adb的使用记录</title><link>https://ireflux.github.io/snow/post/adb-use-record-on-linux/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/adb-use-record-on-linux/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我对手机的需求不高，不打游戏，只需要续航，有 Google 服务以及 root 就足够了。之前一直使用的 ADUI 的 Global 版本，再加上 Magisk 的 root 管理，配上冰箱也足以应付诸如微信这一类的国产毒瘤了。但之前有一次升级到 Pie 的大版本更新，把我的 root 覆盖掉了。因此，不得不重新再刷入 Magisk。不过 MIUI11 官方说会加入应用冻结的功能，这样一来我连 root 的需求似乎也没有了 /笑&lt;/p>
&lt;p>言归正传，在 Linux 上使用 adb 有些机型还是需要做一些配置，不然 &lt;code>adb devices&lt;/code> 会显示：&lt;/p>
&lt;blockquote>
&lt;p>List of devices attached&lt;br>
[device name] unauthorized&lt;/p>
&lt;/blockquote>
&lt;p>要进行配置之前，首先需要找到自己手机的 USB vendor ID 和 product ID，启用开发者模式，然后打开 usb 调试模式插上手机后在 terminal 中执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ lsusb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它将会显示出好几条类似 &lt;code>Bus xxx Device xxx: ID xxxx:xxxx &lt;/code> 的东西，根据后面显示的公司信息很容易分辨出自己的手机是哪一个，ID 之后的 &lt;code>xxxx：xxxx&lt;/code>，前者是 vendor id，后者是 product id&lt;/p>
&lt;p>下面有两种方式来写配置文件：&lt;/p>
&lt;h3 id="添加udev规则">添加udev规则&lt;/h3>
&lt;p>1.首先要确保系统中有安装 &lt;code>android-udev&lt;/code> 这个包。可以通过包管理器来安装或者访问&lt;a class="link" href="https://source.android.com/setup/build/initializing#configuring-usb-access" target="_blank" rel="noopener"
>source.android.com&lt;/a>来手动安装。在这里新建一个文件：&lt;code>/etc/udev/rules.d/51-android.rules&lt;/code>，然后写入以下配置，只需修改其中的 vendor id 和 product id 为自己的即可:&lt;/p>
&lt;blockquote>
&lt;p>SUBSYSTEM==&amp;ldquo;usb&amp;rdquo;, ATTR{idVendor}==&amp;quot;[VENDOR ID]&amp;quot;, MODE=&amp;ldquo;0660&amp;rdquo;, GROUP=&amp;ldquo;adbusers&amp;rdquo;&lt;br>
SUBSYSTEM==&amp;ldquo;usb&amp;rdquo;,ATTR{idVendor}==&amp;quot;[VENDOR ID]&amp;quot;,ATTR{idProduct}==&amp;quot;[PRODUCT ID]&amp;quot;,SYMLINK+=&amp;ldquo;android_adb&amp;rdquo;&lt;br>
SUBSYSTEM==&amp;ldquo;usb&amp;rdquo;,ATTR{idVendor}==&amp;quot;[VENDOR ID]&amp;quot;,ATTR{idProduct}==&amp;quot;[PRODUCT ID]&amp;quot;,SYMLINK+=&amp;ldquo;android_fastboot&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>2.然后重新载入新的配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo udevadm control --reload-rules
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3.然后将当前的用户添加到 &lt;code>adbusers&lt;/code> 这个组里：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo gpasswd -a user group
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置adb">配置adb&lt;/h3>
&lt;p>在这个位置创建文件 &lt;code>~/.android/adb_usb.ini&lt;/code> ，然后将 vendor id 写入到里面，保存退出即可。&lt;/p>
&lt;p>这两种方式任选其一即可。然后进入解压后的 platform-tools 目录，将下好的 twrp 也放到里面，在目录中启动 terminal，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./adb devices
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样的话，应该就能看到设备被列出来了，类似于这样：&lt;/p>
&lt;blockquote>
&lt;p>List of devices attached&lt;br>
[device name] device&lt;/p>
&lt;/blockquote>
&lt;p>这样就算是完成了。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>我自己使用的是第二种方式，能够成功找到adb。&lt;code>adb reboot bootloader&lt;/code> 后进入 bootloader 也能通过 &lt;code>fastboot devices&lt;/code> 找到设备，然而通过 &lt;code>fastboot flash recovery xxxx.img&lt;/code> 就会莫名其妙的卡住&amp;hellip;通过 &lt;code>fastboot boot xxxx.img&lt;/code> 想要直接进入 twrp 也会卡在 sending&amp;hellip;这里。不知道是什么原因，先挖个坑，以后再慢慢研究好了。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/index.php/Android_Debug_Bridge" target="_blank" rel="noopener"
>Android Debug Bridge&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>AVL tree 学习笔记</title><link>https://ireflux.github.io/snow/post/avl-tree-study-note/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/avl-tree-study-note/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近在复习数据结构，学习了一下 AVL 树，现记录如下。&lt;/p>
&lt;h2 id="什么是-avl-树">什么是 AVL 树&lt;/h2>
&lt;p>AVL 树是一种平衡二叉查找树(self-balancing binary search tree),由苏联两位科学家 &lt;a class="link" href="https://en.wikipedia.org/wiki/Georgy_Adelson-Velsky" target="_blank" rel="noopener"
>Georgy Adelson-Velsky&lt;/a> 和 &lt;a class="link" href="https://en.wikipedia.org/wiki/Evgenii_Landis" target="_blank" rel="noopener"
>Evgenii Landis&lt;/a> 于1962年在论文《&lt;a class="link" href="http://professor.ufabc.edu.br/~jesus.mena/courses/mc3305-2q-2015/AED2-10-avl-paper.pdf" target="_blank" rel="noopener"
>An algorithm for the organization of information&lt;/a>》中首次提出。&lt;/p>
&lt;h2 id="avl-树的性质">AVL 树的性质&lt;/h2>
&lt;p>AVL 是一个平衡二叉查找树，首先它应是一个二叉查找树（又称二叉排序树），因此，它首先具备如下特性:&lt;/p>
&lt;ul>
&lt;li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值。&lt;/li>
&lt;li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值。&lt;/li>
&lt;li>左、右子树也分别为二叉排序树。&lt;/li>
&lt;/ul>
&lt;p>AVL 引入了平衡因子，即：&lt;/p>
&lt;ul>
&lt;li>每个节点的左右子树高度之间的差异小于或等于1。&lt;/li>
&lt;/ul>
&lt;h2 id="avl-树的旋转">AVL 树的旋转&lt;/h2>
&lt;p>通过对节点的旋转来重新平衡树，通常对 AVL 树的旋转有以下四种情况：&lt;/p>
&lt;p>LL(Left Left Case):&lt;/p>
&lt;p>&lt;img src="http://wx1.sinaimg.cn/large/ea5eda6dly1g1gm6mz4y3j20ix04m0sq.jpg"
loading="lazy"
alt="LL"
>&lt;/p>
&lt;p>LR(Left Right Case):&lt;/p>
&lt;p>&lt;img src="http://wx1.sinaimg.cn/large/ea5eda6dly1g1gm6mywftj20cf0bdt8v.jpg"
loading="lazy"
alt="LR"
>&lt;/p>
&lt;p>RR(Right Right Case):&lt;/p>
&lt;p>&lt;img src="http://wx1.sinaimg.cn/large/ea5eda6dly1g1gm6mxjg7j20il04hweh.jpg"
loading="lazy"
alt="RR"
>&lt;/p>
&lt;p>RL(Right Left Case):&lt;/p>
&lt;p>&lt;img src="http://wx2.sinaimg.cn/large/ea5eda6dly1g1gm6my92oj20c00azjri.jpg"
loading="lazy"
alt="RL"
>&lt;/p>
&lt;p>&lt;em>p.s. 以上图片通过 draw.io 绘制而成，凑活能看（&lt;/em>&lt;/p>
&lt;p>再放一张 gif，便于理解，图源来自 Wikipedia:&lt;/p>
&lt;p>&lt;img src="http://wx2.sinaimg.cn/large/ea5eda6dly1g1f6ae2fq2g208w050dm1.gif"
loading="lazy"
alt="AVL"
>&lt;/p>
&lt;h2 id="avl树的时间空间复杂度">AVL树的时间空间复杂度&lt;/h2>
&lt;p>以下图表来源于Wikipedia.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Algorithm&lt;/th>
&lt;th style="text-align:center">Average&lt;/th>
&lt;th style="text-align:center">Worst case&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">space&lt;/td>
&lt;td style="text-align:center">O(n)&lt;/td>
&lt;td style="text-align:center">O(n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">search&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">insert&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">delete&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/AVL_tree" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/AVL_tree&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.geeksforgeeks.org/avl-tree-set-1-insertion/" target="_blank" rel="noopener"
>https://www.geeksforgeeks.org/avl-tree-set-1-insertion/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>子元素margin-top影响父元素问题</title><link>https://ireflux.github.io/snow/post/a-question-about-the-css-box-model/</link><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/a-question-about-the-css-box-model/</guid><description>&lt;p>今天遇到了一个问题，是关于前端 CSS 子元素的 margin-top 会影响父元素的问题。搞了好长时间也不知道怎么回事，最后终于解决了，写出来权当做个记录。&lt;/p>
&lt;p>我的 HTML 嵌套关系如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">header&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;site-head&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blog-logo&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;logo&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;background: url(/resources/images/qyc.jpg)&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>父元素 CSS：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#site-head{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-image&lt;/span>: url(&lt;span style="color:#e6db74">&amp;#34;/resources/images/header.jpg&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-size&lt;/span>: &lt;span style="color:#66d9ef">cover&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>子元素 CSS：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-logo {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">block&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">text-align&lt;/span>: &lt;span style="color:#66d9ef">center&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当子元素中 margin-top 为 50px 时，神奇的一幕发生了，子元素并没有相对于父元素向下移动 50px，而是连带着父元素一起向下移动了 50px。&lt;/p>
&lt;p>在 Chrome 的 Developer tools 中查看时，看到就连 body 都向下移动了 50px！之后尝试在父元素中设置 margin 或 body 中设置都没有用，在父元素中设置 padding 也没有效果。&lt;/p>
&lt;p>之后搜索到的 css2.1 盒模型中规定的内容如下：&lt;/p>
&lt;blockquote>
&lt;p>In this specification, the expression collapsing margins means that adjoining margins (no non-empty content, padding or border areas or clearance separate them) of two or more boxes (which may be next to one another or nested) combine to form a single margin.&lt;/p>
&lt;/blockquote>
&lt;p>所有毗邻的两个或更多盒元素的 margin 将会合并为一个 margin 共享之。毗邻的定义为：同级或者嵌套的盒元素，并且它们之间没有非空内容、Padding 或 Border 分隔。因为嵌套也属于毗邻，所以在样式表中优先级更高的。因此子元素中的 margin 覆盖了父元素的 margin。&lt;/p>
&lt;p>之后找到的解决方法如下：&lt;/p>
&lt;ol>
&lt;li>父级或子元素使用浮动或者绝对定位 absolute 浮动或绝对定位不参与 margin 的折叠&lt;/li>
&lt;li>父级 overflow:hidden;&lt;/li>
&lt;li>父级设置 padding（破坏非空白的折叠条件）&lt;strong>//对于这条表示怀疑，我之前设置的 padding 并没有起到作用(&lt;/strong>&lt;/li>
&lt;li>父级设置 border&lt;/li>
&lt;/ol>
&lt;p>最终我用的&lt;code>父级 overflow:hidden;&lt;/code>完美解决问题！&lt;/p></description></item><item><title>一道笔试题</title><link>https://ireflux.github.io/snow/post/an-interview-question/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/an-interview-question/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>前段时间参加了某头条的笔试，出的五道编程题都跟算法有关。其中有道题大致意思是这样的：&lt;strong>输入一个表达式，输出由‘6’这个字符组成的运算结果的图形。也就是说，假设输入5*6+6,就需要输出由‘6’组成的结果为“36”的图形。&lt;/strong>&lt;/p>
&lt;p>事实上，这道题考得是“表达式求值”。关键点就在于需要将这个表达式拆开并按照加减乘除和括号之间的优先级算法，首先需要算出具体的答案，然后取余跟事先画好的0-9的图形进行匹配即可。可惜我当时一直在想怎么表达出这些毫无规律的“数字图形”，却没意识到考点其实是&amp;lt;数据结构&amp;gt;上曾经学过的表达式求值:(&lt;/p>
&lt;p>一般来说，表达式求值有“中缀表示法”和“后缀表示法”(又称“逆波兰表示法”)两种。适合人类阅读的便是“中缀表示法”，例如：5+6*7 但“后缀表示法”更适合计算机来计算，因为无需判断操作符号的优先级，例如：567*+&lt;/p>
&lt;p>虽然“逆波兰表示法”更容易编程，然而事实上，一般都会输入“中缀表达式”，因此还要转化为“逆波兰表示法”，所以两种算法个人感觉没有哪个更为简单。&lt;/p>
&lt;p>要判断运算符优先级，首先要将数字和运算符分两边存储，然后看第一个运算符和第二个运算符之间的大小，如果第一个比第二个大或者相等就可以先算第一个，反之则要先计算第二个，很符合先进先出的规则。这样就很自然的想到用到栈来表示。&lt;/p>
&lt;h3 id="中缀表达式">中缀表达式&lt;/h3>
&lt;p>以下是“中缀表达式”在栈中执行过程，假设表达式为：&lt;strong>5+6*7/8&lt;/strong>&lt;/p>
&lt;p>首先，遇到 5 ，把 5 送到操作数栈，遇到 + ，送到操作符栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>遇到 6，压入操作数栈中&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">6&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>遇到乘，由于 * 的优先级高于 + ，所以，现在就什么也不做，只把乘号进栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>遇到 7 ，压入操作数栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">7&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>遇到 / ，即可计算 6*7 ，从操作数栈中取出两个数字，从操作符中取出一个操作符，并将结果压入操作数栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">6*7&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>将 / 入操作符栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">6*7&lt;/td>
&lt;td style="text-align:center">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>将 8 入操作数栈：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">操作数栈&lt;/th>
&lt;th style="text-align:center">操作符栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">8&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">6*7&lt;/td>
&lt;td style="text-align:center">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>全部压入栈中后，每次只需从操作数中取出两个数字，从操作符中取出一个运算符，并将其结果压入操作数栈中即可。&lt;/p>
&lt;h3 id="调度场算法">调度场算法&lt;/h3>
&lt;p>以下来源于Wikipedia:&lt;/p>
&lt;blockquote>
&lt;p>调度场算法（Shunting Yard Algorithm）是一个用于将中缀表达式转换为后缀表达式的经典算法，由艾兹格·迪杰斯特拉引入，因其操作类似于火车编组场而得名。&lt;/p>
&lt;/blockquote>
&lt;p>Input: 3 + 4 × 2 ÷ ( 1 − 5 ) ^ 2 ^ 3&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Token&lt;/th>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:left">Output(in RPN)&lt;/th>
&lt;th style="text-align:right">Operator stack&lt;/th>
&lt;th style="text-align:center">Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:right">+&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4&lt;/td>
&lt;td style="text-align:right">+&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4&lt;/td>
&lt;td style="text-align:right">× +&lt;/td>
&lt;td style="text-align:center">× has higher precedence than +&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4 2&lt;/td>
&lt;td style="text-align:right">× +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">÷&lt;/td>
&lt;td style="text-align:left">Pop stack to output&lt;/td>
&lt;td style="text-align:left">3 4 2 ×&lt;/td>
&lt;td style="text-align:right">+&lt;/td>
&lt;td style="text-align:center">÷ and × have same precedence&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(same up)&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4 2 ×&lt;/td>
&lt;td style="text-align:right">÷ +&lt;/td>
&lt;td style="text-align:center">÷ has higher precedence than +&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4 2 ×&lt;/td>
&lt;td style="text-align:right">( ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1&lt;/td>
&lt;td style="text-align:right">( ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">−&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1&lt;/td>
&lt;td style="text-align:right">− ( ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5&lt;/td>
&lt;td style="text-align:right">− ( ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">)&lt;/td>
&lt;td style="text-align:left">Pop stack to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 −&lt;/td>
&lt;td style="text-align:right">( ÷ +&lt;/td>
&lt;td style="text-align:center">Repeated until &amp;ldquo;(&amp;rdquo; found&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(same up)&lt;/td>
&lt;td style="text-align:left">Pop stack&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 −&lt;/td>
&lt;td style="text-align:right">÷ +&lt;/td>
&lt;td style="text-align:center">Discard matching parenthesis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">^&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 −&lt;/td>
&lt;td style="text-align:right">^ ÷ +&lt;/td>
&lt;td style="text-align:center">^ has higher precedence than ÷&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 − 2&lt;/td>
&lt;td style="text-align:right">^ ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">^&lt;/td>
&lt;td style="text-align:left">Push token to stack&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 − 2&lt;/td>
&lt;td style="text-align:right">^ ^ ÷ +&lt;/td>
&lt;td style="text-align:center">^ is evaluated right-to-left&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:left">Add token to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 − 2 3&lt;/td>
&lt;td style="text-align:right">^ ^ ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">end&lt;/td>
&lt;td style="text-align:left">Pop entire stack to output&lt;/td>
&lt;td style="text-align:left">3 4 2 × 1 5 − 2 3 ^ ^ ÷ +&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以看出，基本上是和“中缀表达式”原理差不多的，也是需要比较运算符的优先级，按照计算的先后顺序排序。&lt;/p>
&lt;h3 id="逆波兰表达式">逆波兰表达式&lt;/h3>
&lt;p>以下例子来源于 Wikipedia:&lt;/p>
&lt;p>例如：中缀表达式__5+((1+2)*4)−3__写作__512+4*+3−__&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">输入&lt;/th>
&lt;th style="text-align:center">操作&lt;/th>
&lt;th style="text-align:center">堆栈&lt;/th>
&lt;th style="text-align:center">注释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">入栈&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">入栈&lt;/td>
&lt;td style="text-align:center">5, 1&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">入栈&lt;/td>
&lt;td style="text-align:center">5, 1, 2&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:center">加法运算&lt;/td>
&lt;td style="text-align:center">5, 3&lt;/td>
&lt;td style="text-align:center">(1, 2)出栈；将结果（3）入栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">入栈&lt;/td>
&lt;td style="text-align:center">5, 3, 4&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*&lt;/td>
&lt;td style="text-align:center">乘法运算&lt;/td>
&lt;td style="text-align:center">5, 12&lt;/td>
&lt;td style="text-align:center">(3, 4)出栈；将结果（12）入栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:center">加法运算&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">(5, 12)出栈；将结果 (17)入栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">入栈&lt;/td>
&lt;td style="text-align:center">17, 3&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">−&lt;/td>
&lt;td style="text-align:center">减法运算&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">(17, 3)出栈；将结果（14）入栈&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>计算完成时，栈内只有一个操作数，这就是表达式的结果：14&lt;/p>
&lt;h3 id="程序">程序&lt;/h3>
&lt;p>再次回到这个笔试题目，我这里做了些改动，毕竟手动画出用‘6’组成的0-9的图形很累，也不美观，因此我在&lt;a class="link" href="https://www.asciiart.eu/" target="_blank" rel="noopener"
>AsciiArt&lt;/a>的常用问题页面找了个自动&lt;a class="link" href="http://www.network-science.de/ascii/" target="_blank" rel="noopener"
>生成AsciiArt&lt;/a>的网页，经过对比，感觉“larry3d”这个字体比较美观，因此我选择了这个来生成图案。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> interview&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Stack&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">num_graphic&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String &lt;span style="color:#a6e22e">getGraphic&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span> rel&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String zero&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; __ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;__`\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ \\/\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\ \\ \\ \\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\ \\_\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\____/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/___/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String one&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; _ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39; \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\_, \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\/_/\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\_\\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/_/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String two&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; ___ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;___`\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\_\\ /\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\/_/// /__ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; // /_\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /\\______/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/_____/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String three&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; __ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;__`\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\_\\L\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\/_/_\\_&amp;lt;_ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /\\ \\L\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\____/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/___/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String four&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; __ __ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ \\\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\ \\ \\\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\ \\\\ \\_ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\__ ,__\\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/_/\\_\\_/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/_/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String five&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; ______ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ ___\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\ \\ \\__/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\___``\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/\\ \\L\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\____/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/___/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String six&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; ____ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;___\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ \\__/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\ \\ _``\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\ \\L\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\____/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/___/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String seven&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; ________ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\_____ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\/___//&amp;#39;/&amp;#39;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39; /&amp;#39; \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39; /&amp;#39; \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /\\_/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\// \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String eight&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; __ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;_ `\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ \\L\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\/_&amp;gt; _ &amp;lt;_ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /\\ \\L\\ \\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\____/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/___/ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String nine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; __ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; /&amp;#39;_ `\\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/\\ \\L\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;\\ \\___, \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/__,/\\ \\ \n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\ \\_\\\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; \\/_/\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>rel&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> zero&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> one&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> two&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> three&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;4&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> four&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;5&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> five&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;6&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> six&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;7&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seven&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> eight&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> nine&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Unknown error...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">evaluate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String expression&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> tokens &lt;span style="color:#f92672">=&lt;/span> expression&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toCharArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>Float&lt;span style="color:#f92672">&amp;gt;&lt;/span> stackOfNum &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> stackOfOps &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> tokens&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">&amp;lt;&lt;/span> tokens&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">++]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">--;&lt;/span> &lt;span style="color:#75715e">// 回退一位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Float&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">parseFloat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>calculate&lt;span style="color:#f92672">(&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> hasPrecedence&lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">],&lt;/span> stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>calculate&lt;span style="color:#f92672">(&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>tokens&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>calculate&lt;span style="color:#f92672">(&lt;/span>stackOfOps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> stackOfNum&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">hasPrecedence&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span> op1&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> op2&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>op2 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> op2 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>op1 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> op1 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">(&lt;/span>op2 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> op2 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span> op&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> b&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>op&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">-&lt;/span> b&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">*&lt;/span> b&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UnsupportedOperationException&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Cannot divide by zero&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">/&lt;/span> b&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Scanner in&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Enter expression:&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String input&lt;span style="color:#f92672">=&lt;/span>in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// String[] parts=input.split(&amp;#34;(?=[+-/*])|(?&amp;lt;=[+-/*])&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> num_graphic ng&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> num_graphic&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> result&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>ng&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">evaluate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>input&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String str &lt;span style="color:#f92672">=&lt;/span> result&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>i&lt;span style="color:#f92672">&amp;lt;&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">();&lt;/span>i&lt;span style="color:#f92672">++){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ng&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getGraphic&lt;/span>&lt;span style="color:#f92672">(&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">charAt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ol>
&lt;li>逆波兰表达式：https://en.wikipedia.org/wiki/Reverse_Polish_notation&lt;/li>
&lt;li>调度场算法：https://en.wikipedia.org/wiki/Shunting-yard_algorithm&lt;/li>
&lt;li>&lt;a class="link" href="http://www.network-science.de/ascii/" target="_blank" rel="noopener"
>http://www.network-science.de/ascii/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.asciiart.eu/faq" target="_blank" rel="noopener"
>https://www.asciiart.eu/faq&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>数据结构知识点总结</title><link>https://ireflux.github.io/snow/post/summary-of-data-structure/</link><pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/summary-of-data-structure/</guid><description>&lt;p>最近准备面试，复习一下数据结构，顺便总结下概念，加深印象，算法什么的以后慢慢补充～&lt;/p>
&lt;h1 id="树">树&lt;/h1>
&lt;p>&lt;strong>树(Tree)&lt;strong>是(n&amp;gt;=0)个节点的有限集。当n&amp;gt;0,其余节点可分为m(m&amp;gt;0)个互不相交的有限集的集合(e.g. 有限集T1,T2&amp;hellip;)，其中每个集合又是一棵树，称为根的__子树(SubTree)&lt;/strong>。节点拥有的子树的个数称为__节点的度(Degree)&lt;/strong>。
度为0的节点称为__叶子节点(Leaf)&lt;strong>或__终端节点&lt;/strong>。不为0的称为__非终端节点__或__分支节点__。节点的子树的根称为该节点的__孩子(Child)&lt;strong>，相应的，该节点称为孩子的__双亲(Parent)&lt;/strong>。&lt;/p>
&lt;p>如果将树中节点的各子树堪称从左至右是有次序的(即不能互换)，则称该树为__有序树__，否则为__无序树__。森林(Forest)是m(m&amp;gt;0)棵互不相交的树的集合。&lt;/p>
&lt;h2 id="二叉树">二叉树&lt;/h2>
&lt;p>__二叉树(Binary Tree)__中每个节点至多只有两颗子树(即二叉树中不存在度大于2的节点)，二叉树的子树有左右之分，其次序不能任意颠倒。&lt;/p>
&lt;p>深度为k且有2^k-1个节点的二叉树称为__满二叉树__&lt;/p>
&lt;p>二叉树的性质：&lt;/p>
&lt;ol>
&lt;li>在二叉树的第i层上至多有2ⁱ⁻¹个节点(i&amp;gt;1)。&lt;/li>
&lt;li>深度为k的二叉树至多有2ᵏ⁻¹个节点(k&amp;gt;=1)。&lt;/li>
&lt;li>对任何一棵二叉树T，如果其终端节点树为n₀,度为2的节点数为n₂,则n₀=n₂+1。&lt;/li>
&lt;li>具有n个节点的完全二叉树的深度为Log₂n+1。&lt;/li>
&lt;/ol>
&lt;h3 id="avl树">AVL树&lt;/h3>
&lt;p>AVL树是一种自平衡的二叉查找树，详见: &lt;a class="link" href="https://wanmei.ml/snow/post/avl-tree-study-note/" target="_blank" rel="noopener"
>AVL树学习笔记&lt;/a>&lt;/p>
&lt;h3 id="遍历二叉树">遍历二叉树&lt;/h3>
&lt;p>&lt;strong>遍历二叉树(Traversing Binary Tree)&lt;/strong>：按照某条搜索路径巡访树中每个节点，使得每个节点均被访问一次，而且仅被访问一次。&lt;/p>
&lt;p>二叉树的遍历方法总共有六种，但是一般限定为先左后右，因此只剩下三种方式，分别是__先序遍历(DLR)__，&lt;strong>中序遍历(LDR)&lt;/strong>，&lt;strong>后序遍历(LRD)&lt;/strong>。&lt;/p>
&lt;p>具体算法：&lt;/p>
&lt;h3 id="线索二叉树">线索二叉树&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">左子树&lt;/th>
&lt;th style="text-align:center">左标志域&lt;/th>
&lt;th style="text-align:center">数据&lt;/th>
&lt;th style="text-align:center">右标志域&lt;/th>
&lt;th style="text-align:center">右子树&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">lchild&lt;/td>
&lt;td style="text-align:center">LTag&lt;/td>
&lt;td style="text-align:center">data&lt;/td>
&lt;td style="text-align:center">RTag&lt;/td>
&lt;td style="text-align:center">rchild&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>LTag包括：0 lchild域所指节点的左孩子;1 lchild域所指节点的前驱&lt;/p>
&lt;p>RTag包括：0 rchild域所指节点的右孩子;1 rchild域所指节点的后继&lt;/p>
&lt;p>这种节点结构构成的额二叉链表作为二叉树的存储结构，称为__线索链表__。其中指向节点前驱和后继的指针，叫做__线索__。加上线索的二叉树称为__线索二叉树__。&lt;/p>
&lt;h3 id="赫夫曼树">赫夫曼树&lt;/h3>
&lt;p>__赫夫曼树__又称最优二叉树，即带权路径长度最短的树。&lt;/p>
&lt;p>从树中一个节点到另一个节点之间的分支构成这两个节点之间的路径，路径上的分支数目称为__路径长度__。从树根到每个节点的路径长度之和称为__树的路径长度__。__树的带权路径长度__为树中所有叶子节点的带权路径长度之和，通常记作WPL=&lt;/p>
&lt;h3 id="赫夫曼编码">赫夫曼编码&lt;/h3>
&lt;h1 id="查找">查找&lt;/h1>
&lt;h2 id="静态查找表">静态查找表&lt;/h2>
&lt;p>为记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值称为查找算法在查找成功时的__平均查找长度__。对于有n个记录的表，查找成功的平均查找长度为：ASL=&lt;/p>
&lt;h2 id="动态查找表">动态查找表&lt;/h2>
&lt;p>二叉排序树性质：&lt;/p>
&lt;ol>
&lt;li>若它的左子树不空，则左子树上所有节点的值均小于它根节点的值&lt;/li>
&lt;li>若它的右子树不空，则右子树上所有节点的值均大于它根节点的值&lt;/li>
&lt;li>它的左右子树也分别为二叉排序树&lt;/li>
&lt;/ol>
&lt;h2 id="哈希表">哈希表&lt;/h2>
&lt;h1 id="排序方式">排序方式&lt;/h1>
&lt;p>排序方式分为__内部排序__和__外部排序__，以下排序我会一一复习一遍并加入一些看法，篇幅可能会比较长。因此我会另开文章，专门进行讨论学习。先开个坑，慢慢写。&lt;/p>
&lt;h2 id="内部排序">内部排序&lt;/h2>
&lt;ol>
&lt;li>插入排序:直接插入排序, 二分插入排序, 希尔排序&lt;/li>
&lt;li>交换排序:冒泡排序, 快速排序&lt;/li>
&lt;li>选择排序:直接选择排序, 堆排序&lt;/li>
&lt;li>归并排序&lt;/li>
&lt;li>基数排序&lt;/li>
&lt;/ol>
&lt;h3 id="插入排序">插入排序&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>直接插入排序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二分插入排序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>希尔排序&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="交换排序">交换排序&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener"
>冒泡排序&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener"
>快速排序&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="选择排序">选择排序&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>直接选择排序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆排序&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="归并排序">归并排序&lt;/h3>
&lt;h3 id="基数排序">基数排序&lt;/h3>
&lt;h2 id="外部排序">外部排序&lt;/h2>
&lt;p>外部排序于我个人而言不常用，因此以后用到在补吧。&lt;/p>
&lt;h1 id="复杂度比较">复杂度比较&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">排序算法&lt;/th>
&lt;th style="text-align:center">平均时间复杂度&lt;/th>
&lt;th style="text-align:center">最好情况&lt;/th>
&lt;th style="text-align:center">最坏情况&lt;/th>
&lt;th style="text-align:center">空间复杂度&lt;/th>
&lt;th style="text-align:center">排序方式&lt;/th>
&lt;th style="text-align:center">稳定性&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">冒泡排序&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(n)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(1)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">选择排序&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(1)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">不稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">插入排序&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(n)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(1)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">希尔排序&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log^2 n)&lt;/td>
&lt;td style="text-align:center">O(n log^2 n)&lt;/td>
&lt;td style="text-align:center">O(1)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">不稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">归并排序&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n)&lt;/td>
&lt;td style="text-align:center">Out-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">快速排序&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(log n)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">不稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">堆排序&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(n log n)&lt;/td>
&lt;td style="text-align:center">O(1)&lt;/td>
&lt;td style="text-align:center">In-Place&lt;/td>
&lt;td style="text-align:center">不稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">计数排序&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">O(k)&lt;/td>
&lt;td style="text-align:center">Out-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">桶排序&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">O(n^2)&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">Out-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">基数排序&lt;/td>
&lt;td style="text-align:center">O(n*k)&lt;/td>
&lt;td style="text-align:center">O(n*k)&lt;/td>
&lt;td style="text-align:center">O(n*k)&lt;/td>
&lt;td style="text-align:center">O(n+k)&lt;/td>
&lt;td style="text-align:center">Out-Place&lt;/td>
&lt;td style="text-align:center">稳定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Learn Spring Framework</title><link>https://ireflux.github.io/snow/post/learn-spring-framework/</link><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><guid>https://ireflux.github.io/snow/post/learn-spring-framework/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>Recently,I was learning the Spring Framework.&lt;/p>
&lt;p>At first, I learn it from Spring official website of the guide. When I completed the first few guides, I find that I didn’t even understand why. So I had to give up.&lt;/p>
&lt;p>After that, I looked for other guides to learn and saw many examples of IOC(Inversion of Control), DI(Dependency Injection), and AOP(Aspect Oriented Programming). I probably understand, but I still can&amp;rsquo;t use the Spirng framework. on the forum, Someone told me that I only need more practice. But I don&amp;rsquo;t even know it how to work, e.g. annotation.&lt;/p>
&lt;p>Obviously, I encountered resistance.&lt;/p>
&lt;p>One day, I searched &amp;ldquo;Why is learning Spring Framework so hard&amp;rdquo; on search engines, I found the answer in quora. The high-vote answer is very good and inspiring. So I decided to relearn the spring framework from the official website. Just like a ring. Three months later, I returned to the origin.&lt;/p>
&lt;p>Thanks for that article again!&lt;/p>
&lt;hr>
&lt;p>以下是可能会用到的资料：&lt;/p>
&lt;p>Spring Framework Documentation&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://docs.spring.io/spring/docs/" target="_blank" rel="noopener"
>https://docs.spring.io/spring/docs/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Spring官方建议使用Maven、Gradle之类的包管理工具，因此官网上隐藏了下载地址，不过还是可以通过链接访问的&lt;/p>
&lt;p>Spring-framework-release，截止博文发表之前，版本号为spring-framework-5.0.4.RELEASE&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener"
>https://repo.spring.io/release/org/springframework/spring/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Spring核心容器依赖于Common-logging的JAR包，下载地址如下：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://commons.apache.org/proper/commons-logging/download_logging.cgi" target="_blank" rel="noopener"
>https://commons.apache.org/proper/commons-logging/download_logging.cgi&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="原文摘录">原文摘录&lt;/h2>
&lt;p>&lt;strong>原文链接:&lt;/strong> &lt;a class="link" href="http://springtutorials.com/spring-tutorial-1/" target="_blank" rel="noopener"
>http://springtutorials.com/spring-tutorial-1/&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>A simple question for you before I begin:&lt;br>
Can you count from 1 to 20?&lt;br>
Here, Let me help you. Go ahead and read it out loud.&lt;br>
One. Two. Three. Four. Five. Six. Seven. Eight. Nine. Ten. Eleven. Twelve. Thirteen. Fourteen. Fifteen. Sixteen. Seventeen. Eighteen. Nineteen. Twenty.&lt;br>
Do you see any pattern in the numbers above? Anything that rhymes with the words or the way you count them?&lt;br>
Some of these end with ‘teen’ in them but is there anything else?&lt;br>
Unlearn everything you know about numbers and see if you can spot anything that will help you see it?&lt;br>
(Hint: There is none)&lt;br>
My daughter was 3 (she is 7 now) when she had to go through this exercise and she found it very challenging.&lt;br>
I think she was 4 when she started to count a little more…&lt;br>
Twenty One. Twenty Two. Twenty Three. Twenty Four. Twenty Five. Twenty Six. Twenty Seven. Twenty Eight. Twenty Nine. Thirty.&lt;br>
Did she see any pattern now? Of course, she did. ‘Twenty‘ seemed to show up everywhere.&lt;br>
Counting from thirty to forty was not any different now. She was over the learning curve and needed few corrections here and there.&lt;br>
She spent almost a full year learning to count from 1 to 20. But she spent only a few months going from 20 to 100.&lt;br>
Let me clarify this. Counting from 1 to 20 is the hardest thing you can do.&lt;br>
There is no pattern here.&lt;br>
You have to learn it the hard way. Get over this curve and life becomes easier.&lt;br>
Take that as a big lesson in life. Start anything and you have to go through the grind. Once you are past the initial struggle, things get easier.&lt;br>
Can you predict what I am going to say next:&lt;br>
Learning Spring Framework (or anything new) is no different from learning to count.&lt;br>
It is challenging at first but becomes easier as you progress. You will make mistakes. We all do. Have some patience.&lt;br>
As a kid, It took me a while to learn the colors of the rainbow in its correct order. And then my best friend gave me a pattern – ROYGBIV or VIBGYOR. I still remember it decades later.&lt;br>
As a Spring Developer, you want to learn why things work the way they work. The syntax, the annotations, the examples will become easier to understand that way. A pattern will emerge sooner or later from the initial randomness.&lt;br>
It is worth the effort to go through this randomness. A good foundation is the core of any learning. Find your own randomness.&lt;/p>
&lt;/blockquote>
&lt;h3 id="building-a-restful-web-service">Building a RESTful Web Service&lt;/h3>
&lt;p>源文档：https://spring.io/guides/gs/rest-service/&lt;/p>
&lt;p>部分代码摘录如下：&lt;/p>
&lt;h4 id="srcmainjavahellogreetingjava">src/main/java/hello/Greeting.java&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> hello&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String content&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Greeting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">long&lt;/span> id&lt;span style="color:#f92672">,&lt;/span> String content&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#f92672">=&lt;/span> content&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">getId&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getContent&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> content&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="srcmainjavahellogreetingcontrollerjava">src/main/java/hello/GreetingController.java&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> hello&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.concurrent.atomic.AtomicLong&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RequestMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RequestParam&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RestController&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreetingController&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String template &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, %s!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> AtomicLong counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AtomicLong&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/greeting&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Greeting &lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@RequestParam&lt;/span>&lt;span style="color:#f92672">(&lt;/span>value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> defaultValue&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Greeting&lt;span style="color:#f92672">(&lt;/span>counter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">incrementAndGet&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>template&lt;span style="color:#f92672">,&lt;/span> name&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;code>@RequestMapping&lt;/code>注解确保对/greeting的HTTP请求映射到greeting()方法中，默认映射所有HTTP操作，所以即使不指定GET，PUT还是POST也没关系.若想指定映射方式可使用&lt;code>@RequestMapping(method=GET)&lt;/code>的方式.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@RequestParam&lt;/code>将查询字符串&lt;code>name&lt;/code>的值绑定到&lt;code>greeting()&lt;/code>方法的&lt;code>name&lt;/code>参数中.查询字符参数为可选,默认为&lt;code>required=true&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传统的MVC控制器和上面的RESTful Web服务控制器之间的一个主要区别在于HTTP响应主体的创建方式.这个RESTful Web服务控制器只需填充并返回一个Greeting对象,而不是依赖视图技术将问候数据的服务器端呈现呈现给HTML.对象数据将作为JSON直接写入HTTP响应.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@RestController&lt;/code>为Spring 4的新注解,它将类标记为控制器,其中每个方法都返回一个域对象而不是视图.它是&lt;code>@Controller&lt;/code>和&lt;code>@ResponseBody&lt;/code>的缩写.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="srcmainjavahelloapplicationjava">src/main/java/hello/Application.java&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> hello&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.boot.SpringApplication&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.boot.autoconfigure.SpringBootApplication&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Application&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpringApplication&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Application&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> args&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@SpringBootApplication&lt;/code>是一个方便的注释，它增加了以下所有内容：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@Configuration&lt;/code>将类标记为应用程序上下文的bean定义的来源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@EnableAutoConfiguration&lt;/code>通知Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通常你会为Spring MVC应用程序添加&lt;code>@EnableWebMvc&lt;/code>，但Spring Boot在类路径中看到spring-webmvc时会自动添加。 这将该应用程序标记为Web应用程序并激活关键行为，例如设置DispatcherServlet。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@ComponentScan&lt;/code>告诉Spring在hello包中查找其他组件，配置和服务，以便找到控制器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="测试">测试&lt;/h3>
&lt;p>打包：mvn package&lt;/p>
&lt;p>测试运行:java -jar gs-rest-service-0.1.0.jar&lt;/p>
&lt;p>访问：http://localhost:8080/greeting&lt;/p>
&lt;p>或者加入参数：http://localhost:8080/greeting?name=User&lt;/p></description></item></channel></rss>