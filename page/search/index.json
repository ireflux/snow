[{"content":"背景 从前年开始，我就特别希望找一个体积小、方便携带、噪音小的单板计算机，类似于树莓派那种，打算平时拿来跑跑脚本什么的。但发现树莓派的价格比起过去简直翻了好几倍，于是果断放弃。当然按照习惯我也在网络上搜寻了一些其他派，但也不知道好不好，就这样拖了好长时间。\n前一段时间过年回家，发现家里有个旧手机红米4a，Android 6.0 还可以，但是是个移动合约机，玩了一下发现除了电池不太行以外其他各方面都很好。刚好想起来以前在酷安上看到有人用 Termux 装过 Ubantu，结合我之前的需求，可以说刚好满足，而且旧手机废物利用，拿来跑脚本再合适不过了\n安装(踩坑)过程 于是我重新线刷了一遍官方系统后，准备安装 Termux，发现 Android 5 和 6 在 2020 年就不再支持了，一想到只能用旧阪本，虽然很不情愿，但也没有办法。不过后来我又在 WIKI 里发现了一篇新的公告：Termux on android 5 or 6，开发者又打算在 termux-app 0.119 版本中重新加回对 android 5 和 6 的支持，这么重要的信息居然不写在最显眼的 README 里面\u0026hellip;虽然目前还没有正式 release，但是可以去 Actions 中找打好的安装包来安装，至此总算是可以舒舒服服的安装了。\n作为 Arch 的忠实教徒，发行版当然是选择 Arch Linux 啦！在 GitHub 搜寻一番，找到了一个专门在 Termux 中一键安装的脚本 TermuxArch，总之到这里还算顺利。但接下来的安装遇到了一些错误，是关于 PRoot 的，提示没有 --sysvipc 的选项，可能是我的 PRoot 的版本的缘故，但用 Termux 自带的源尝试更新了一下，发现已经是最新的版本了。Hmmm\u0026hellip;只好再次去 Termux 官网找答案，答案没找到，却在 Termux Wiki 找到了一篇关于 PRoot 的文章： PRoot，里面详细解释了 PRoot 和 Chroot 的区别，简单来说 PRoot 是通过 ptrace() 来劫持系统调用参数和返回值来伪造可见的文件系统布局或用户/组的 ID，会引起额外的开销，里面还提到了一个 APP： Linux Deploy。考虑到我的手机性能，开销这种东西还是能少一点就少一点，于是果断选择换方案。\n接下来就是获取 root 权限的过程了：从线刷包里提取 boot.img -\u0026gt; magisk 修补 boot.img -\u0026gt; fastboot flash boot boot.img\n装完 Linux Deploy 后，本以为接下来会顺利一点，但没想到仍然遇到了一些坑。安装选的 Arch，但每次装到 gcc-debug 这个包这里就会 fail，然后就没有然后了，无论是官方的源还是国内镜像源，都是同样的错误。考虑到这个软件停更了，最新的版本还停留在 2020 年 2 月份，两年过去了，有一些 bug 也说不定。之后各处搜寻，最终还是找到了解决方案。\nLinux Deploy 直接安装报错 log:\n[11:40:17] \u0026gt;\u0026gt;\u0026gt; deploy [11:40:17] :: Installing bootstrap/rootfs ... [11:40:17] Checking installation path ... done [11:40:17] Making new disk image (2047 MB) ... done [11:40:17] Making file system (ext4) ... done [11:40:17] Checking file system ... done [11:40:17] Mounting the container: [11:40:17] / ... done [11:40:17] /proc ... done [11:40:17] /sys ... done [11:40:17] /dev ... done [11:40:17] /dev/shm ... skip [11:40:17] /dev/pts ... done [11:40:17] /dev/tty ... done [11:40:17] /proc/sys/fs/binfmt_misc ... done [11:40:17] :: Installing bootstrap/archlinux ... [11:40:17] Preparing for deployment ... done [11:40:20] Retrieving packages list ... done [11:40:20] Retrieving packages: [11:40:22] acl-2.3.1-2 ... done [11:40:25] acl-debug-2.3.1-2 ... done [11:40:28] amd-ucode-20221214.f3c283e-1 ... done [11:40:31] archlinux-keyring-20221220-1 ... done [11:40:33] archlinuxarm-keyring-20140119-2 ... done [11:40:35] argon2-20190702-4 ... done [11:40:38] attr-2.5.1-2 ... done [11:40:40] attr-debug-2.5.1-2 ... done [11:40:42] audit-3.0.8-1 ... done [11:40:45] audit-debug-3.0.8-1 ... done [11:40:48] autoconf-2.71-1 ... done [11:40:51] automake-1.16.5-1 ... done [11:40:52] b43-fwcutter-019-3 ... done [11:40:54] base-3-1 ... done [11:40:58] bash-5.1.016-1 ... done [11:41:05] binutils-2.38-5.1 ... done [11:41:27] binutils-debug-2.38-5.1 ... done [11:41:30] bison-3.8.2-4 ... done [11:41:33] brotli-1.0.9-9 ... done [11:41:37] brotli-debug-1.0.9-9 ... done [11:41:42] brotli-testdata-1.0.9-9 ... done [11:41:45] btrfs-progs-6.1-2 ... done [11:41:49] btrfs-progs-debug-6.1-2 ... done [11:41:51] bzip2-1.0.8-5 ... done [11:41:53] bzip2-debug-1.0.8-5 ... done [11:41:55] ca-certificates-20220905-1 ... done [11:41:57] ca-certificates-cacert-20140824-4 ... done [11:42:00] ca-certificates-mozilla-3.86-1 ... done [11:42:02] ca-certificates-utils-20220905-1 ... done [11:42:07] coreutils-9.1-3 ... done [11:42:09] cracklib-2.9.8-1 ... done [11:42:12] cronie-1.6.1-1 ... done [11:42:14] cronie-debug-1.6.1-1 ... done [11:42:16] cryptsetup-2.6.0-1 ... done [11:42:19] cryptsetup-debug-2.6.0-1 ... done [11:42:22] curl-7.87.0-1 ... done [11:42:26] curl-debug-7.87.0-1 ... done [11:42:28] dash-0.5.11.5-1 ... done [11:52:10] dash-debug-0.5.11.5-1 ... done [11:52:10] db-6.2.32-1 ... done [11:52:10] db5.3-5.3.28-2 ... done [11:52:10] dbus-1.14.4-1 ... done [11:52:10] dbus-debug-1.14.4-1 ... done [11:52:10] dbus-docs-1.14.4-1 ... done [11:52:10] debugedit-5.0-4 ... done [11:52:10] debuginfod-0.188-1 ... done [11:52:10] device-mapper-2.03.18-1 ... done [11:52:10] dhcpcd-9.4.1-1 ... done [11:52:10] dialog-1:1.3_20220728-1 ... done [11:52:10] diffutils-3.8-1 ... done [11:52:10] ding-libs-0.6.2-1 ... done [11:52:10] dmraid-1.0.0.rc16.3-14 ... done [11:52:10] dnssec-anchors-20190629-3 ... done [11:52:10] dosfstools-4.2-2 ... done [11:52:10] e2fsprogs-1.46.5-4 ... done [11:52:10] e2fsprogs-debug-1.46.5-4 ... done [11:52:10] ed-1.18-1 ... done [11:52:10] efivar-38-2 ... done [11:52:10] elfutils-0.188-1 ... done [11:52:10] elfutils-debug-0.188-1 ... done [11:52:10] expat-2.5.0-1 ... done [11:52:10] expat-debug-2.5.0-1 ... done [11:52:10] fakeroot-1.30.1-1 ... done [11:52:10] file-5.44-1 ... done [11:52:10] file-debug-5.44-1 ... done [11:52:10] filesystem-2022.10.18-1 ... done [11:52:10] findutils-4.9.0-1 ... done [11:52:10] flex-2.6.4-3 ... done [11:52:10] fuse2fs-1.46.5-4 ... done [11:52:10] gawk-5.2.1-1 ... done [11:52:10] gawk-debug-5.2.1-1 ... done [11:52:10] gc-8.2.2-1 ... done [11:52:10] gcc-12.1.0-2.1 ... done [11:52:10] gcc-debug-12.1.0-2.1 ... fail [11:52:10] \u0026lt;\u0026lt;\u0026lt; deploy 首先要先把 Archlinuxarm 系统镜像下载下来，这个随便找个国内的镜像就好，比如 USTC，下载我是放到了 Download 目录下。 开始 Linux Deploy 相关设置，打开 Linux Deploy，发行版选择 rootfs.tar，源地址写 /storage/emulated/0/Download/[下载的镜像名称]，安装类型选择 目录，安装路径要写 /data/[后面随意命名]，其他选项就随意了，记得勾上 启用SSH 就好。 点右上角菜单选择安装，日志上无明显报错即可。 SSH 进入装好的 Arch，默认的 DNS 有问题，删掉 resolv.conf 重建。 完结。\n参考资料 12 个可替代树莓派的单板机: https://linux.cn/article-10823-1.html End of android-5/6 support on 2020-01-01: https://www.reddit.com/r/termux/comments/dnzdbs/end_of_android56_support_on_20200101/ Termux on android 5 or 6: https://github.com/termux/termux-app/wiki/Termux-on-android-5-or-6 TermuxArch: https://github.com/TermuxArch/TermuxArch PRoot: https://wiki.termux.com/wiki/PRoot Linux Deploy: https://github.com/meefik/linuxdeploy 青龙面板: https://github.com/whyour/qinglong ","date":"2023-02-02T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/reuse-of-old-android-phone/","title":"旧 Android 手机的再度营业"},{"content":"最近看到了 Google 推出了他们操作系统「ChromeOS Flex」，声称适用于任何场合。我记得之前就看到过 Google 新操作系统的消息，好像之前还只是在测试阶段，但也允许下载体验。由于是非正式版本就没有尝试，不过最近终于看到他们释出正式版本，而且可以直接装到 USB 上启动，那得好好体验一下。\n安装 按照官方的教程先准备一个非闪迪的 U 盘（因为闪地的 USB 会有一些已知的问题），然后去 Chrome web store 安装 Chromebook Recovery Utility 这个扩展（并不支持 Linux 系统)，插上 U 盘后，打开新安装好的扩展，制造商选择「Google Chrome OS Flex」，产品选择「Chrome OS Flex」，点继续之后，接下来它就会自动下载并写入到你的 U 盘（话说我还是第一次见到用浏览器扩展制作启动盘的\u0026hellip;），期间会清空 U 盘上的所有信息。这个过程完成之后，你就拥有一个 Chrome OS Flex 的启动盘了，剩下的也无需赘述。\n体验 说说使用体验，系统启动时画面上中央会出现 ChromeOS Flex 的字样，感觉还是挺不错的。系统刚进去会有一个使用向导，一步步设置：选择语言，设置键盘布局，连接网络，登录账号，整体 UI 和交互就是原生 Android 的既视感。进去之后自带了 Google 全家桶，其他的不知道都能安装什么第三方应用，也没有看到有类似应用商店之类的东西。设置里有提供 Linux 相关工具的入口，但需要额外安装，迫于 U 盘空间不大，这部分就没体验，打开 terminal 也提示需要额外安装那个 Linux 工具集，但自带了 SSH 连接的图形化界面。打开设置里面查看系统设置信息又给人一种整个操作系统就是一个 Chrome 浏览器的感觉\u0026hellip;\n总之体验下来个人感觉作为一个个人电脑的操作系统还是不太够，除了一个浏览器，其他的没什么可玩儿的。如果作为其他终端的操作系统，做一些定制化或许还可以，比如车载系统，银行 ATM，KTV 的点歌台之类的\n参考资料 Chrome OS Flex installation guide Get ready to flex this summer: ChromeOS Flex is now ready to scale broadly to PCs and Macs ","date":"2022-07-20T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-first-experience-of-chromeos-flex/","title":"ChromeOS Flex 初体验"},{"content":"EasyConnect 虽然也有 Linux 版本，但在网上逛了一圈，好像会有一些坑，而且需要 root 权限执行一些操作，对于一向没啥节操的国产软件还是果断放弃物理机直接装的方案。但我还想在我的 Arch 上连内网，本着某些国产软件能不装到物理机就不装到物理机的原则，就想通过连着 EasyConnect 的虚拟机来上内网，又在网络上搜寻了一圈，没想到还真的找到一些解决方案，果然大家的痛点都是一样的。\n虚拟机设置 首先在虚拟机上开启两个网卡，我的是 VirtualBox，就以它为例，依次进入 设置-\u0026gt;网络，勾选两个网卡，启用网络连接，网卡一用于连接外部网络，连接方式 NAT 或桥接都可。网卡二用于和 Linux 物理机交换数据，连接方式选择 “仅主机（Host-Only）网络”。顺便一提，如果选择完 “仅主机（Host-Only）” 后，界面名称选项为空的话，就需要去菜单 管理-\u0026gt;主机网络管理器 中创建一个，然后再回到原来的地方，界面名称的选项就是刚刚在网络管理器中创建的。\n打开 Windows 虚拟机后，依次进入 控制面板-\u0026gt;网络和共享中心-\u0026gt;更改适配器设置，里面会存在 “Sangfor SSL VPN CS Support System VNIC” 的本地连接和两个其他本地连接，其中一个是 “NAT/桥接” 的网卡一，另一个是 “仅主机（Host-Only）” 的网卡二，需要自己分辨一下。在 “Sangfor SSL VPN CS Support System VNIC” 的本地连接上依次 右键-\u0026gt;属性-\u0026gt;共享，勾选 “允许其他网络用户通过此计算机 Internet 连接来连接” 选项，家庭网络连接选择 “仅主机（Host-Only）” 的本地连接，确定即可。查看一下 “仅主机（Host-Only）” 的 IP 地址，接下来需要在宿主机上设置路由，将要内网地址转发到 “仅主机（Host-Only）” 的 IP 地址上。\n宿主机设置 以我的为例，我的 “仅主机（Host-Only）” 的本地连接 IP 地址为 192.168.56.3，假设我要访问的公司内网 IP 在 172.16.x.x 的网段，就可以将 172.16 开头的内网地址全部转发到 “仅主机（Host-Only）” 的 IP 地址上，即在宿主机执行：\n$ sudo route add -net 172.16.0.0/16 gw 192.168.56.3 命令执行完后可以通过 route 查看一下：\n$ route Destination Gateway Genmask Flags Metric Ref Use Iface default _gateway 0.0.0.0 UG 600 0 0 wlp3s0 172.16.0.0 192.168.56.3 255.255.0.0 UG 0 0 0 vboxnet0 192.168.31.0 0.0.0.0 255.255.255.0 U 600 0 0 wlp3s0 192.168.56.0 0.0.0.0 255.255.255.0 U 0 0 0 vboxnet0 至此就可以在宿主机上愉快的上内网了。\n刚刚添加的路由转发规则是临时的，宿主机重启后，就会重置。也可以在用完后手动删除，即在终端执行：\n$ sudo route del -net 172.16.0.0/16 gw 192.168.56.3 后记 这么做虽然繁琐一点，但可以使得我的 Arch 连上内网的同时又避免了直接在物理机上装软件，还是感觉极度舒适。\n参考资料 Chapter 6. Virtual Networking: https://www.virtualbox.org/manual/ch06.html ","date":"2022-01-19T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/route-forward-connect-easyconnect/","title":"Linux 通过虚拟机路由转发连接 EasyConnect"},{"content":"本文翻译自Real-world Problems for Phys25, Summer 2006系列文章第五篇A Solution to the Real-World Problem: Contact Lenses\n为何隐形眼镜比普通眼镜薄得多，但在矫正视力方面却同样有效？\n提示：将球面透镜的焦距与透镜的折射率和前后表面的曲率半径联系起来的方程称为透镜制造方程：1/f = (n - no)(1/r1 - 1/r2), 其中 no = 1.00 代表空气。\n收集信息 隐形眼镜直接戴在眼睛上，角膜半径约为 0.8 厘米（参考文献 3），折射率为 1.42 至 1.52（参考文献 3），厚度约为 0.2 毫米。\n普通眼镜通常戴在距离眼睛 2 厘米处，折射率为 1.5 到 1.7（参考文献 2），曲率半径约 10 厘米（通过检查几种眼镜并与类似曲率的球进行比较而发现），厚度为 2 - 5 毫米（比隐形眼镜厚约 10 倍）。\n组织信息 从镜片制造方程可以看出，对于给定的屈光力 (1/f)，镜片的厚度取决于镜片材料的折射率（n 越大，屈光力越大）以及两者之间的相对差异镜片前后表面的曲率半径（半径差异越大，镜片越厚）。镜片的厚度还取决于所用材料的类型以及它必须具有多大的刚性才能避免破裂或撕裂。\n分析 由于以下原因，隐形眼镜可以做得比普通眼镜更薄：\n由于隐形眼镜直接戴在眼球上，因此隐形眼镜矫正视力所需的屈光力略低于普通眼镜。例如，假设一个人有远视，近点为 57 厘米（如示例 27-3 所示）。距离眼睛 2.0 厘米的普通眼镜所需的屈光力为 2.53 D (f = 39.5 厘米)。但是，如活动示例 27-4 中所述，同一个人将需要屈光力仅为 2.25 D (f = 44.5 厘米) 的隐形眼镜。虽然这个约 10% 的差异比较显著，但对于视力较好的人来说，相对差异要小很多，但这种影响只是隐形眼镜和普通眼镜之间厚度差异的一部分。 隐形眼镜可以由具有更高折射率的材料制成。虽然这可能是真的，但是大多数现代眼镜都是由轻质塑料材料制成的，折射率 n = 1.5 至 1.7，而隐形眼镜的指数通常为 1.4 至 1.5（参考文献 2\u0026amp;3），因此这个似乎无法作为解释。 隐形眼镜的平均曲率半径约为普通眼镜的 1/10。为了检查这种平均半径差异的影响，假设我们比较了具有相同折射率 (n = 1.5) 和屈光力 (2.0 D) 的普通眼镜和隐形眼镜。根据透镜制造方程，并假设空气作为周围介质，我们可以求解一个曲率半径，给定另一个：1/r2 = 1/r1 - 1/[f(n-1)]。因此，对于隐形眼镜 (r1 = 1.00 厘米)：r2 = 1.04 厘米，而对于普通眼镜 (r1 = 10.0 厘米)：r2 = 16.7 厘米。这意味着使用类似折射率的材料，隐形眼镜的半径仅需要 4% 的差异，即可产生与半径差异 50% 的普通眼镜相同的屈光力！显然，这是一个重要因素，可以解释大多数隐形眼镜和普通眼镜之间的厚度差异。但是请注意，这种效果对于隐形眼镜来说并不那么明显，因为隐形眼镜的后表面接触角膜，而角膜的折射率几乎与隐形眼镜相同，因此基本上所有的折射都必须发生在隐形眼镜的前表面。 隐形眼镜不需要像普通眼镜那样坚硬，因此可以做得更薄。虽然这一点很显然，但它却是隐形眼镜和普通眼镜之间厚度差异最重要的原因。 学习 有趣的是，镜片的厚度更多地取决于平均曲率半径，而不是它相对于眼睛的位置。隐形眼镜所需的前后半径差异相对较小，这意味着这些镜片的制造精度必须比眼镜高得多。这是精密工程的又一个奇迹。\n参考资料 http://hyperphysics.phy-astr.gsu.edu/hbase/geoopt/lenmak.html http://www.healthatoz.com/healthatoz/Atoz/ency/eye_glasses_and_contact_lenses.jsp http://www.ophthalmic.hyperguides.com/default.asp?section=/tutorials/clinical/contact_lenses/tutorial.asp http://research.opt.indiana.edu/library/waveGuidedLens/waveGuidedLens.html http://www.findarticles.com/p/articles/mi_g2601/is_0005/ai_2601000518 http://www.eyeglasshouse.com/contactcosmetic.htm http://cvu.strath.ac.uk/courseware/msc/jbaggot/lenses/lenses.html ","date":"2021-08-19T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/rwp-contact-lenses/","title":"「译文」| 隐形眼镜"},{"content":"本文翻译自Real-world Problems for Phys25, Summer 2006系列文章第四篇A Solution to the RWP for Exam 1 - Stealing Power。\n据报道，一名农民通过策略性地将一大圈电线放在跨越其田地的高压输电线路下方，从而偷走了电力。几年以来，这个农民将免费获取的电力用于他的农场操作设备，直到最终被电力公司发现。最终，尽管输电线路没有建立物理连接，但农民仍被判窃电罪名成立。使用此信息和您的物理学知识回答以下问题：\n在没有检查农民财产的情况下，电力公司是怎么发现电力被偷了的? 原则上，电力公司可以计算输送的电力和购买的电力之间的差额。其中存在的无法解释的差异（除了通过沿传输线的电阻加热造成的功率损失之外）可能是有人偷取电力的结果。实际上，在这种情况下单个用户窃取的电量很可能太小而无法检测到。\n农民利用什么原理从输电线路偷电？ 农民使用法拉第感应定律在靠近高压输电线路的线圈中感应出电压和电流。这种做法是有可能的，因为通过传输线的交流电改变了它周围的磁场，如果感应线圈的位置使磁场线穿过它的区域，那么就会感应出电动势，交流电就会流过线圈。\n农民必须如何放置线圈才能最有效地实现他的目标？ 线圈应尽可能靠近传输线放置，因为磁场与到传输线的距离成反比，并且线圈应垂直放置在与传输线对齐的垂直平面上，以最大限度地提高来自传输线的磁通量环绕传输线的磁场线。\n假设最低传输线距离地面 10 米，并承载 60 Hz 的交流电流，最大 150 A，电压为 230 kV。如果线圈是边长为 5 米的正方形形状并接触地面，则要产生 120 V 的标准电压大约需要多少匝线圈？ 线圈中感应的最大电动势取决于磁通量的变化：emf（电动势） = Nd(phi)/dt = NAdB/dt。\n对于这个问题，磁通量会发生变化，因为磁场强度因交流电而变化，交流电在每个方向上达到峰值两次，或每 1/120 秒一次。这意味着磁场每个周期会从最大值变为零四次，因此 dt = 1/240 秒 = 4.2 毫秒。传输线周围的最大磁场可以根据通过导线的最大电流估算，使用长直导线的公式：B(wire) = uo*I/(2pi*r)。由于方形感应线圈从传输线延伸出 5 到 10 米 的距离，因此线圈远端的磁场会较弱，最近端的磁场会较强，但使用 7.5 米的平均距离可得出特定电流的平均磁通量。因此，距传输线 7.5 米处的最大磁场为 B = (4pi*10^-7 T*m/A)(150 A)/(2pi)/(7.5 m) = 4.0 uT，其中与参考文献 2 中指示的 230 kV 线路附近 6 uT 的平均磁场一致。\n产生 120 V 电压（或 170 V 峰值电压）所需的匝数为：N = (170 V)(4.2 毫秒)/(25 米 ^ 2)/(4.0 uT) = 7140 圈\n为什么线圈中的电压会随着一天中的时间而变化？你预计它什么时候最大和最小？ 线圈中感应出的电压取决于传输线产生的磁场强度，磁场强度取决于通过线路的电流量，而这取决于用户对来自这条线路的电力（负载）的需求。我们应该预计这种电力需求在下午和晚上时间最大，而在每天的清晨时间最小。峰值电力需求的这种每日变化可以在参考文献 2 的图表中看到。\n线圈中电流的频率是多少？传输线中的电压与线圈之间的相位角是多少？ 由于线圈中感应的电流是由传输线中电流的变化引起的，因此它们应该具有相同的 60 Hz 频率。然而，这些电流（或相应的电压）之间的相位角将是 90 度，因为当传输线中的电流变化最大时线圈中的感应电流达到最大值，这发生在一个周期的 1/4 或 360/4 = 90 度在传输线中的电流峰值之前和之后。\n如果线圈和与其相连的所有设备的总阻抗为 200 欧姆，那么消耗能量的最大速率是多少？ 能量消耗的最大速率（功率）为：Pmax = Irms*Vrms = (Vrms)^2/Z = (120 V)^2/(200 ohms) = 72 W\n可以通过包含适当的power factor（功率因数）= R/Z 来更准确地估计平均功率，这可以通过计算线圈的电感和确定感抗来确定。根据参考文献 3 得知，该线圈的电感约为 1600 H（这是一个非常大的电感）。感抗为 X(L) = 2(pi)(60 Hz)(1600 H) = 603000 ohms！这远大于规定的 200 欧姆阻抗，因此功率因数似乎接近于零！\n假设成本为 0.10 美元/kW-h，农民在一年内窃取的能源价值大约是多少？ 如果我们假设农民有一半的时间使用设备（一天的平均功耗为 36 W），那么一年的总成本将是：cost（成本）= (36 W)(24 小时/天)(365 天/年)($0.10/kW-h) = $31.54/年。即使在最大功率为 72 W 的情况下，被盗能源的价值也仅为 63 美元/年。这似乎不值得付出努力、风险和成本（见下文）。\n估计制作线圈的成本，假设农民使用 12 号铜线，成本为 0.15 美元/英尺。评估农民设计的成本效益并计算其投资的大致回收时间。 需要 7140 圈电线，每圈长度为 20 米，农民将需要 143 公里的电线！以 0.15 美元/英尺 = 0.50 美元/米计算，这条线将花费 71400 美元！这意味着即使在最大能源消耗率下，投资回收时间也至少为 1000 年！\n你会给农民什么建议来最大限度地提高他的设计效率？ 为了最大限度地提高线圈中感应的电动势，同时使用最少的电线以节省成本，农民应将线圈尽可能靠近传输线，并使用尽可能大面积的线圈（因为将线圈的面积增加一倍，方形线圈使感应电动势增加四倍，而成本仅增加一倍）。在线圈内放置铁会提高这个变压器的效率，但效果会相当小，可能不值得付出努力。\n从这个问题中还可以学到什么其他东西？ 从上面的计算来看，这种偷电方式似乎是非常低效和不切实际的。我严重怀疑是否有农民真的这样做过（也许这是一个适合《流言终结者》这样的节目去调查的神话！）。这种法拉第定律的应用，本质上是一种效率极低的电力变压器。法拉第定律还有许多其他应用遍布我们的现代生活。这只是一个不建议的。\n参考文献 http://sci-phys-plasma.caeds.eng.uml.edu/1999/01-99-011.htm http://infoventures.com/private/federal/q\u0026a/qaenvn2a.html http://www.technick.net/public/code/cp_dpage.php?aiocp_dp=util_inductance_rectangle ","date":"2021-07-28T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/rwp-stealing-power/","title":"「译文」| 偷电问题"},{"content":"本文翻译自Real-world Problems for Phys25, Summer 2006系列文章第三篇A solution to RWP2 - MRI Health and Safety\n关于磁共振系统所产生的强静态磁场的主要安全问题是铁磁体可能会以比其重量大得多的磁力吸引，如果有人处在被吸引的磁体飞行的路线中，有可能会导致有人受伤或死亡。铁磁体（如钢纽扣）上的磁性引力大小取决于物体所在位置的磁场强度和发散度以及物体的大小。如果磁场是均匀的（例如在磁共振螺线管的中心），那么物体上就没有合力，因为每个感应磁极上的磁力是相等且相反的。然而，在螺线管的边缘附近，磁场线会明显发散（散开），因此，最接近磁体的物体的一端被一个力所吸引，该力明显大于作用在远离螺线管的感应相反极上的排斥力。课堂上学过的亥姆霍兹线圈对绳子上悬挂的回形针证明了这种效果。\n虽然我们没有方程式可用来确定铁磁性物体上的磁力，但我们可以利用我们的日常经验和按比例推理来估算钢制纽扣上受的力。从课堂上的回形针案例中可以看出，回形针靠近一个线圈的边缘，当弦线与垂直线成大约成45度夹角时，线圈对回形针的吸引力大约等于其自身的重力。我们从e/m实验室得知流过线圈的电流约为2A，它会产生约50G的磁场，这是地球磁场的约100倍。由于来自磁共振系统的磁场约为1.5T或15kG，因此靠近开口的按钮所受的磁力大约是其重量的300倍。假设按钮的质量约为5克(相当于一枚镍币)，那么这就意味着它在一个处于运行状态的磁共振系统附近的磁力约为15牛或3磅。虽然这看起来可能不是很大的力，但是想象一下，对于一个更大的物体，比如一个重10磅的氧气罐，这个力会大多少。这时磁铁的吸引力可以达到10000磅，足以杀死一个人——就像「参考文献1」中的例子一样\n另一个与磁共振成像磁场相关的主要问题是金属物体（不仅仅是铁磁材料）中会感应出大电流，这些电流会使金属产生很大的热量。例如，如果患者在磁共振成像扫描期间佩戴金项链，不断变化的磁场（约 50 T/m/s）可能会在项链中感应出大约为：电动势(emf)= d(Phi)/dt =面积(area)*回转(slew)~(0.02 m^2)(50 T/s) = 1 V。虽然这个感应电动势可能看起来不大，但重要的是要知道导体的电阻非常小（约0.001 欧姆 - 请参见下面的示例计算），在这种情况下，感应电流将为 1000A，其消耗的功率为电阻加热为：P = IV = 1000 W。这种电能类似于烤面包机，很容易导致像「参考文献 2」中那样严重的皮肤灼伤！如果磁通量发生变化（由于磁场或导体方向的变化），也可能在靠近磁铁的医疗助理佩戴的导体中感应出潜在的有害电流。由于螺线管外部的磁场远小于内部的磁场，因此烧伤的风险显著降低，但这仍可能是一个问题。\n金项链的近似电阻：\n金的电阻率：r = 2.2e-8 ohm-m，项链长度：L = 18 英寸(in) = 45 厘米(cm)，横截面积：A = pi*(0.002 m)^2 = 1.2e-5 m^2，因此电阻为：R = rL/A = 0.0008 欧姆\n网络上其他（物理很差）人的见解：\n作为此问题的「参考资料3」列出的网站中有一张图表，其中包含物体上的磁体吸引力的方程式：F = m/d^2，但是这个方程肯定是错误的，因为右边的单位不是力的单位。而且该方程也不包括磁场强度及其散度，这两者都是计算吸引力所必需的。磁体吸引力还更多地取决于物体的大小和磁化率，而不是它的质量。这个网站还有一个关于环绕磁体的5g条纹场的图表，但是显示的磁场线与偶极子的磁场线不一致，偶极子的磁场在两极附近比中心更强。\n由于磁共振系统的强磁场对健康影响的检查引发了有关当今广泛销售的磁疗法功效的问题。许多人声称放置在皮肤附近的磁铁可以刺激体内循环并缓解疼痛和疼痛，但是科学研究还不能证实这些说法或解释这种过程是如何发生的。磁疗供应商的许多说法不符合物理定律；然而，有研究证实了当患者相信某种疗法的疗效时，可能会产生安慰剂效应，即使没有科学理由证明这种疗法具有治愈效果。（参考文献4）\n参考文献 http://www.fda.gov/cdrh/safety/mrisafety.html http://www.massgeneralimaging.org/newsletter http://www.erads.com/mrsafety.htm http://skepdic.com/magnetic.html ","date":"2021-05-28T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/rwp-mri-health-and-safety/","title":"「译文」| 磁共振成像对健康与安全方面的挑战"},{"content":"本文翻译自Real-world Problems for Phys25, Summer 2006系列文章第二篇A Solution to RWP1 - Gel Electrophoresis\n收集信息 从问题的描述中可以得知，DNA片段带负电，并且电荷量与片段的长度成正比，但是我们不确定每个碱基对的电荷量。每个碱基对可能的最小电荷为：q=-2e=-2(1.6e-19C)，平均碱基对的分子“重量” = 635 daltons = 635(1.67e-27kg)=1.06e-24kg，可分析的片段范围为 200bp 至 50kb，对应于：m=2.1e-22kg 至 5.3e-20kg。\n注意：该技术可分析的最大DNA片段只是单倍体细胞核DNA的一小部分：(5e4)(635)/1.9e12=1/60000\n根据DNA碎片移动所需的时间，可以肯定它们不是在加速，而是在以1英尺/小时的速度移动。尽管没有明确说明，但所施加的电场必须是均匀的，由差值为50至150v的两个平行线性电极产生。假设凝胶在盒子的长度范围内流动，则电场强度必须大约为：E=(100V)/(20cm)=5V/cm=500V/m\n组织信息 这个问题主要是一个均匀电场的应用。与以往教科书问题不同的重要方面是，凝胶对带负电荷的DNA片段提供了一种与静电力相反的阻力。\n分析 作用在DNA片段上的合力必须为零，否则它会加速，并在不到30分钟内移动~20厘米。\n验证：假设每个碱基对的最小电荷为-2e，则长度为 1000bp 的典型DNA片段上的力为 F=qE=-2(1.6e-19 C)(500 N/C)=-1.6e-16N，如果没有相反的力，这将导致加速度：a=F/m=(1.6e-16N)/(1000*1.06e-24kg)=1.5e5m/s^2=15000g！！！如果真是这样，那么DNA片段将在瞬间穿过凝胶盒的长度！\n从Physlet模拟中可以清楚地看出，较小的DNA片段确实比较大的分子移动得更快，移动得更远，尽管事实上较大的分子应该具有更大的电力，因为电荷与碱基对的数量成比例。显然，这些分子所受的阻力很大程度上取决于它们的大小，就像物体在空气中下落一样，在决定终极速度方面，密度比大小更重要。\nPhyslet模拟并未显示出较大的DNA片段在较高的电场中按比例迁移得更快，而是随着施加电压的增加，在条带的位置只是向右不断地移动。如果这种非线性效应确实发生在现实生活中(如问题陈述中所示)，那么它可能是由于作用在较大分子上的非线性阻力。\n从这个模拟中可以看出，迁移速率随外加场强的增加而增加，但不是线性的。相反，在较低的场，迁移速率增加得很快，而在较高场，迁移速率增加得比较慢，形成了一条曲线，看起来类似于灯泡的I-V(电流-电压)图(在开始趋于平稳时上升并向右)。\n学习 DNA片段在凝胶电泳箱中的移动与电子在导线中的移动非常相似。在这两种情况下，带负电荷的粒子都是在外部电场的作用下移动，但是这些移动的粒子会因为障碍物的阻碍而放慢速度，就像“蜗牛一样”。如果电极是点而不是线，那么产生的电场就是不均匀的，并且在中心(电场最强的地方)的迁移速度会比靠近凝胶盒边缘的地方大。即使具有平行线几何形状，在盒子侧面附近的电场也较弱，因此希望分析仅限于线性电极之间的矩形区域。\n","date":"2021-04-12T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/rwp-gel-electrophoresis/","title":"「译文」| 凝胶电泳"},{"content":"本文翻译自Real-world Problems for Phys25, Summer 2006系列文章第一篇A Solution to the Pizza Party Problem。\n假设你计划为50个朋友举办一个披萨派对。当地的披萨店卖12英寸的中号披萨7.99美元，16英寸的大披萨12.99美元，选哪一种比萨更为划算？如果一个中号披萨可供3个人吃，应该点多少个披萨？如果你认为你的大多数朋友都不吃披萨皮，你的答案是否会有所不同？解释你这么回答的理由。\n解决方案 收集信息 一般来说，购买大的产品比较经济实惠，经常被称为“经济尺寸”。然而，也有可能中号披萨是以比平时更低的特价出售的。因此大约需要50/3 = 17个中等的比萨饼才能满足50人的需求，而选大号比萨饼的话，数量会少一些，假设每4个人吃一个大号比萨，大概只需要12个。。如果想要最少的饼皮，大的比萨饼似乎是更好的选择，因为小比萨饼有更多的皮。\n组织信息 这是一个比率问题，可以用简单的代数和圆的面积公式求解：A =(PI)r^2，每单位面积的价格是比较两个比萨饼成本的最佳方法。\n分析 中号披萨的单位面积成本为：$7.99/PI(6 英寸)^2 = $0.071/英寸^2，大披萨的单位面积成本为：$12.99/PI(8 英寸)^2 = $0.065/英寸^2，所以买一个大披萨比买一个中号披萨要便宜10%。\n假设一个中等的比萨饼足以供3人食用，则50/3 = 16.7，因此需要17个中等的比萨饼，成本为135.83美元。\n然而，我们想找与中等比萨饼总量相同的大比萨饼的数量：N(大)A(大)= N(中)A(中)\n因此，N(大)= [PI(6英寸)^2/PI(8英寸)^2]*(50/3)= 9.4\n因此，需要10个大的比萨饼，成本为129.99美元(比中型比萨饼的价格节省了5.84美元)\n另外比萨饼皮的数量与比萨饼的周长成正比：C =(PI)D\n中号比萨饼的皮约有16.7*(12英寸)*(PI)= 630英寸。\n大比萨饼的皮约有9.4*(16英寸)*(PI)= 470英寸。\n由于大披萨的总的皮较少，因此它仍然是更好的选择。\n学习结论 正如我们所想，就成本和最少的皮而言，大披萨是最好的选择。在解决该问题中，重要的是区分圆的面积和周长。仔细注意单位有助于避免混淆这两个公式。\n解决此问题时使用了几种假设。根据你朋友的饥饿程度以及提供的其他食物的不同，假设一个中等的比萨饼可以供3个人食用有可能是错误的。我们还假定价格是固定的，并且没有优惠券或其他折扣。最重要的是，这个问题并不像决定披萨上应该放什么配料这样具有挑战性的任务那么复杂!\n","date":"2021-03-28T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/rwp-pizza-party/","title":"「译文」| 比萨派对问题"},{"content":"前几天看了霍矩大佬做的一期关于 Clubhouse 视频，其中提到了 IRC 这种古老的通信协议。其中有一段叙述很有意思，大意是说如今 IRC 服务器这种带有很强匿名性质的聊天室，由于界面或操作还停留在上世纪，是天然的过滤屏障，人少反而提供了优质的社区交流氛围。但同时也不容易打击盗版，用户通过各种代理、中继连上来，很难去追溯，再加上现如今用户较少，规模不复往昔，因此可能也失去了打击的价值。种种技术和非技术的因素，造就了这样的一个强匿名、低审查、较为自由的一个“避难所”。用视频中的话说：“互联网上，没人知道你是一条狗”。\n而这也正是吸引人的地方 :)\n从 arch wiki 中可以找到一些主流的支持 IRC 协议的软件。根据下面的图表对比，WeeChat 相比于其他软件来说更强大，扩展性更好，最有优势。\n下图表搬运自 arch wiki：\nName Package Written in Extensible SASL BitchX bitchx-git C ? ? ERC emacs ELisp in ELisp via script ii iiAUR C stdin/stdout No Irssi irssi C in Perl Yes pork pork C in Perl No ScrollZ scrollz C ? No sic sicAUR C stdin/stdout No tiny tiny-irc-client-git Rust No Yes WeeChat WeeChat C multiple languages Yes 启动 WeeChat 只需在终端中输入以下命令，回车即可：\n$ WeeChat 如果你发现启动后出现了一些诸如 Errors loading plugins 之类的错误，是因为 WeeChat 启动时会默认加载这些插件，而你并未安装这些插件所需运行时所致。\n如果想要消除这些错误信息，可以使用以下两种方法：\n安装 lua, ruby, aspell，tcl 等软件 在 WeeChat 终端执行 /set WeeChat.plugin.autoload \u0026quot;*,!ruby,!lua,!aspell,!tcl\u0026quot; 就会在启动时阻止这些插件运行 WeeChat 本身是有一些界面交互命令，如 version，uptime，print 之类，如果没有插件，WeeChat 本身没什么用，什么都做不了。WeeChat 对 IRC 的支持也是通过插件来实现的，只不过 IRC 插件是默认内置的，如果想知道都加载了哪些插件，可以通过 /plugin 来查看。还可以在 插件库 安装脚本插件。\n在线手册 所有的命令都可以通过在 WeeChat 中输入 /help 来查询，如果想看某个命令的功能描述和用法，比如 server，可以像这样：\n/help server 还可以查看某个配置项的描述和用法，比如 irc.server.freenode.autojoin：\n/help irc.server.freenode.autojoin 设置选项 在 WeeChat 中查看所有的选项，使用 /set 命令，现在输入 /set 实际上是插件提供的指令 /fset 的 alias，还可以通过模糊匹配：\n/fset WeeChat.* 可以通过如下命令来修改选项的值，例如：\n/set irc.server.freenode.username \u0026#34;sherry\u0026#34; 修改后无需重启，WeeChat 会自动更新，或者使用 /save 强制保存修改后的值。不建议手动编辑配置文件来修改，因为 WeeChat 可能会随时写入信息。\n添加服务器 以当前最大的节点 chat.freenode.net 为例，端口号为 6665-6667 和 8000-8002 用于纯文本连接，端口 6697, 7000 和 7070 为 TLS 加密连接。\n不加密的那种我在国内尝试了下连不上，使用了加密连接才连上，写法如下，其中 freenode 是昵称：\n/server add freenode chat.freenode.net/6697 -ssl 进去之后会发现自己的用户名旁边有个(+iZ)，这个代表用户模式，i 代表隐形，Z 是通过加密连接到服务器的用户，会自动获得这个网络状态，更多用户模式可以通过 /help mode 查看，或者浏览官方 Wiki User Mode\n自定义 IRC 服务器选项 如果您未为服务器选项指定特定值，则 WeeChat 会为所有服务器使用默认值。这些默认选项是 irc.server_default.*，因此对于每个服务器都可以单独设置参数。\n默认情况下，昵称会和 un*x 的登陆用户名称相同，还可以修改昵称：\n/set irc.server.freenode.nicks \u0026#34;sherry\u0026#34; 设置用户名和真实姓名：\n/set irc.server.freenode.username \u0026#34;My user name\u0026#34; /set irc.server.freenode.realname \u0026#34;My real name\u0026#34; 启动时自动连接服务器：\n/set irc.server.freenode.autoconnect on 使用 SSL 加密连接：\n/set irc.server.freenode.addresses \u0026#34;chat.freenode.net/7000\u0026#34; /set irc.server.freenode.ssl on 如果服务器上有 SASL，可以将其用于身份验证：\n/set irc.server.freenode.sasl_username \u0026#34;mynick\u0026#34; /set irc.server.freenode.sasl_password \u0026#34;xxxxxxx\u0026#34; 连接到服务器时自动加入频道：\n/set irc.server.freenode.autojoin \u0026#34;#channel1,#channel2\u0026#34; 重置所设置的选项：\n/unset irc.server.freenode.nicks 设置其他选项（xxx为输入一个不存在的选项名）：\n/set irc.server.freenode.xxx value 连接到 IRC 服务器 /connect freenode 加入/离开 IRC 频道 查询频道：\n/list #channel 加入频道：\n/join #channel 离开频道（界面不会关闭）：\n/part [离开时的信息]] 关闭服务器/频道/私聊（同时界面也会关闭，/close 是 /buffer close 的 alias）：\n/close 断开与服务器的连接：\n/disconnect 后记 除了以上的一些基本用法，还有 SASL 认证 以及 使用 SASL 连接、通过 Tor 连接 Freenode 等用法。此外，一些 WeeChat 软件的方面的问题，可以看这个 FAQ\n一些常用的 IRC 站点：\nhttps://freenode.net https://www.dal.net/servers https://www.undernet.org 参考资料 WeeChat Docs Freenode Knowledge Base Arch Wiki IRC_clients Wikipedia SASL ","date":"2021-02-22T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/weechat-guide/","title":"WeeChat 不完全使用指南"},{"content":"系列文章 细数 Breaking Bad 经典片段 | 一 细数 Breaking Bad 经典片段 | 二 细数 Breaking Bad 经典片段 | 三 细数 Breaking Bad 经典片段 | 四 细数 Breaking Bad 经典片段 | 五 Season 5 Episode 1 \u0026ndash; Live Free or Die 场景1：\n视频链接: https://www.youtube.com/watch?v=w-h05P0doX4\n利用强磁场强弱的瞬间转化来消磁，很好的想法！\n场景二：\nWalt:\nYou\u0026rsquo;re not Clarence Darrow, Saul. 你不是克莱伦斯·单诺(被后人誉为美国历史上最伟大的辩护律师) 索尔\nYou\u0026rsquo;re a two-bit bus-bench lawyer, 你只是个廉价的底层律师\nand you work for me. 而且你为我效力\nsaul:\nYeah, well, Clarence didn\u0026rsquo;t ever have a client like you 对 可克莱伦斯可没你这样的客户\nask him for something\u0026hellip; 问他要\u0026hellip;\nlike this. 这种东西\nOkay? Yeah, I put my ass on the line for you. 好吗 没错 我为了你连小命都搭上了\nHuell, too. Huh? 修尔也是\nHe\u0026rsquo;s got fingers like hotdogs. 他的手指和热狗一样\nHe could\u0026rsquo;ve easily busted this in two 他一不小心把这个弄破\nand killed everyone in the office, 然后办公室里的每个人就都死了\nbut do I complain? 我抱怨了么\nNo. Beg, borrow, or steal, I\u0026rsquo;m your huckleberry. 没有 不管求 借还是偷 我是你的好朋友\nI go the extra mile. 我要做额外的工作\nOnly you never told me 只是你从没告诉过我\nthat the kid would wind up in the hospital. 这孩子会进医院\n结尾 saul 和 白老师对话也很精彩，在 Gilligan 的笔下每个人性格都是那么鲜明，活灵活现。\nSeason 5 Episode 2 \u0026ndash; Madrigal 场景1：\n视频链接: https://www.youtube.com/watch?v=z4WMU3NbQTk\n最终从吸尘器里“找到了”兰铃花毒，白老师的心机越来越深了，jesse 又被摆了一道。\nSeason 5 Episode 5 \u0026ndash; Dead Freight 场景1：\n视频链接: https://www.youtube.com/watch?v=vWTuSWX6UQ4\n神不知鬼不觉的从火车里偷到甲氨，精彩！Yeah! bitch!!\nSeason 5 Episode 6 \u0026ndash; Buyout 场景1：\n视频链接: https://www.youtube.com/watch?v=8Pw7H02Hdz4\nJesse:\nLook, when you, uh, when you started this thing, 你想想 开始做这玩意时候 did you ever dream of having $5 million? 你想过能搞到500万美金吗 I know for a fact that you didn\u0026rsquo;t. 我敢保证 你没想过\nI know for a fact all you needed was 737,000, 我很清楚 你就需要73万7千\ncause you worked it all out, like, mathematically. 因为你算得清清楚楚\nPinkman 仍然清楚的记得白老师之前算得那笔帐。七十三万七千，这是供他的家庭直到他儿子大学毕业所需的开销。人在不同的处境下，只能做出基于自身情况所能得到的最好的选择。如果说以前的白老师是为了给家庭一笔存款，到后来的是为了活命而与那些毒贩周旋，如今一路走来，曾经想杀掉他的人都被他一一打倒。此时性命无虞，外部环境很好，，目标也会更加远大。\n何况他们提议卖掉甲氨，这种一锤子买卖，反而是触及了曾令白老师悔及一生的往事——他曾5000美元将股份卖给了其他两位合伙人，同时也廉价卖掉了他和他孩子的未来。之后他曾经的两位创始人同伴邀请他去公司工作时，对方可能是好意，但对白老师来说，更像是一种侮辱。像白老师这样在某一领域天纵奇才却默默无闻的做了几十年中学教师，晚年一事无成却还得了癌症的人，他很不甘心就这样结束。因此，他更不希望自己重蹈覆辙，再次错过这次机会。\nSeason 5 Episode 7 \u0026ndash; Say My Name 场景1：\n视频链接: https://www.youtube.com/watch?v=RZPZWpEiuoA\nIt was perfect. But, no, you just had to blow it up. 天衣无缝 可你偏不 非要炸飞一切\nYou and your pride and your ego! 你 你的骄傲 和你的自负\nYou just had to be the man. 你非要掌控大局\nIf you\u0026rsquo;d done your job, known your place, 如果你乖乖干好你的活 清楚自己的位置\nwe\u0026rsquo;d all be fine right now! 我们现在都相安无事\n没想到 mike 也会说出这种话，感情不是他生命受到威胁。当然他本来就和 walt 合不来，现在又被逼得被迫跑路，对 walt 说出什么话来也不奇怪.\nSeason 5 Episode 8 \u0026ndash; Gliding Over All 场景1：\n视频链接: https://www.youtube.com/watch?v=8jMFkf1mJhY\n存在片段回忆杀，白老师退出了，还和 jesse 聊起了从前。即使和 walt 因 500 万的事曾发生了不愉快，但在打开房门的时候仍然像一个老朋友一样邀请他进屋来，并问他需不需要啤酒什么的。之后他们聊起了刚开始制毒时的 RV 旅行房车，吐槽那辆破车有多破，简直是场噩梦，每次遇到红灯都要祈祷不要在这时候出了岔子，吐槽车子的发动机动不动就吱嘎乱响，不知道的还以为碾死一笼子猫。还聊起了一起在野外制毒时发生的事情，有次车没油了，油表却一直显示还有一半，jesse 不得不提着便携油箱走了 3 英里\u0026hellip;\n回忆起来还真是令人唏嘘不已，好喜欢他们之前的生活。\nSeason 5 Episode 9 \u0026ndash; Blood Money 场景1：\n视频链接: https://www.youtube.com/watch?v=o8gz-G55Dxo\njesse 怀疑 walt 杀掉了 mike，因为他杀掉了监狱中 mike 的部下，不会留着 mike 这个活口。但白老师矢口否认，并坚称看到他开车离开了。\nWalt:\nListen to me. 听我说\nI did not kill Mike. 我没有杀麦克\nThe last time that I saw him, 我最后一次见到他\nhe had his bag\u0026ndash; the one that I brought him\u0026ndash; 他拿着我给他的包\nand he got into his car, and he drove away. 他开着自己的车走了\nAnd for all I know, he is alive and well. 就我所知 他现在平安无事\nWalt:\nJesse\u0026hellip; 杰西\nI need you to believe this. 你得相信我说的\nIt\u0026rsquo;s not true. It\u0026rsquo;s just not. 你揣测的都不是真的\nSo he\u0026rsquo;s out there. 所以他还活着\nHe\u0026rsquo;s okay. 安然无恙\nYes. 没错\nMike is fine. 他活得好好的\nWherever he is. 不管他在哪里\nWe both know that he can take care of himself. 咱俩都清楚他会照顾好自己\nAnd he\u0026rsquo;s certainly capable 他绝对有能力\nto provide for his own family, okay? 照顾好自己的家人 Jesse? 杰西\nI need you to believe me. 你得信任我\nSeason 5 Episode 11 \u0026ndash; Confessions 剧情回顾：https://www.youtube.com/watch?v=8Egkod8CPCU\n场景1：\n视频链接: https://www.youtube.com/watch?v=qCHw77Iqwuk\n老白想让 Jesse 离开，少一个人就少一个被攻击面，况且 Jesse 留在这里只会给老白带来麻烦，但是在对话中只字不提是为了自己，却说为了 Jesse 好，Jesse 也不傻，事态已经很明显了，于是有了以下的经典对话，对话中 Jesse 再次说出了前几季多次出现的那句话：你一点都不在乎我。\n在沙漠的这段对话，也是唯一一次老白没有否认杀害 mike 的场景，可能是因为被 Jesse 的一番话触动，心怀愧疚，也可能出于这可能是这辈子两人见得最后一次面而变的坦诚。\n场景的最后老白心情复杂抱住了 Jesse，竟让我想起了 S5E8 里的那段场景，老白去还 Jesse 500 万，双方阔别重逢却少有的不知道该说什么，寒暄了几句，聊了聊往事便以老白离开结束。总之这个是「真」经典场景了，以至于我把整段对话全部搬了过来：\nWalt:\nJesse, will you let me help you? 杰西 让我帮你好吗\nI don\u0026rsquo;t like to see you hurting like this. 我不想看你这么痛苦\nMaybe it\u0026rsquo;s time for a change. 也许是时候改变一下了\nJesse：\nWhat kinda change? 什么改变\nWalt:\nI don\u0026rsquo;t know. 我不知道\nI don\u0026rsquo;t know. Maybe\u0026hellip; 不知道 也许\nmaybe it\u0026rsquo;s time for you to just\u0026hellip; 也许你是时候\nleave all of this behind. 放下这一切\nJust get out of town. 离开这里\nDon\u0026rsquo;t look back. 不要再回来\nSaul knows a man. 索尔认识一个人\nHe specializes in giving people new identities. 专门帮人伪造新身份\nHe would move you someplace far away 他会把你送到某个很远的地方\nand set you up with a whole new life. 让你过上全新的生活\nYeah, I know. Sounds a little extreme. 我知道 听起来是有点极端\nBut maybe it\u0026rsquo;s exactly what you need. 但也许这正是你需要的\nYou know, I really think that would be good for you. 我觉得这样对你真的很好\nA clean slate. 一个新的开始\nJust think about it. 考虑一下\nYou get a job. Something legitimate. Something you like. 你能找一份工作 合法的 你喜欢的\nMeet a girl. Start a family, even. 认识个女孩 甚至成家\nHell, you\u0026rsquo;re still so damn young. 你瞧你还这么年轻\nAnd what\u0026rsquo;s here for you now anyway? 再说这里也没什么让你留恋的了\nI tell ya. 我跟你说\nIf I could, I\u0026rsquo;d trade places. 如果可以 我愿意和你换\nA whole lifetime ahead of you 大好人生就在前面\nwith a chance to hit the reset button. 并且有机会重新开始\nIn a few years, this might all feel 过几年再回想起来\nlike nothing more than a bad dream. 这一切不过是个噩梦罢了\nJesse：\nWould you just, for once, 你能不能就这么一次\nstop working me? 不要控制我\nWalt:\nWhat are you talking about? 你在说什么\nJesse:\nCan you just, uh, stop working me 你能不能不要控制我\nfor, like, ten seconds straight? 哪怕一会儿也好\nHuh? Stop jerking me around? 不要把我当个木偶一样\nWalt:\nJesse, I am not working you. 杰西 我没有控制你\nJesse:\nYes. Yes, you are. 有 你有\nAll right? Just drop the whole concerned dad thing 好吗 不要装出一副慈父的样子\nAnd tell me the truth. 跟我说实话\nI mean, you\u0026rsquo;re\u0026ndash; you\u0026rsquo;re acting like 你表现得就好像\nme leaving town is\u0026ndash; is all about me 我跑路只对我有好处\nand turning over a new leaf, 可以重新开始似的\nbut it\u0026rsquo;s really\u0026ndash; it\u0026rsquo;s really about you. 但事实上 对你好处更大\nI mean, you need me gone, 你需要我离开\ncause your dickhead brother-in-law 因为你那个混蛋小舅子\nis never gonna let up. 不会放手\nJust say so. 直说吧\nJust ask me for a favor. 求我帮你个忙\nJust tell me you don\u0026rsquo;t give a shit about me, 直接告诉我你一点都不在乎我\nand it\u0026rsquo;s either this\u0026ndash; 我要是不离开\nIt\u0026rsquo;s either this or you\u0026rsquo;ll kill me 我要是不离开 你就杀了我\nthe same way you killed Mike. 就像你杀了麦克一样\nI mean, isn\u0026rsquo;t that what this is all about? 不就是这么回事吗\nHuh? Us meeting way the hell out here? 让我们在这个鬼地方见面\nIn case I say no? 以防我拒绝\nSeason 5 Episode 13 \u0026ndash; To\u0026rsquo;hajiilee 剧情回顾：https://www.youtube.com/watch?v=sE8ebm1IZmE\n白老师慌的一匹\nSeason 5 Episode 14 \u0026ndash; Ozymandias 场景一：\n视频链接：https://www.youtube.com/watch?v=28kofqHQg6k\nHank 之死。\nHank Schrader：\nYou\u0026rsquo;re the smartest guy I ever met. 你是我见过最聪明的家伙\nAnd you\u0026rsquo;re too stupid to see\u0026hellip; 但你却傻到看不出\nhe made up his mind ten minutes ago. 十分钟前他就拿定了主意\nDo what you\u0026rsquo;re gonna do. 做你该做的事吧\n场景二：\n视频链接：https://www.youtube.com/watch?v=Fq7c6RV88Qg\n亲看看着 hank 被杀，walt 十分绝望但又无可奈何，加上 Jesse 设套将他逼到如此境地，最终导致了这样的结局，他现在的怒火简直能将 pinkman 吞噬。带走 pinkman 之前，walt 出于报复心理告诉 pinkman 一个关于 Jane 死亡的秘密，pinkman 听后神情呆滞的任由 Jack 的人带走。两人反目，最终走到了这般境地。\nWalt:\nI watched Jane die. 我亲眼看着简死去\nI was there. 我在场\nAnd I watched her die. 我眼睁睁看着她死去\nI watched her overdose and choke to death. 我看着她吸毒过量 窒息致死\nI could have saved her. 我本可以救她\nBut I didn\u0026rsquo;t. 但我没有\n场景三：\n视频链接：https://www.youtube.com/watch?v=eptjj2jSl2k\nSkyler 也很聪明，知道对方在给她脱罪。正如 saul 所说，这通电话打完对她以后到法庭上很有利。\nSeason 5 Episode 16 \u0026ndash; Felina 场景一：\n视频链接1：https://www.youtube.com/watch?v=1EehA6C8b4s 视频链接2：https://www.youtube.com/watch?v=7l6u1FqGMuY\n让大富豪”帮忙“把钱转移给家人，smart guy！\n场景二：\n视频链接：https://www.youtube.com/watch?v=gUJci5RWsqE\n唉，什么都不说了，看对话吧。\nWalt:\nSkyler 斯凯勒\nSkyler 斯凯勒\nAll the things that I did, 我所做的一切\nyou need to understand\u0026ndash; 你要理解\u0026hellip;\nIf I have to hear 如果我还得\none more time 再听一次\nthat you did this 你这么做\nfor the family\u0026ndash; 是为了家人\u0026hellip;\nI did it for me. 我是为了自己\nI liked it. 我喜欢制毒\nI was good at it. 我也很擅长制毒\nAnd\u0026hellip; 而且\nI was\u0026hellip; 让我觉得\nReally\u0026hellip; 我真的\nI was alive. 还活着\n场景三：\n视频链接：https://www.youtube.com/watch?v=NPRZMtrEgus\n可以说是非常精彩了的复仇了！白老师和 Gus 一样，都是跑到对方的地盘将对方一锅端了，甚至连 Lydia 都没放过，心思缜密如此，乃至于斯！当然这也正印证了复仇前对 skyler 说的话：\nSkyler:\nYou didn\u0026rsquo;t kill anybody sneaking in here, did you? 你偷着进来没有杀谁 对吧 You didn\u0026rsquo;t hurt anybody? 你没有伤害别人吧\nWalt:\nNo 没有 Didn\u0026rsquo;t have to. 没有必要\nSkyler:\nYou look terrible. 你好狼狈\nWalt:\nYeah. 是啊 But I feel good. 但是我感觉很好\nSkyler:\nSo talk. 说吧 Why are you here? 你为什么来这里\nWalt:\nIt\u0026rsquo;s over. 都结束了 And I needed a proper goodbye. 我需要好好告别 Not our last phone call. 上次在电话里不算\nSkyler:\nSo you\u0026rsquo;re going to the police? 你要去自首吗\nWalt:\nThey\u0026rsquo;ll be coming to me. 他们会来抓我\nSkyler:\nIf you\u0026rsquo;re in custody, 如果你被捕了 what stops those people from coming back, 那些人不会回来报复吗 those people you worked with? 跟你合作的那些人 When\u0026ndash;when I still had the house, 我还住在家里的时候 three men came 三个男人 in the middle of the night, 大半夜闯进来 wearing masks, threatening Holly and Flynn and me. 蒙着面 威胁霍莉 弗林和我 They told me not to talk about 他们告诉我不要再提及 that woman I saw at the car wash, 我在洗车行看到的那个女人 and if you\u0026rsquo;re in custody and they find out\u0026ndash; 如果你被捕了 他们发现\u0026hellip;\nWalt:\nThey\u0026rsquo;re not coming back. 他们不会回来报复的 Not after tonight. 今晚过后就不会了\n场景四：\n视频链接：https://www.youtube.com/watch?v=mo7RBN5V8vs\nJesse 到最后还是不忍亲手杀掉老白。\nWalt:\nDo it. 开枪 You want this. 你想这样\nJesse:\nSay the words. 说出来 Say you want this! 说你自己想死 Nothing happens until I hear you say it. 你不说我就不开枪\nWalt:\nI want this. 我想死\nJesse:\nThen do it yourself. 那你自己动手吧\n场景五：\n视频链接：https://www.youtube.com/watch?v=6AlEEcanbus\n结尾白老师去了制毒现场，环顾那些熟悉的场景，摸了摸仪器，拿起了制毒时用的防毒面具，脸上的笑容看起来既欣慰又愉悦。这才是他这样的人应该待的地方！远方数辆警车带着警笛声赶来，白老师倒在了地上，身下白衣被一摊血迹浸染，镜头随即升高、升高。真的是艺术！\n结语 本来这篇文章一直到 S5E11 的部分我在去年九月份就写完了，由于之后 YouTuBe 官方一直没更 11 集后面的剧情回顾和精彩片段，缺少引用素材，因此就一直放下了。时隔一年，官方的 YouTuBe 频道上 14、15、16 还是没更新，所以只好在链接里引用了别人的剪辑，总而言之系列文章这个坑我还是补回来了hhh\n刚开始我只是想做个简单的回顾，一篇搞定。但看到里面精彩的台词对话，忍不住把他们全部搬出来细细品味，结果挖了个大坑，最终把五季的台词看了个遍，把里面我认为比较精彩的部分摘录出来共同组成了这五篇《细数 breaking bad 的经典片段》\n时至今日，Better Call Saul 都已经更完到了第五季，还是同样的风格。Breaking Bad 也出了续集电影，讲述了 Jesse 开车逃出来之后的事情，惟一的遗憾是在续集中没听到 Skyler 及其子女的情况，如今他们住在哪里？生活得怎么样？前合伙人到底有没有把钱捐给 Skyler，如果捐了，Skyler有没有收下\u0026hellip;\n上面那些疑问可能不会再有答案了，后面还是一起来期待后续 Better Call Saul 的精彩表现吧！\n参考资料 Breaking Bad ","date":"2020-10-18T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-classic-scene-of-breaking-bad-5/","title":"细数 Breaking Bad 经典片段 | 五"},{"content":" 本文转载于 ronaldsvilcins，以下为原文：\nRSS feeds for your Github releases, tags and activity\nGitHub provides several timeline resources in Atom format. That’s how I get latest info about projects that I follow and their fixed bugs and new features. Some of official RSS feeds are:\nRepo releases\nhttps://github.com/:owner/:repo/releases.atom\nRepo commits\nhttps://github.com/:owner/:repo/commits.atom\nPrivate feed (You can find Subscribe to your news feed in dashboard page after login)\nhttps://github.com/:user.private.atom?token=:secret\nRepo tags\nhttps://github.com/:user/:repo/tags.atom\nUser activity\nhttps://github.com/:user.atom\n","date":"2020-07-01T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/github-rss/","title":"Github RSS"},{"content":"美国制造的每个处理器都必须具有一定的性能水平，才能被认为适合出口。公司拥有大量与硬件性能有关的文档，这些文档都由美国法律的度量标准决定。这些指标包括以千兆字节（GFLOP）度量的原始处理能力，调整后的性能峰值（APP）和/或综合理论性能（CTP）。根据要出口的地区，可能会应用这些指标中的一项或多项。\n如果无法进口 CPU，解决此问题的一种方法是获得构建许可证。除此之外，如果你可以调整许可并在设计中加入一些自定义的东西，在合理范围内则可以将硬件重新标记为本地设备。这就是 AMD 的核心设计之一，在经过修改之后，如何使其成为面向中国市场的“中文版” x86 CPU 的。包装的主要优点不是避免进口问题，而是随之附上的“中国”标签。再者，人们假设使用这些 CPU 的人在购买商品上没有选择权。\n我们发现这些处理器已经从 Zen 1 设计中进行了多个地方的更改。很多人怀疑它们是 Zen 1 SoC 的副本，这是不正确的——设计中的变化已经足够多，以至于这些部件之间能够重新平衡，主要是因为其性能比 Zen 1 同类产品差。整数性能基本上是相同的，但是浮点性能已降低——普通指令的吞吐量只有一半，并且随机数生成已调整为既慢又产生质量较低的随机数。加密引擎也已被替换，从而不再加速常见的 AES 指令，而是包含了一些更专门针对中国安全性的指令，例如 SM2，SM3 和 SM4。在我们的测试中，尽管处理器在探测时显示支持 AVX/AVX2，但似乎已被禁用。我们怀疑这更多是固件错误，而不是海光 CPU 的限制。\nAMD 将其第一代 Zen 核心设计的修改后的版本变成为“中国”设计的 x86 CPU 的方法非常复杂。首先与一个叫做中国天津海光先进技术投资有限公司(THATIC)的中国公司建立合资企业，然后组建海光微电子有限公司(HMC)和成都海光集成电路设计有限公司(Hygon)，AMD和中国天津海光(THATIC)分别持有这两家公司不同的股份，他们讨论了各自对 IP 有控制权的部分，以便让机密仍掌握在 AMD 手中，允许合资企业的中方有进行修改的请求权利。而且必须批准这些请求，然后海光微电子(HMC)从 GlobalFoundries 下芯片订单，而成都海光集成电路(Hygon)打包并将其出售给中科曙光(sugon)等公司。我们在第一章的概述中对此进行了详细介绍，但是足以说明所有方面的工作几乎就像在玩被蒙住眼睛的风险游戏一样。\n由于 AMD 不愿在记录上讨论处理器的安排或更改的任何更详细的细节，当被问及是否可以披露处理器的更改方式时，我们被告知“如果您发现任何问题，我们可能会确认“。有一次我看到海光 Dhyana 处理器，是由于在台北电脑展时和海光的供应商之一之间有误解，事件发生后，让我拍照的那个人突然停止与我交流（我猜想是为了保住他的工作）。经过一些讨论后，仍然花费了一年多的时间才得以拿到芯片来测试，而且由于当前美国实体列表禁令涵盖了其中一家合资公司，我们才能够获得这些芯片。这从根本上杀死了该项目，并导致美国一家子公司被封存，使某些零件泄漏到曾经受到严格控制的市场上。\n总体而言，这些海光 CPU 为中国市场提供了英特尔之外的替代产品，并且或许比通过进口限制而购买的那些速度更快。AMD 在急需的时候赚到了一些钱，但是随着 Zen 2 平台的成功，我不认为 AMD 在未来十年内还需要做类似的事情。AMD、中国天津海光(THATIC)和合资公司之间协议的性质仅针对单一核心设计 Zen 1，而非 Zen 2，从而限制了其竞争力。此外，出于所有意图和目的，美国实体名单禁止合资企业使该项目无效。中国的海光 Dhyana x86 处理器在未来几年仍将被政府和其他类似组织使用，但这必将成为半导体历史上最奇怪的历史之一。\n(完)\n其他篇章 「译文」| 测试中国的 x86 CPU：深入研究基于 Zen 的 Hygon Dhyana 处理器(一) 「译文」| 我们的海光系统：8核 Dhyana 和双32核 Dhyana Plus(二) 「译文」| 海光 CPU：中版的加密方式，不同的性能(三) 「译文」| 基准测试：Windows(四) ","date":"2020-06-30T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/hygon-cpus-5/","title":"「译文」| 结论(五)"},{"content":"对于这两个系统，我们安装了 Windows：小型的8核 Dhyana 系统装了 Windows 10 专业版，而大型双32核 Dhyana Plus 服务器上安装 Windows 10 企业版，由于 AVX / AVX2 无法正常工作，因此我们的测试范围受到了限制。正如之前所说的，某些软件在系统上无法运行，例如服务器上的 CPU-Z。\n从数据中可以看出，由于时钟速度的原因，8核 Dhyana 处理器介于6核 Ryzen 5 1600X 和8核 Ryzen 6 1800X 之间，但在某些方面的测试中，它甚至还不如速龙(Athlon) 200GE。而双32核 Dhyana Plus 服务器的结果似乎看起来杂乱无章，很多方面甚至被 Ryzen 7 1800X 吊打，即使有些方面能够超过 Ryzen 7 1800X 但却轻易的被 Ryzen 9 3950X 吊打。唯一一个确实表现出色的基准测试是 Corona——一个基于内存/NUMA(Non-uniform memory access) 的不可知整数渲染器——这一点的测试结果看起来倒是和这个芯片很相合。\n(未完待续\u0026hellip;)\n其他篇章 「译文」| 测试中国的 x86 CPU：深入研究基于 Zen 的 Hygon Dhyana 处理器(一) 「译文」| 我们的海光系统：8核 Dhyana 和双32核 Dhyana Plus(二) 「译文」| 海光 CPU：中版的加密方式，不同的性能(三) 「译文」| 结论(五) ","date":"2020-06-16T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/hygon-cpus-4/","title":"「译文」| 基准测试：Windows(四)"},{"content":"最重要的问题是与标准 Ryzen 和 EPYC CPU 相比，这些处理器究竟发生了什么变化。有人怀疑它们是重新贴了个标签的 AMD 处理器，这是完全不对的——我们可以通过 Linux 内核更新提供的不同加密引擎来反驳这一点。而且我们还发现了其他差异。\n从总体上来看，我们可以确定，核心布局是相同的，缓存大小，TLB(Translation Lookaside Buffer 转换后备缓冲区) 大小和端口分配都相同——在此基础级别上没有差异。海光 CPU 仍然为 L1 高速指令缓存提供64 KB 4路，为 L1 高速数据缓存提供32 KB 8路，为 L2 高速缓存提供512 KB 8路，为 L3 高速缓存提供8 MB 16路。这些和 Zen 1 核心是相同的。 转换后备缓冲区条目如下：\nL1D + L1I: 4K/2M/1G 64-entry L2D: 4K 1536-entry 6-way, 2M 1536-entry 3-way, no 1G L2I: 4K/2M 1024-entry 8-way, no 1G L1 的内存访问时间为4个周期，L2 的为12个周期，L3 的为37-40个周期。记忆潜伏期在284-307个周期内测量。\nL1 读取速度的测量约为每个时钟32个字节（总计805 GB/s，每个内核约100 GB/s），而写入速度测量的每个时钟约为16个字节（总计408 GB/s，每个内核约51 GB/s） ）。 8核的 DDR4 内存速度使读取速度为38.5 GB/s，写入速度为35.8 GB/s。\n加密上的变化 对于加密更改，Linux 内核更新中详细介绍了这些更改。更新围绕 AMD 的虚拟化功能或 SEV(Secure Encrypted Virtualization 安全加密虚拟化) 的安全加密进行。通常，对于 EPYC 处理器，SEV 由 AMD 定义的加密协议控制，在这种情况下为 RSA(Rivest–Shamir–Adleman)，ECDSA(Elliptic Curve Digital Signature Algorithm)，ECDH(Elliptic-curve Diffie–Hellman)，SHA(Secure Hash Algorithms) 和 AES(Advanced Encryption Standard)。为了生成正确的密钥，SEV 使用这些方法。但是，在海光 Dhyana 设计中，SEV 被构建为使用称为 SM2，SM3 和 SM4 的算法。\n正如更新中所述，SM2 基于椭圆曲线密码学，并且需要其他私钥/公钥交换。SM3 是类似于 SHA-256 的哈希算法，SM4 是类似于 AES-128 的分组密码算法。为了支持这些算法所需的额外功能，这些命令已加入到 Linux 内核中。说明书中指出，这些算法已在海光 Dhyana Plus（可能是大型 CPU）处理器上成功测试过，也已在 AMD 的 EPYC CPU 上成功测试过。\n减缓指令执行速度 我们能够确定的最大设计上的变更是指令吞吐量。我们认为 Dhyana Plus 和之前提到的 EPYC 之间没什么不同，并且我们做了额外的检查以确保我们的软件能够显示正确的数据，但只是故意将某些指令放慢了他们的执行速度。这里面有一些相当严肃的含义，尤其是取决于它何时在管道中发生。\n我们认为情况是，为了让 AMD 导出其 SoC 设计，海光还必须共享与 CPU 解释指令的方式有关的微代码，并且还要放慢某些关键指令的执行速度（或完全禁用），以便合资公司继续和中国合作。\n在我们的测试中，我们发现，尽管海光和 EPYC 之间的整数性能相似，但某些浮点指令（即 DIV 和 SQRT 运算）并未在海光 CPU 中进行流水线处理。这意味着吞吐量和延迟减少了。许多简单的 MMX / SSE(Streaming SIMD Extensions) 指令降低了吞吐量，以下表格列出了指令吞吐量差异：\nAnandTech EPYC Naples Hygon Dhyana ADD/SUB 2 per clock 1 per clock CMP/MULP* 2 per clock 1 per clock ADDSUBP* 2 per clock 1 per clock RCP*/RSQRT* 1 per clock 0.5 per clock BLENDW 3 per clock 2 per clock PMIN/MAX* 3 per clock 2 per clcok PAND/ANDN/OR/XOR 4 per clock 2 per clock MOVs 4 per clock 2 per clock 所有这些指令对于基本任务都非常重要。通过限制这些指令的并行吞吐率，这意味着这些 CPU 无法计算并行化的代码，从而降低性能。\n但是，最大的变化或许是服务器版“Dhyana Plus”和消费版“Dhyana”版本之间的差异。Dhyana Plus 大大减少了随机数生成的作用。关键指令 RDRAND 和 RDSEED 具有各种导致速度变慢或变快的原因。\nRDRAND 指令比较如下：\nAnandTech Zen 1 Desktop Hygon Dhyana Hygon Dhyana Plus 16-bit 1200 clocks 1100 clocks 800 clocks 32-bit 1200 clocks 1100 clocks 800 clocks 64-bit 2365 clocks 2125 clocks 1520 clocks RDSEED 指令比较如下：\nAnandTech Zen 1 Desktop Hygon Dhyana Hygon Dhyana Plus 16-bit 1200 clocks 1100 clocks 12000 clocks 32-bit 1200 clocks 1100 clocks 12000 clocks 64-bit 2365 clocks 2125 clocks 27100 clocks 看上图发现差异还是很大的，尤其是在 RDSEED 中。我们看到 RDSEED（用于生成随机数算法的种子生成）在服务器芯片上的速度慢了10倍以上，而用于实际基于硬件的随机数生成 RDRAND 则比标准 Ryzen 快——在服务器芯片上也是如此。有趣的是，在 Ryzen Mobile 和 Ryzen Desktop APU 上也看到了服务器芯片的 RDSEED 相同的延迟。\n对于 RDRAND 指令，拥有更快的随机数生成器可以说明两件事：要么实际上更快，要么随机算法的周期性较低。例如：指向一个自我包装的算法。最好的伪随机数生成具有最大的周期性，因此在这种情况下，很快我们就能得出 RDRAND 指令结论，周期性较低，从而导致生成质量较低的随机数。\n对于 RDSEED 指令，它慢10倍的情况有点不同。RDSEED 指令从主板上的各种传感器中获取信息，并输出一个随机值来初始化 RDRAND——每个周期只能调用一次。较慢的 RDSEED 要么意味着它从更多源获取数据，要么是故意放慢了。\n实际上，RDRAND 和 RDSEED 可以在我们的 Dhyana Plus 系统的 BIOS 中启用或禁用。\n有趣的是，此菜单称为“Moksha 通用选项”。 Moksha 通常是与“启蒙”或“释放”相关的词。这要么是一个有趣的文字游戏，要么是有人无视上下文从古汉英词典中找的词。\n关于 AVX 和 AVX2 的性能，即使 CPU 标识着支持 AVX 和 AVX2，但尝试实际测量这些指令时却失败了——在我们的指令转储中，它们被列为“支持的，已禁用”。关于所支持的功能，Zen 1 通常将 AESNI，SHA，CLMUL，FMA4，BMI 和 BMI2 列为支持的指令——海光 CPU 不支持这些指令。\n对于 AES 之类的东西，我们做了一个基准测试，这些 CPU 不支持 AES，意味着性能大打折扣：\n还有一点需要注意，通过探测寄存器来查找 AMD CPU 功耗的典型手段在这里也失效了。似乎完全从 CPU 中删除了。\n(未完待续\u0026hellip;)\n其他篇章 「译文」| 测试中国的 x86 CPU：深入研究基于 Zen 的 Hygon Dhyana 处理器(一) 「译文」| 我们的海光系统：8核 Dhyana 和双32核 Dhyana Plus(二) 「译文」| 基准测试：Windows(四) 「译文」| 结论(五) ","date":"2020-06-11T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/hygon-cpus-3/","title":"「译文」| 海光 CPU：中版的加密方式，不同的性能(三)"},{"content":"海光的所有已知发行版可归结为两个平台：一个包含一个8核 Zen 1 芯片，类似于台式机系列处理器（或 EPYC 3000），以及一组由四个芯片构建的服务器处理器，布局和 Naples 系列相似。\n我们要测试的8核工程样本系统没有提供任何准确的 SKU 编号——CPU上标着“C86”，代表“中国的 x86”。其余的编号可能与硅片所来自的晶圆和批次相关，但是我们没有可用的解码器环。\n主板使用 microATX 尺寸，并且是一个带有横向 DDR4 插槽的服务器主板，以便引导气流通过服务器机箱中的系统。现在从最主要的插槽开始说，由于我们目前拿到的 CPU 是无插槽 BGA 设计，已经绑定到主板上了，因此无法升级，这个有点类似于我们在笔记本电脑和嵌入式系统中看到的那种。而且这些安装孔让我感到有点惊讶——这些不是我们通常在 Ryzen 消费级产品中看到的那种 AM4 安装孔，而是 Intel 的安装孔。我猜肯定是有人有很多旧的 Intel 散热器？要么就是为了能够更容易找到特定的服务器级的散热器。\n这个 CPU 具有六相电力输送系统，并且由于这个是纯 CPU，因此没有集成图形。左下方是 IPMI 控制器提供的 2D 图形，这是我们在服务器系统中常见的经典的信驊科技的 AST2500 芯片。不像其他 microATX 主板，这个没有典型的四插槽设计，而是三插槽设计，带有两个全长 PCIe 3.0 插槽（能够支持 x16/x0 或 x8/x8）和一个开放式 PCIe x4 插槽。\n通常，这些 CPU 确实不需要芯片组，因为它们在芯片上具有 SoC 级别的 IO 功能，尽管在 Ryzen 1000 家族首次推出时，消费级的 Ryzen CPU 需要与 X370 芯片组搭配使用。但海光并未使用这些芯片组，而是将 CPU 与 Lattice 半导体公司的现场可编程门阵列(FPGA)搭配作为芯片组。于是从整体上来看这个主板提供了一套奇特的组合 IO，包括 SATA 端口，四个双 LED 显示屏，许多自定义的连接器和按钮以及许多我们不知道的未记载的东西。例如，主板上似乎有两块电池——一个应该是用来保持开机时间，另一个看起来似乎时间更久但是我们不知道为什么要放在那个地方。\n这是主板，我们在上面放置了等效的 AM4 消费级 Ryzen CPU，以显示尺寸。\n相比之下，双插槽服务器有点像一头野兽。据我们了解，这些服务器是为计算和存储而构建的，每个 CPU 都与四个具有4个 U.2 驱动器或 16 路 SATA 连接能力的分支连接器配对。 CPU 具有八通道内存功能，但是由于一些原因，我们不得不在四通道模式下对其进行测试。\n这个 CPU 虽称为 C86，但型号上也标明着数字7185，表示是 32 核 CPU。外壳是红色的，而 Naples EPYC CPU 为蓝色，Threadripper CPU 为橙色，Rome EPYC CPU 为绿色。红色可能是对中国的致敬，但也没人能和我们确认这一点。\n该服务器实际上是曙光信息产业有限公司设计，具有12个前面板2.5英寸驱动器插槽。对于这个8核系统，我们将其放入标准台式机壳中并配备 CPU 散热器。两种系统都通过远程桌面访问进行了测试，因为当我回到伦敦时，它们已经被 Wendell 托管在他在肯塔基州的实验室中了。\n当我们尝试探测该 CPU 时，CPU-Z 似乎没有太多线索。该软件为8核用户提供了该接口，显示了 3.2 GHz 频率，但只有一个核，除了对 AVX，AVX2 和 FMA3 的支持外，没有其他的细节。对于服务器 CPU，CPU-Z 完全无法运行。而且似乎对于海光的型号，在 AMD 消费级 CPU 上访问数据的一些常用方法都已经全部更改，要么规避常规方法检测，要么遵循不同的标准。有趣的一点是，尽管 CPU-Z 检测到 AVX 和 AVX2，但我们的某些软件无法检测到，因此我们不得不恢复为 SSE 检测，以使该软件运行。\n(未完待续\u0026hellip;)\n其他篇章 「译文」| 测试中国的 x86 CPU：深入研究基于 Zen 的 Hygon Dhyana 处理器(一) 「译文」| 海光 CPU：中国版的加密方式，不同的性能(三) 「译文」| 基准测试：Windows(四) 「译文」| 结论(五) ","date":"2020-06-07T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/hygon-cpus-2/","title":"「译文」| 我们的海光系统：8核 Dhyana 和双32核 Dhyana Plus(二)"},{"content":"从阮老师的一篇 周刊 中发现了这篇文章，感觉很有趣的样子。原文链接在这里：Testing a Chinese x86 CPU: A Deep Dive into Zen-based Hygon Dhyana Processors，以下为译文。\n早在 2016 年，AMD 通过一系列合资企业和创建公司，将其第一代 Zen x86 处理器的设计许可销售给中国。此举同时达到了双方的目的：中国想要一个高性能的 x86 计算的本土化解决方案，而当时的 AMD 需要资金注入。最终结果就是海光 Dhyana 系列的处理器，其应用范围从商业用途扩大到了服务器用途。由于它基于 Zen 1 的设计基础，因此其性能可以看作和 Ryzen 1000 以及 Naples EPYC 是处于统一水平线的，而且西方还没有人公开测试过该硬件。此次多亏了与朋友 Wendell Wilson 在 YouTube 频道 Level1Techs 上的合作，我们才得以对海光 CPU 进行首次的全面评测。\n让我们从头开始 x86 处理器有两、三个主要制造商：Intel，AMD 和 Via/Centaur。Inter 和 AMD 在高性能计算领域都已经竞争了数十年，但有许可限制存在因而没有市场其他竞争者。由于关乎 x86 架构的专利，Intel 不希望其他任何人进入，分食市场份额，因为这会影响其主导地位，更复杂的是，所有相关人员目前正在使用的都是 AMD 的 64 位 x86 版本。这就使得 Intel 和 AMD 之间联系非常紧密。另一方面，Via/Centaur 在亚洲的市场份额很小，并且缺乏前沿的高性能竞争对手，因此它和老牌对手争夺市场势在必行。\n对于那些从未关注过 AMD 的人来说，该公司曾经历了许多风风雨雨。当时在开发 Bulldozer CPU 架构期间，耗资巨大，性能却不是很好，而同一时期的 Intel 在笔记本电脑，台式机，商用和企业等所有领域均取得了长足的进步。Intel CPU 的设计及其市场主导策略，再加上缺乏领先的竞争产品，以及对图形公司 ATI 的收购，AMD 几近破产。直到在前首席执行官 Rory Read 领导下，AMD 才开始稳定下来，并且在现任首席执行官 Lisa Su 博士的主持下，将大量资源重新投入到 x86 CPU 设计中。一方面，AMD 的债务高于其实际资产，甚至不得不出售其总部，并从业主那里租回建筑物，以此来维持下去。\n这种“活下去”策略的另一个要素是对 AMD x86 IP 的转授权，最终使得中国制造出了海光 Dhyana x86 处理器。之后有的人说这是 AMD 活下去的关键点，现在大家普遍认为，在最初的2.93亿美元的交易中，这份转授权使得 AMD 获得了大约2亿美元，直到美国实体名单禁令出现。当时，AMD 已经凭借其 Ryzen 1000 系列处理器迅速进入了消费市场，该处理器提供了八个具有适度竞争性能的内核，同时在性价比上胜过了 Intel，这使得 AMD 有足够的资金再次加大其关键领域的投资。第一代 Ryzen 产品组合是成功的，并且转授权的存在最终也为 AMD 提供了更多的安全网。\nAMD 的尽职调查 简单来讲就是“AMD 已为其 x86 设计之一授予 IP 许可”，尽管在之后的大多数时间里这听起来仍然显得不大真实，如果 AMD 或 Intel 知道出售其 CPU 设计有这么大的利润，那么为什么直到 2015/2016 年才这么做？虽然这里面显然有 AMD 的钱，但它并没有违反任何 Intel-AMD 许可协议。而且最重要的是，它没有违反美国有关高性能计算知识产权出口的任何法律。\n最后一点最为重要，美国政府根据来自 Intel，AMD 或其他厂商的 CPU 的性能为其评估价值指数。这种指数是根据 CPU 每秒浮点运算次数以及其能力的某种加权综合而来，超过特定阈值的产品会被认为过于强大，无法在某些市场上出售。其范围包括半定制处理器，其中 AMD/Intel 搞的核心数量/频率，并包含了非线路图的部分。\nAMD当时发表了以下声明：\n从2015年开始，AMD 在进入合资企业之前，积极地向美国国防部，商务部和美国政府内的多个其他机构地介绍情况。AMD 没有收到任何机构对合资企业的成立或技术转让的反对，这些技术的性能要比其他商用处理器低。实际上在成立合资企业和转让技术之前，商务部就已经通知 AMD，它所提议的技术哪些不受限制，哪些禁止转让。有了这些明确的反馈，AMD 便得以继续与合资企业合作。\nAMD 已经联系了国防部和国防部，以及所有其他部门，并且已经得到了批准。新的微架构被认为性能很低，不会影响到任何出口禁令。在“提议的技术中哪些不受限制，哪些禁止转让”这一点，ADM 也得到了非常明确的回复，这是一个非常明确的声明。在这一点上，很显然 AMD 可能已经提交了一个这个 IP 的修改版本到了美国的相关部门，而不是我们在 Ryzen 1000 系列中看到的微架构。\n合资企业中的合资企业 所有这一切的最终目标是能够向中国提供 AMD 的 Zen 1 CPU 版本，该版本可以称为“中国版”，而非“美版”。与过去十年或更长时间的情况一样，中国希望减少对美国技术和知识产权的依赖，以实现自给自足。AMD 合资企业实际上是通过一种迂回的方式来实现为海光 Dhyana 的设计工作的。\n负责监督该业务的合资企业的名称为 THATIC，即天津海光先进技术投资有限公司。该公司由 AMD 和包括中国科学院在内的多家中国公共和私营公司共同持有，其中 AMD 至少持有51％的股份。\n为了执行所需的步骤，创建了两家公司——这些公司将由 AMD 和天津海光(THATIC) 共同持有（注意，AMD也持有天津海光(THATIC) 的一部分）。这些公司是：\nHMC：海光微电子有限公司 Hygon：成都海光集成电路设计有限公司 在这些公司中，\nAMD 持有海光微电子51％的股份，天津海光(THATIC)持有剩下的49％的股份。 AMD 持有海光集成电路30％的股份，天津海光(THATIC)持有70％的股份。 这些公司在芯片链条中扮演着不同的角色。 海光微电子与 AMD 合作进行设计，并与 GlobalFoundries 合作进行制造，海光集成电路与海光微电子合作添加协同设计元素和包装，然后将其出售到中国。\n核心 IP 的授权不同于 x86 的转授权 当天津海光(THATIC)合资企业成立时，人们产生了很多困惑。最主要的问题是，AMD 是否以某种方式将完整的 x86/x64 架构许可给了一家中国公司，从而允许他们构建功能全面的定制化 x86 CPU，将 Intel 和 AMD 挤出市场。但其实这家合资企业不是这种情况。\nAMD 所做的是向海光微电子许可了单核设计以及 SoC 布局。从这一点来看，AMD 已正式“放手”，但是 AMD 工程师和高管参与了 海光微电子，因此从技术上讲，他们仍然有参与。通过这些核心设计和 SoC 布局，海光微电子将设计平面图（而不是RTL）发送给海光请求更新。海光集成电路向海光微电子提交更新，之后该更新由 AMD 工程师批准或拒绝。然后海光微电子将所更改的地方整合出来，然后从海光集成电路接受订单以进行制造。在海光集成电路的订单下，海光微电子带着设计去 GlobalFoundries 并订购所需的硅。最后海光微电子将硅片卖给海光集成电路，后者将 CPU 封装成各种配置并将其出售到中国市场。在这其中海光集成电路也会帮助设计新平台的主板。\n细分的话主要为以下步骤：\nAMD 通过建议的 SoC 布局将核心设计许可给海光微电子 海光微电子为海光集成电路提供设计平面图 海光集成电路为海光微电子提出修改意见 在海光微电子的 AMD 工程师对其更改批准或拒绝 海光微电子提供最终的设计平面图给海光集成电路，准备接受订单 海光集成电路向海光微电子订购晶圆/硅芯片 海光微电子通过 GlobalFoundries 进行制造 GlobalFoundries 根据要求在其新设计上达到特定的频率/良品率 海光微电子将完成的硅片卖给海光集成电路 海光集成电路将硅片进行包装 海光集成电路将成品的 CPU 卖到中国市场 由于海光微电子是唯一一个海光集成电路的提供者，因此尽管底层设计来自 AMD，但仍然可以将此 CPU 归类到“中国版”。\n当 AMD 宣布创建天津海光(THATIC) 时，它谈到了将其 Zen 核心 IP 分包许可给合资企业。它被描述为多年的合作伙伴关系，但是在一次贸易展览会上证实，AMD 仅对其 IP 的单个版本进行分许可，并且没有计划对任何其他作品进行分许可。\n当时，假定 AMD 对和已发布的 Ryzen 1000 系列处理器、EPYC Naples 处理器相同版本的 Zen 核心 IP 进行了再授权。但是，正如本次审查的一部分所示，AMD 似乎在对合资企业进行设计之前就对其设计进行了一些性能更改——特定指令的吞吐率低于我们直接从AMD处理器中看到的吞吐量。\n不仅如此，在步骤清单中，第四点最能体现出这种倾向。海光集成电路被要求针对中国市场进行特定更改。在每个人都在“为中国政府创建后门”而奋斗之前，我们知道由于 Linux 内核更新而进行的一些修改。与西方国家相比，在中国使用了不同于西方的椭圆密码算法，因此更改了它们的硬件加速功能，并使用了不同的微码来启用这些功能。该审查的一部分是尝试发现是否还有其他更改。\n这种蛛网布局的最终产品是海光 Dhyana x86 内核，这是“针对中国的更新的 Zen 内核”，海光集成电路将其打包为嵌入式，商业和企业系统使用。我们在 Computex 2018 上看到中国服务器供应商中科曙光参与了该项目，该公司展示了其基于32核海光 CPU 构建的服务器。根据在线基准数据库，还看到了针对8核商业和嵌入式版本的提交，这些版本可能用于政府和教育部门的部署。\n值得一提的是，我们曾多次问过 AMD 海光 Dhyana 设计与原始 Zen 1 内核有什么不同。但我们总是被简单地告知 “AMD” 在这一切中扮演的角色有限，如果我们能弄到一个海光CPU，如果我们能够在测试中发现两者之间设计的差别，他们可能会考虑承认或否认。尽管 AMD 对于 Ryzen 和 EPYC 系列处理器很开放，但是在谈论海光时却与之形成了鲜明的对比。\n首批海光 CPU 于2018年进入中国市场，但几乎无法采购。海光 CPU 从未打算出售给西方国家，而且 CPU 的性质和与之打交道的公司意味着我们能找到的人都不会对我们的样品感兴趣。\n2019年，美国建立了中国公司的“实体清单”，被视为对美国市场的潜在安全威胁。结果，与这些公司（在美国创造至少25％的产品或IP）的任何商业互动均受到限制。天津海光(THATIC) 是名单上的公司之一，这意味着 AMD 不再被允许向合资企业授予任何其他 IP 许可。天津海光(THATIC) 仍然可以访问其获得许可的原始 IP，并且可以继续对其进行改造（尽管没有AMD的协助），而且，该禁令还限制了海光微电子从 GlobalFoundries 订购硅，如果不取消限制，将会使整个流程将陷入困境。\n非常感谢 Usman Pirzada 出色的写作，文章中许多地方都以此为依据，以及来自 AMD 的 Drew Prairie，他为 AMD 的布局提供了更多背景信息。\n与 Wendell 合作：采购海光CPU 对于本次复盘，我们能够测试在 Wendell Wilson 实验室中远程安置的两个系统，他是 Level1Techs YouTube 频道的主持人。我们都收到了消息，有人询问我们是否要购买系统，收集到的是来自美国海光集成电路或中科曙光子公司的旧工程样本，这些子样本正在进行制造后分析和性能测试。该子公司现已解散，实体名单禁令产生了连锁反应，并且该公司内的工程硬件（我们从未听过）被卖掉了。因此我们有机会借用了两个解散后的系统。由于位置原因，Wendell 提供了容纳它们的空间，并拍摄了一些图片和视频，而我们俩都制定了性能基准。来自广受欢迎的 YouTube 频道 LinusTechTips 的 Linus 团队也受邀参加——您可以在 此处 观看制作的视频。\n最终，我们最终使用了两种系统进行测试——一台商业版 “海光 Dhyana” 和一台企业版 “海光 Dhyana Plus”。\n商业版系统看起来像普通的8核 Ryzen 1000 系列系统，但是它实际上是球栅阵列封装设计，无法升级。事实上，这似乎是早期的工程示例，因为 CPU 甚至都没有关联的数字。挂载点这里也有一些有趣的地方，之后我们将在适当的时候进行介绍。\n企业版系统是一个双32核海光2U 服务器。这些 CPU 表示它们是“7185”型号，我们知道这是海光提供的最高内核数，也是性能最高的32核部件之一。将其中两个放入服务器看起来非常像 2P EPYC Naples 设计。\n值得一提的是，我们在贸易展览会上确实见过海光处理器，您可能会在底部看到一些中文文字。有趣的是，我们翻译了CPU的右下角。直译是：\n“用芯片计算未来”\n但是，标语中使用的第二个字符是谐音，可以翻译为:\n\u0026ldquo;用热爱计算未来”\n在接下来的几页中，我们将更详细地研究这两个系统，然后看看和我们在过去几年中已经测试过的 Ryzen 1000 和 EPYC Naples 处理器在内核和 SoC 级别上有哪些差异之处。\n(未完待续\u0026hellip;)\n相关篇章 「译文」| 我们的海光系统：8核 Dhyana 和双32核 Dhyana Plus(二) 「译文」|海光CPU：中国版的加密方式，不同的性能(三) 「译文」| 基准测试：Windows(四) 「译文」| 结论(五) ","date":"2020-05-26T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/hygon-cpus-1/","title":"「译文」| 测试中国的 x86 CPU：深入研究基于 Zen 的海光 Dhyana 处理器(一)"},{"content":"很喜欢 The night king 这首曲子，在 game of thrones 第八季里着实被惊艳到了，之后在油管上看钢琴版看了好多遍。迫于贫穷，买不起钢琴，只能拿这个 自由钢琴 过过瘾，于是跟着这个 视频 搞了个谱子。（虽然只跟了视频的前半段:(\n由于 自由钢琴 本身键位不多，而且在同时按下多个按键时无法同步发出声音，毕竟还是和真正的钢琴有较大区别，因此原视频中只跟了右手，右手有按两个按键以上的，我都自作主张裁剪成了两个按键，尽量保持音色与原视频相似。虽然整体效果不如原视频远甚，不过用来娱乐足够了。\n注：中括号[]里的为同时按下的键\n注：～ 代表延音\n注：对于需要同时按下两个按键可以先尝试只按第一个键，毕竟一旦碰到需要操作比较多的，很容易打断连贯性。（只针对手残党，大佬请无视）\ne~ ette~ [ep]~ [ep][ts][ts][ep]~ [pf]～ pss[pd]～ [ps]～ pss[fu]～ [fj]～ ett[yp]～ [ps]～ ippu～ tttr~ ttte~ eeeq~ qq0~ [ts][ts][ts][ar]~ [ts][ts][ts][pe]~ [pe][pe][pe][iq]~ [iq][iq][iq][u0]~ [yE] [ye]~ ette~ e~ ette~ e~ ette~ e~ ettr~ [ep]p~ [ep]tt[ep]~ [ep]p~ [ep]tt[pr]~ [ep]p~ [ep]tt[ep]~ [ep]p [ep]tt[pr]~ [ep]up[ep]~ [ep]~ [ep]~ [ep]tt[pr]~ [ep]~ [ep]~ [ep]up[ep]~ [ep]~ [ep]~ [ep]tt[pr]~ [ep]~ [ep]~ [pf]up[ep]~ [ep]up[ep]~ [pd]tt[rp]ew[ep]tt[rp]~ [pf]up[ep]~ [ep]up[ep]~ [pd]tt[rp]ew[ep]tt[rp]~ [pj][sl][sl][ak][pj][oh][pj][sl][sl][pj] [pj][sl][sl][ak][pj][oh][pj][dz][dz][pj] [pj][sl][sl][ak][pj][oh][pj][sl][sl][pj] [pj]~ [sl][sl][pj]~ ette~ ette~ [ig]~ [ig][ig][ig][uf]~ [ig]~ [ig][ig][ig][yd]~ [yd]~ [yd][yd][yd][PE]~ [PE][PE][PE][ep]~ ","date":"2020-05-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-night-king-piano-sheet/","title":"The night king piano sheet"},{"content":"本文是我开始学习 Elasticsearch 系列的第一篇笔记，计划先以我初学者的状态对 Elasticsearch 的看法以及目前学到的知识做个概览性的总结，之后的系列再单独对其细节专门去学习和记录，留备后期翻阅查看。\n注：截至本文发表前，Elasticsearch 的版本号为 7.6.1，本文的内容也建立于此之上。\nElasticsearch 是什么？ 根据官方文档和 Wikipedia 的说法：\nElasticsearch是一个基于Apache Lucene构建的分布式的开源搜索和分析引擎，可以处理所有类型的数据，包括文本，数字，地理空间，结构化和非结构化的数据。\nElasticsearch 有什么用？ 应用程序搜索 网站搜索 企业搜索 记录和日志分析 基础架构指标和容器监控 应用程序性能监控 地理位置分析和可视化 安全分析 商业分析 了解到此就可以了，想要更深入的了解可以去翻阅官方文档\nElasticsearch 的配置 在此跳过了 ES 的安装，是因为在我的安装体验里，并没有遇到什么阻力，因此无需记录。关于下载安装，可以查阅此页面\nES 的配置主要是修改 elasticsearch.yml，打开这个文件，文件中已经列出了大多数重要的设置，划分了几个区域，分别是 Cluster，Node，Paths，Memory，Network，Discorey，Gateway，Various\n关于路径的设置 在生产中一定要设置其日志和数据的路径。如果使用默认路径，在升级 ES 的时候很可能会被删除掉。\n关于集群名称的设置 不要在不同的环境中使用相同的名称，否则新节点可能会加入错误的集群中。\n关于网络的配置 默认情况下，Elasticsearch 绑定的是环回地址，例如：127.0.0.1，[::1]，这在单台服务器下是没问题的。但如果要和其他服务器上的 ES 组成集群，需修改 network.host。例如：\nnetwork.host: x.x.x.x 注：一旦为 network.host 设置了自定义配置，ES 就会认为你从开发模式转移到了生产模式，会自动将系统启动检查从警告升级为异常。见 Development mode vs production mode\n关于 Discovery 的配置 为使集群中各个 ES 之间可见，应设置 discovery.seed_hosts：\n以下引用官网的例子：\ndiscovery.seed_hosts: - 192.168.1.10:9300 - 192.168.1.11 - seeds.mydomain.com - [0:0:0:0:0:ffff:c0a8:10c]:9301 注: 如果不加端口号，则默认是9300。\n当首次启动 ES 集群时，会有一个引导步骤，它确定了首次选举中来对其票数进行计数的有主要资格节点的集合。这个“计数权”在开发模式中是由节点自动确定的，但却是不安全的。若在生产模式中，应当指定 cluster.initial_master_nodes，具体配置可详见文档\nES 的启动与关闭 一般而言，ES 可使用 ./bin/elasticsearch 来启动，但我们往往需要它作为一个守护进程来运行。除了使用 nohup 之外，ES 本身有自带的方法：./bin/elasticsearch -d -p pid\n注：-p 选项将进程记录到文件中，因此此处的 pid 应为文件路径。\n一旦启动后，可以通过 curl localhost:9200 来获取 ES 的相关信息。\n若开启了集群，可以通过 curl -X GET \u0026quot;localhost:9200/_cat/health?v\u0026amp;pretty\u0026quot; 来查看节点信息。可以看到，多节点副本可用的情况下 status 为 green，若只有单节点的情况下执行，则 status 为 yellow，但也是正常的，只是没有副本而已。\n关闭时，只需 pkill -F pid 即可。或者使用更通用的方法 ps -ef | grep Elasticsearch 或者 jps | grep Elasticsearch 来获取进程号。\n参考资料 Elasticsearch Wikipedia Elasticsearch ","date":"2020-03-23T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/study-notes-of-elasticsearch-1/","title":"Elasticsearch 入门 | 一"},{"content":"当在 debian 的仓库中查看 openbsd 版本的 netcat 时，会看到描述中有这样一句话：“TCP/IP swiss army knife”，被誉为 TCP/IP 的瑞士军刀，可以想象，这可以说是很高的赞誉了。netcat 当年还是2001年，2003年，2006年的 insecure.org 几次安全工具的投票中的前五名，它不仅是一个非常优秀的软件，体积还很小（只有几十KB），源代码 也很少，以至于有很多人去重写，出现了很多变种。比较知名的有openbsd版本，gnu版本，nmap社区版本ncat。\nnetcat 最初的作者是一个名为“Hobbit”的人在 1995 年 10 月 28 号以源代码的形式发布的。在其官网还能找到一些其他信息以及由“Hobbit”最后更新于2007年的那个版本。在本文中，我使用的是 openbsd-netcat，因此以下使用记录如无特殊说明默认都是 openbsd 版本的 netcat\n首先来看一下 nc -h 里平时使用频率比较高的一些选项：\nh：输出帮助信息 k：可以使客户端重复连接，一般配合 l 来使用 l：开启监听模式，作为服务端。若不加该选项则默认为客户端 n：不对命令行中的host进行域名解析。简单来说就是host写为x.x.x.x时加上该选项，写为域名时不加 p：指定端口 v：输出详细信息 z：通常用于端口扫描，仅判断是否能够连接，不进行数据通讯 开启服务 $ nc -l -k -p [port] 作为服务端，监听端口，开启服务。假设客户端通过 nc [ip] [port] 连上服务端，当断开客户端，服务端也会停止，加上选项 k 可以使其保持开启状态。这个是挺常见的用法，使用频率挺高，例如在flink的官方教程就用到了这个。\n测试端口 $ nc -nv [ip] [port] 例如某个远程主机上开启了某个端口，这样做可以测试端口是否能连上，若其中的 ip 的位置为域名，就不需要加 n 了。\n端口扫描 $ nc -znv [ip] [port-port] 2\u0026gt;\u0026amp;1 | grep succeeded 可以用来做渗透测试。\n文件传输 首先在接收端开启监听：\n$ nc -l -p [port] \u0026gt; [filename] 然后在发送端发送文件:\n$ nc [ip] [port] \u0026lt; [filename] 这样传输文件的好处是不需要应用层，直接在传输层层面传输的，相比于通过应用层的软件之间的传输，性能上会有优势。假如从本机要传文件到开启了nat模式的虚拟机中，由于此时虚拟机对于宿主机的访问是单向的，因此可以先在虚拟机上配置一个端口转发，然后从本机 nc localhost [port] \u0026lt; [filename] 。注：传输过程中没有进度条，因此需要重新开一个 terminal，自行对比文件的大小判断是否发送完后，然后在发送端 ctrl+c 即可。\n后记 除了以上的常见操作外，netcat还能配合一些其他命令做到更多高端操作，诸如端口转发，代理转发，备份系统，开启后门等等，更多操作可以参考编程随想的博文——扫盲 netcat（网猫）的 N 种用法——从“网络诊断”到“系统入侵”。值得一提的是开启后门的选项 -e 在 openbsd-netcat 被删掉了，可能是作者觉得过于危险，但是在其他很多变种中这个选项还有保留。虽然 -e 在 openbsd-netcat 中被删除了，但是还是可以通过创建命名管道的方法间接达到 -e 的作用：\n$ mkfifo [name] $ cat [name] | /bin/bash 2\u0026gt;\u0026amp;1 | nc -l -p [port] \u0026gt; [name] 这可能也是编程随想的博客中有提到但并未透露的“间接的方式”。\n","date":"2020-03-16T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/netcat-note/","title":"netcat 的使用笔记"},{"content":"前段时间，在阮一峰老师那里看到了GitHub Actions 入门教程，于是自己也跑去申请了体验资格，然而玩了一下感觉太复杂就放弃了。时隔数日，Github Actions 正式发布了，阮老师又发布了一篇关于此的文章：GitHub Actions 教程：定时发送天气邮件，这又让我想起了这个功能，于是决定重新捡起来。\nGithub Actions 对于个人用户来说确实是一个很棒的东西，因为它确实可以部分取代服务器，每个虚拟机的配置也足够：\n2-core CPU 7 GB of RAM memory 14 GB of SSD disk space 但为什么说“部分”呢？因为它还有一些限制，以下引用来自 github：\nYou can execute up to 1000 API requests in an hour across all actions within a repository. Each job in a workflow can run for up to 6 hours of execution time. 如果需求不高，只是拿它来跑一些定时爬虫任务什么的还是很香的。\n本次阮老师的文章里面用到了一个非常有趣的项目：wttr.in，于是我又去找了一些类似的好玩的项目：\ncheat.sh rate.sx 在这个项目里，我使用 rate.sx 来每天向我发送各种币的估值信息以及比特币的估值曲线：\n参考 rate.sx 的 README，直接获取各币种估值：\ncurl rate.sx 还可以获取单个币种的估值曲线如btc：\ncurl rate.sx/btc 接下来配置 actions，在项目中创建文件夹 .github/workflows，yml 配置文件必须放在 workflows 文件夹下：\nname: \u0026#39;Github Actions Bitcoin Bot\u0026#39; on: push: schedule: - cron: \u0026#39;0 20 * * *\u0026#39; name： workflow 的名称 on： 任务触发条件 以上触发方式为push以及定时任务，定时任务将在 UTC 时间 20 点执行，也就是北京时间 4 点，详情见文档。\nruns-on: ubuntu-latest steps: - name: Checkout codes uses: actions/checkout@v1 - name: Get Result run: bash ./bitcoin.sh runs-on: 运行环境，官方目前提供了四种虚拟环境：Windows Server 2019，Ubuntu 18.04，Ubuntu 16.04，macOS Catalina 10.15 uses: 所使用的其他 actions，更多可见 GitHub Actions 接下来是发送邮件:\n- name: Send mail uses: dawidd6/action-send-mail@master with: server_address: smtp.163.com server_port: 465 username: ${{secrets.MAIL_USERNAME}} password: ${{secrets.MAIL_PASSWORD}} subject: Bitcoin Rate Report body: file://result.html to: mapleblue2007@gmail.com from: GitHub Actions content_type: text/html 以上的 username 和 password 可在仓库的 Setting -\u0026gt; Secrets 添加，还有更多用法可见官方文档。\n发送邮件的用法可见 dawidd6/action-send-mail\n注： 开启 163 邮箱的 POP3/SMTP 服务，原来的密码处应填写为授权码。\n参考资料 https://help.github.com/en/actions https://github.com/ruanyf/weather-action https://github.com/dawidd6/action-send-mail ","date":"2019-12-24T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/send-mail-with-bitcoin-rate-everyday/","title":"使用 Github Actions 每天自动发送比特币的估值邮件"},{"content":"开始填坑第二篇笔记，没想到这一隔就是将近四个月/笑。第一篇在这里：RabbitMQ 学习笔记(1)\n对于 Spring AMQP，消息默认是持久化的，前提是消息到达的终端队列也必须是持久的。尽管是持久化的，但是在消息接收的短时间内并未保存在磁盘上，而是在内存里。\nRabbitMQ 有两种消息调度方式，一种是其默认的循环调度，即每个 consumer 都会收到相同数量的消息。另一种是公平调度，为 Spring AMQP 的默认配置。Spring AMQP 中 AbstractMessageListenerContainer 定义的 DEFAULT_PREFETCH_COUNT 值为 250,如果将其设置为 1,则将会变为循环调度。\nRabbitMQ 不指定 Exchange 也能发送到 Queue，是因为有默认的 Exchange，可使用 sudo rabbitmqctl list_exchanges命令查看。当使用默认的 Exchange 的时候，每个 Queue 都会以自己的名字作为 routing key 自动绑定到默认的 Exchange。一般情况下，我们会根据情景选择 Exchange 自行绑定来进行使用，以下列举出几个常见的 Exchange。\nFanout exchange 这种 Exchange 可以一次性将消息发送到多个 consumer，也称为广播。但是无法灵活的控制消息发送，例如只发送到某个 consumer。此时就出现了另一个 Exchange，叫做 Direct exchange\nDirect exchange 可以发现，它可以在绑定 Queue 时多了个 .with(routing key) 选项，用以指定某个 routing key，发送消息时指定这个 routing key，消息便会被 Exchange 转发绑定的 Queue 中。但它仍然有局限性，就是不能以多个条件进行路由，不够灵活，因此 Topic exchange 出现了。\nTopic exchange 它的 routing key 是以多个单词组成的，单词之间以 . 隔开。因此我们就可以使用“通配符”来匹配，有以下两种“通配符”：\n* 可以代替一个单词 # 可以代替零个或多个单词 可以看出，Topic exchange 是灵活度最高的，它甚至可以“退化”为 Direct exchange 和 Fanout exchange\n由于它们使用起来都大同小异，因此不再展示代码，测试的时候可以通过 sudo rabbitmqctl list_bindings 来确认是否绑定了自定义的 exchange。根据官方的文档，还有一种exchange 叫做 headers，tutorial 中没有介绍，以后有用到的时候再补吧。\n参考资料 RabbitMQ Tutorials ","date":"2019-11-29T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/study-note-of-rabbitmq-2/","title":"RabbitMQ 学习笔记 | 二"},{"content":"Spring Session 的配置非常简单，根据官方文档的说明，只需配置依赖及配置文件即可使用，无需任何代码相关的配置项。\n首先需要添加依赖项:\n\u0026lt;dependencies\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.session\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-session-data-redis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 然后在 application.properties 中添加以下内容：\nspring.redis.host=localhost # Redis server host. spring.redis.password= # Login password of the redis server. spring.redis.port=6379 # Redis server port. spring.session.store-type=redis # Session store type. 至此就配置完成了，现在就可以写两个简单的方法去测试一下。例如以下：\n@GetMapping(value = \u0026#34;/set\u0026#34;) public String setSession(HttpSession session){ session.setAttribute(\u0026#34;username\u0026#34;,\u0026#34;sherry\u0026#34;); return \u0026#34;ok\u0026#34;; } @GetMapping(value = \u0026#34;/get\u0026#34;) public String getSession(HttpSession session){ return (String) session.getAttribute(\u0026#34;username\u0026#34;); } 然后使用 maven package 将其打成 jar 包，若需要跳过测试，可使用 mvn -Dmaven.test.skip=true package，或者在 pom.xml 中添加插件依赖：\n\u0026lt;plugins\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;skipTests\u0026gt;true\u0026lt;/skipTests\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; 然后开启两个服务：\n$ nohup java -jar app.jar --server.port=8080 \u0026amp; $ nohup java -jar app.jar --server.port=8081 \u0026amp; 现在在 8080 里面 set，在 8081 里面 get，会发现也可以得到结果。\n这里顺便歪个楼，如果服务在前台启动，比如说启动 redis 时未将 redis.conf 中的 daemonize 设置为 yes。此时可以使用 CTRL + Z 将其挂在后台，但此时服务会被暂停，使用 fg 可以将其调回前台继续运行(若后台有多个，默认调回最后启动的那个)。也可以使用 bg 使其后台继续运行。使用 jobs 可查看在后台运行的服务列表。\n到此为止就算完成了，但还可以更进一步，在这两个服务前面加一层 Nginx 来做反向代理，还可以设置权重。首先来修改 nginx 的配置文件，一般来说需要修改 nginx.conf，由于我现在的环境是 debian，有一个默认的配置文件位于 /etc/nginx/sites-enabled 下的 default 文件，不同的发行版文件目录结构可能不大一样，可以根据自身情况自行查找。可根据以下示例来写：\nupstream wanmei.ml{ server 127.0.0.1:8080 weight=1; server 127.0.0.1:8081 weight=2; } server { listen 80 default_server; listen [::]:80 default_server; server_name localhost; location / { proxy_pass http://wanmei.ml; proxy_redirect default; } } 然后 nginx -s reload 重新加载配置文件。现在再来访问此服务器的 ip 地址，流量就会经过 nginx 了，可以查看位于 /var/log/nginx 下的 access.log 日志进行确认。\n参考资料 nginx documentation 扫盲 Linux＆UNIX 命令行——从“电传打字机”聊到“shell 脚本编程” ","date":"2019-11-23T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/note-on-using-spring-session/","title":"Spring Session 使用笔记"},{"content":"最近切换到了 i3gaps，发现触摸板的 tap to click 的功能不起作用，只有按键和二指滑动可用。看了下 Arch Wiki 后，发现只需要加一个配置文件就可以了。\n在路径 /etc/X11/xorg.conf.d/ 下创建例如 30-touchpad.conf 这样的配置文件，并其中写入如下配置项：\nSection \u0026#34;InputClass\u0026#34; Identifier \u0026#34;touchpad\u0026#34; MatchIsTouchpad \u0026#34;on\u0026#34; Driver \u0026#34;libinput\u0026#34; Option \u0026#34;Tapping\u0026#34; \u0026#34;on\u0026#34; Option \u0026#34;TappingButtonMap\u0026#34; \u0026#34;lrm\u0026#34; Option \u0026#34;NaturalScrolling\u0026#34; \u0026#34;false\u0026#34; Option \u0026#34;ScrollMethod\u0026#34; \u0026#34;twofinger\u0026#34; EndSection 注：在有些资料中 Driver 项可能是 synaptics，这是旧的驱动，已经不再更新了。\n上方的配置项有些可根据个人习惯来设置，例如：NaturalScrolling，TappingButtonMap，ScrollMethod\u0026hellip;它们还有一些其他的选项，可参考 libinput - libinput-based X.Org input driver\n参考资料 archlinux libinput libinput - libinput-based X.Org input driver ","date":"2019-11-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/tap-to-click-not-working-on-i3gaps/","title":"i3gaps 上触摸板的使用"},{"content":" Mozilla 宣布了 Test Pilot Program 回归，推出了 Firefox Private Network Beta 服务。你可以称这是一个 VPN 服务，但它实际上是一个 HTTP/HTTPS 代理，由 Mozilla 的合作伙伴 Cloudflare 运营，目前只对美国桌面版用户提供，暂时不会收费。Mozilla 称，Firefox Private Network 是一个扩展，向用户提供一个安全加密的访问 Web 的通道，通过测试 Mozilla 将根据用户需求探索不同的价格选项。使用该服务需要有一个 Firefox 账号。\n以上转发自 Solidot.\n首先需要准备一个美国 IP，然后打开链接，安装扩展。\n美国 IP 喜 +1，官方出品安全性应该也没问题，美滋滋。\n","date":"2019-09-13T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/try-firefox-private-network/","title":"试用 Firefox Private Network"},{"content":"最近遇到了一家初创公司，在公司不到两天的时间里，看到了从老板不断的招人到无法留住员工，再继续招人的死循环过程。其创业过程犯了诸多错误，因此我想把我的想法分享出来，抛砖引玉，也希望能给即将进入软件行业的创业者一点参考。\n老板完全不懂这个行业，仅仅根据道听途说的一些名词，认为自己足够了解，要亲自指挥，提出的问题无法切中要点，无法听取意见，不能正常沟通。 公司基础软硬件设施缺乏。只想招几个人来实现自己的 idea(对标国内某知名公司 APP)，希望速成，完全不考虑复杂性。 根据天眼查上的信息得知，是第一次开公司，注册资金写的x万(x\u0026lt;5)，疑似不懂认缴制度，就“量力而为”了。(对于员工来说这是个风险点) 完全不懂如何管理公司，没有详细明确的开发流程。不会主动告诉求职者公司的情况，规章制度，上班时间等一系列基本内容。(事实上也没有规章制度) 老板本人奇装异服，杀马特造型。(女性，目测40+，只会给人带来不专业，不靠谱的感觉) 不谈福利待遇，只谈干活。还会拿出马云刘强东当年”案例”加以说明。(不提后半句还只是个丑恶的资本家形象，说出后半句真是像极了骗子) 希望用低工资招到高级人才，招不到之后表示不打算招。(你这点钱，我很难帮你办事啊.jpg) 面完试还要试用两天证明能力后才能签劳动合同。(第一次见这样的公司，说明连两天的试用期工资都不想付。创业有风险，显然她不想承担任何风险) 公司上下只有老板一个人，所租的场地有多个公司，场地人不多，空口无凭，也无法得知是否由她所租，跑路成本极低。 以上都是从我一个普通求职者的角度来看。毕竟当局者迷，旁观者清，如果我站在她所处的位置，我也不知道能做到什么程度。接下来我来讨论一下我的看法，如果我是她，我会怎么做。\n首先第五条肯定不应该犯，给人的第一印象很重要。同时应该时常和员工沟通交流，让他们了解公司的情况，了解你是一个什么样的人。让他们看到你要做这个项目的决心，做好长期无法盈利的准备，证明不是临时起意，给他们信心，起码让他们相信你是一个可靠的人。 其次最重要的就是第七条，首先你不懂技术，如果真想做成项目，就应该找一个技术合伙人。或者重金聘请一个带有管理属性资深技术人，还要有着亲和力，领导力，和感召力。你们首先应该完善公司的基础软硬件设施，规章制度，福利待遇，软件开发流程等重要的东西。只有像一个正常的公司，才能打消员工的疑虑。然后充分放权给他，让他全权指挥。虚心听取意见，积极沟通交流，不懂的东西不要插手，让专业的人去干专业的事，只需隔一段时间向其了解情况即可。 针对她的错误，暂时想到这么多，这两点，在我看来基本上就可以了。\n为什么我会认为这两点很重要？\n第一点很重要不用多说，如果老板都不靠谱，那就没有进行下去的必要了。\n我想着重谈一下为什么我会认为第二点很重要。首先作为初创公司，规章制度不完善很正常，但不能没有。基础软硬件设施以及福利待遇是绝对不能缺的，起码应该达到市场水平甚至高于市场水平，毕竟大家都是要从什么都没有的情况下开始建立。关于需要一个有着优秀管理能力的技术大佬，这一点的非常重要，直接能决定公司是否能够存活。这是我这两天来亲身体会的得出的结论。\n对于初创公司来说，现金流是否充足？项目是否有市场前景？公司能存活多久？\u0026hellip;是摆在公司面前的问题。对于员工来说，关心的大概就是是否能发得起工资？毕竟大家萍水相逢，员工也有自己的生活，没有人会有和公司共进退的意愿和决心。如果无人领导，团队就是一盘散沙。这样的团队是很危险的，任何一个来自内部或外部的变量都会击溃整个团队。因此就需要这样一位有着优秀的管理能力人带领团队，能够起到安抚人心，凝聚人心的作用。就像国家需要众多公务员，宣传国家政策，起到维稳的作用一样。\n若是以前，我决不会提到，领导力，亲和力，感召力，凝聚力这样的词汇。在管理层大谈企业文化和凝聚力的时候，我也认为这些都是虚幻的，毫无意义的东西。真正的生产力，能给公司带来效益的，是底下真正在做事的人。但我发现我错了，他们才是灵魂所在，至少对于创业公司来说。\n两天的时间里，我亲眼见证了一个生态系统的建立-毁灭-再重建的过程。亲历了公司从招人，到员工之间的意见交换以及对老板的质疑到最终离开，就像一场博弈。我参与了一场完美的“实验”，它足够真实。同时也再次印证那句话：不要轻易进入一个你不了解的领域。\n","date":"2019-09-06T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/mistakes-that-entrepreneurs-should-not-make/","title":"创业者不应该犯的错误"},{"content":"关联文章 细数 Breaking Bad 经典片段 | 一 细数 Breaking Bad 经典片段 | 二 细数 Breaking Bad 经典片段 | 三 细数 Breaking Bad 经典片段 | 四 细数 Breaking Bad 经典片段 | 五 Season 4 Episode 1 \u0026ndash; Box Cutter 场景1：\n视频链接: https://www.youtube.com/watch?v=wGuHyy7qVcQ\nYou kill me, you have nothing.\nYou kill Jesse, you don\u0026rsquo;t have me.\n正如现在 Walt 所做的。之后的剧情里，Jesse 也会这样对他，即使双方之间产生了矛盾。\nSeason 4 Episode 2 \u0026ndash; Thirty-Eight Snub 场景1：\n视频链接: https://www.youtube.com/watch?v=JkPf7MSdm-A\n前传中的 Mike 是一个连路人被毒贩枪杀都要去复仇的、富有正义感的人，却在第四季中为 Gus 做事中出手杀掉了逃跑的工程师。这是不是也是一种 Breaking Bad 呢？\nSeason 4 Episode 4 \u0026ndash; Bullet Points 场景1：\n视频链接: https://www.youtube.com/watch?v=0v0VR6Kf7KQ\nGale 是个有趣的人，可惜死的太早了。再附一个最后的晚餐歌曲\n场景2：\n视频链接：https://www.youtube.com/watch?v=GpyUGiyeSFg\n\u0026ldquo;To W.W. My star, my perfect silence.\u0026rdquo;\nSeason 4 Episode 9 \u0026ndash; Bug 场景1：\n视频链接: https://www.youtube.com/watch?v=jM6pNUfT6fo\nYou asking me if I can cook Mr. White\u0026rsquo;s crystal? Without him?\nMe?\nThe junkie loser you were about to waste\nand dump in the desert a month ago?\nThis is your plan, huh?\nInvite me in your house, make whatever this is,\nbe my buddy and\u0026hellip; and make me feel\nimportant,\nthen get me to keep cooking for you\nafter you kill Mr. White.\nYou want to\u0026hellip; you want to talk like men?\nLet\u0026rsquo;s talk like men!\nYou kill Mr. White, you\u0026rsquo;re gonna have to kill me too.\n场景2：\n视频链接: https://www.youtube.com/watch?v=2bsxH-L1v7c\n没什么好说的，Breaking Bad 每个场景都很好看，忍不住放出来。\nSeason 4 Episode 10 \u0026ndash; Salud 场景1：\n视频链接: https://www.youtube.com/watch?v=4kyxZI1UCKM\nJesse 的气场。Gus 的表情好像要笑，一种很欣慰，很为 Jesse 骄傲的感觉。\nSeason 4 Episode 11 \u0026ndash; Crawl Space 场景1：\n视频链接: https://www.youtube.com/watch?v=xpgfENjlcQM\nLet Mr. White go.\nPay him off or fire him.\nDon\u0026rsquo;t kill him.\nYou know that won\u0026rsquo;t work.\nThen you\u0026rsquo;ve got a problem.\n不止在这里，在之后 S04E12 中 DEA 带人去洗衣店里，Gus 告诉 Jesse 这都是拜他的 Partner 所赐。Pinkman 仍然坚持他的立场。\nYou know, I get it.\nThe guy\u0026rsquo;s a complete and total dick,\nbut I can\u0026rsquo;t\u0026ndash;\nI\u0026rsquo;m not signing off.\nOkay?\nLike I said,\nif something final\nhappens to Mr. White,\nwe are going to have a problem.\n场景2：\n视频链接: https://www.youtube.com/watch?v=8-5DfdWrfsM\n在前传中，Gus 给 Hector 讲他小时候抓浣熊的故事，现在 Hector 就是他的浣熊。\n场景3：\n视频链接: https://www.youtube.com/watch?v=Jf8GaDkFm3E\n白老师演的真棒，笑声里充满了绝望。(莫名压上了韵)\nSeason 4 Episode 12 \u0026ndash; End Times 场景1：\n视频链接: https://www.youtube.com/watch?v=HutGXmWzZhA\nI have lived under the threat of death for a year now,\nand because of that,\nI\u0026rsquo;ve made choices.\nWalt- -Listen to me.\nI alone should suffer the consequences\nof those choices, no one else.\nAnd those consequences\u0026ndash;\nthey\u0026rsquo;re coming.\nNo more prolonging the inevitable. 好喜欢这段，白老师最终还是承认了这一年来都饱受死亡的威胁。\n场景2：\n视频链接: https://www.youtube.com/watch?v=ETNTqHAFam0\n这个也是一个很经典的片段，老白受到铃兰花的启示，开始了一系列杀死 Gus 计划。\n场景3：\n视频链接: https://www.youtube.com/watch?v=jUnx04T7e4U\n剧情按照老白的剧本发展，成功策反了他，白老师已经变身为大 Boss 了。\nSeason 4 Episode 13 \u0026ndash; Face Off 场景1：\n视频链接: https://www.youtube.com/watch?v=MybaTnzu9AA\n据说最后 Gus 半张脸走出房间的场景是拜托The Walking Dead的剧组搞得。\n场景2：\n视频链接: https://www.youtube.com/watch?v=WZOnmbXeZNs\n默契的合作，Partner 再现江湖！\n场景3：\n视频链接: https://www.youtube.com/watch?v=-X4wWbBGvtQ\nI won.\n结语 精彩的表演，紧张刺激的剧情，真是令人拍案叫绝。对老白即将到来的“Consequences”，不仅像一个石头一样重重地压在老白的身上，也压在观众的心上。当 Gus 死后，压抑低沉的氛围转变为轻松欢快的快节奏音乐，一切都变的云淡风轻，一切都将随风而逝。\n在天台上，Pinkman 告诉 Walt：\nSo Gus didn\u0026rsquo;t poison him after all.\nStill, he\u0026ndash;\nhe had to go, right?\nWalt 回道：\nYou\u0026rsquo;re damn right.\nGus had to go.\nPinkman 得知 Gus 并没有下毒后，反而有一些内疚，有些犹豫。善良如 Pinkman，他不知道杀死 Gus 是不是一件正确的事情，于是有了这段对话。在得到肯定的答复后，内心反而有了支持。纵观 Jesse 的过去，他一直都不是个主观意识很强的人。他希望得到别人的认可，当他独自制了一批货，去找白老师评价时，告诉白老师他严格按照步骤进行，仔细把控了每项指标，白老师告诉他他的货是个垃圾。当和 Mike 一起共事后，Mike 经常叫他 Kid，也很认可他，他觉得和 Mike 很亲近。\n总之，他没有白老师那样的心计，他的冲动和鲁莽也会被人利用，被人耍的团团转。他是个小人物，也是一个不可或缺的重要角色。\n参考资料 Breaking Bad ","date":"2019-09-01T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-classic-scene-of-breaking-bad-4/","title":"细数 Breaking Bad 经典片段 | 四"},{"content":"关联文章 细数 Breaking Bad 经典片段 | 一 细数 Breaking Bad 经典片段 | 二 细数 Breaking Bad 经典片段 | 三 细数 Breaking Bad 经典片段 | 四 细数 Breaking Bad 经典片段 | 五 Season 3 Episode 1 \u0026ndash; No Mas 场景1：\n视频链接: https://www.youtube.com/watch?v=5-8FB6k8jik\nWalt 真是个天生的演讲家，他的演讲总是有一种很舒服的感觉，节奏控制的很好。\nSeason 3 Episode 6 \u0026ndash; Sunset 场景1：\n视频链接: https://www.youtube.com/watch?v=s3zqUPoVmb0\n这段也很经典，Hank 将 Walt 和 Jesse 堵在车里的场景。\nSeason 3 Episode 7 \u0026ndash; One Minute 场景1：\n视频链接: https://www.youtube.com/watch?v=yp2G586zOEE\nWhat do you even care\nas long as you get what you want?\nRight?\nYou don\u0026rsquo;t give a shit about me.\n他们之间的贩毒史可以说并不是一帆风顺，总会遇到各种问题，当计划进展顺利时，俩人都非常兴奋，但一旦出现问题后俩人之间就会争吵不断，甚至还会打架，就这样一路走到了现在。就在 Walt 从最初的杀人都会找两三天理由的人，逐渐成长为 Jesse 口中杀人不眨眼的 “devil”。反观 Pinkman 还仍然是 Mike 口中的 “Kid”，在失去了很多东西后还会说出“你从来都没有关心过我”——这种像一个 Kid 说出的话。\n场景2：\n视频链接: https://www.youtube.com/watch?v=BBs_Tw-whVs\n这一段 Hank 超帅，要知道在前传 \u0026lt; better call saul \u0026gt; 那哥俩俩人端了一窝毒贩，很是犀利。在这里联手却被反杀。\nSeason 3 Episode 8 \u0026ndash; I See You 场景1：\n视频链接: https://www.youtube.com/watch?v=sl0tZDoLw6E\nHave fun!\nSeason 3 Episode 10 \u0026ndash; Fly 场景1：\n视频链接: https://www.youtube.com/watch?v=QY07i4CPJpQ\n据说建那个超级地下制毒室花了不少钱，在拍这一集的时候已经没有预算了，因此主角们的活动只能在这个制毒室展开。大家都在说 Walt 打了一整集的苍蝇，看着都要睡着了。不过我倒没这么觉得，在我不知道它是因为预算不足而被迫如此的产物之前，我依然看得很投入，依然期待接下来会如何发展。尤其是之后 Walt 提到在坠机前的一个晚上，在酒吧遇到了 Jane 的父亲，跟他聊到了家庭，他告诉 Walt 永远不要放弃你的家人。当然此时 Jesse 也不知道 Walt 说的家人就是他。之后在他意识逐渐模糊时告诉 Jesse 他对 Jane 事情很抱歉。我当时真以为他就这样告诉了 Jesse。然而没有，他睡着了。编剧安排的太巧妙了！\nSeason 3 Episode 12 \u0026ndash; Half Measures 场景1：\n视频链接: https://www.youtube.com/watch?v=IpJjBhd9uEc\n从最开始去那吸毒家庭要钱，家里只有个饿着肚子的小孩，Jesse 给他弄了点吃得，还耐心的陪他玩。当小孩父母回到家后，Jesse 还细心的把小孩送进里屋。还质问他们“你们算什么父母”。小孩的母亲杀掉他父亲后，Jesse 还哄他闭上眼睛，抱着他出了家门，不想让他看到这种事。之后遇到了 Andrea，当得知 Andrea 有个孩子时，也放弃了向他出售冰毒，Andrea 问他有没有冰毒时，Jesse 马上变得很生气，也同样问出了那句话“你算什么母亲”。直到现在 Gus 的手下利用小孩，在那种形势下他也拒绝握手言和，并站起来质问 Gus 的人品。\nJesse 一直在保护小孩，这可能与他的个人成长有关。他这个特点使得后期 Walt 利用它策反 Jesse 一起对付 Gus，但也最终导致了后期 Walt 的大型翻车现场。顺便说一句，Walt 的成长速度简直恐怖，如果不是愤怒，此时的 Jesse 根本不敢杀人，而且至今为止 Jesse 还没杀过人，而现在的 Walt 看起来近距离杀人也不会有很大的反应。\nSeason 3 Episode 13 \u0026ndash; Full Measures 场景1：\n视频链接: https://www.youtube.com/watch?v=KSSNXdNXcnw\n紧张又刺激，Jesse 听完毫不犹豫拿起枪就冲了出去，他们俩真是一对天生的 partner\n场景2：\n视频链接: https://www.youtube.com/watch?v=N3I6a_xDqAo\n这是 Jesse 第一次杀人，Gale Boetticher，他没做错什么，但是却必须死。\n附一个 \u0026lt; better call saul \u0026gt; 里的 Gale，真是很有趣的化学家，一如前传中的那样，喜欢唱，跳，rapper\u0026hellip;没有篮球。\n结语 本季从 Walt 开始和 Gus 合作到关系几近破裂，唯有利益关系使得各自还在勉强维持。本季中的 Jesse 从获得了爱情到之后的“had nothing”，最终使得 Jesse 戒除了吸毒。\n如果没有 Walt，Jesse 可能还会是一个和朋友厮混，时而吸毒，时而制造一些残次的冰毒的街头小混混，一个普通人，一个 “Kid”。他没有 Walt 那种坚忍，适应环境并不断成长的能力，他只能在愤怒的时候说出“你从来没有关心过我”。\n他和 Walt 都有各自的处事原则，而在内心深处又对对方都留有最基本的信任。因此即使病床上的 Jesse 愤怒的说它会揭发 Walt，而 Walt 仍然告诉 Saul 他不会这么做。这不止是因为他们之间都了解对方，也源于长久制毒以来所建立的信任。在之后的剧情中，Jesse 问 Mike，Gus 从他身上看到了什么？ Mike 回答说，我想可能是忠诚吧。\n参考资料 Breaking Bad ","date":"2019-08-29T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-classic-scene-of-breaking-bad-3/","title":"细数 Breaking Bad 经典片段 | 三"},{"content":"Breaking Bad 的电影要出了，后续剧情，哇，好激动！！\n关联文章 细数 Breaking Bad 经典片段 | 一 细数 Breaking Bad 经典片段 | 二 细数 Breaking Bad 经典片段 | 三 细数 Breaking Bad 经典片段 | 四 细数 Breaking Bad 经典片段 | 五 Season 2 Episode 1 \u0026ndash; Seven Thirty-Seven 场景1：\n视频链接: https://www.youtube.com/watch?v=2KjLjSD2yZA\n正如本集标题，$737,000，这是他们一家 10 年的生活费，剩余的房贷，两个孩子四年的大学学费。知道自己可能命不久矣，他希望临死前给家里留一笔钱，这也是最开始 walter white 制毒的目标和动力。\nSeason 2 Episode 2 \u0026ndash; Grilled 场景1：\n视频链接： https://www.youtube.com/watch?v=GVVtOYR7Do4\nDon Hector Salamanca 的第一次出场，他这个名字我觉得好听。Twitter 上还找到了这个2333，前传 \u0026lt; better call saul \u0026gt; 里面交代了他为什么变成这样。本集 Hank 和 Tuco 交火最终击毙了 Tuco。\nSeason 2 Episode 3 \u0026ndash; Bit by a Dead Bee 场景1：\n视频链接： https://www.youtube.com/watch?v=u3qBYJ2Qgvs\nCome on, this is bullshit!\nLook at this dude.\nHe doesn\u0026rsquo;t even know what planet he\u0026rsquo;s living on.\n这段也比较搞笑。\nSeason 2 Episode 6 \u0026ndash; Peekaboo 场景1：\n视频链接： https://www.youtube.com/watch?v=FF30TJPK3Lk\nWhere\u0026rsquo;s my money, bitch?\n附带一个采访 Aaron 的视频.\nSeason 2 Episode 8 \u0026ndash; Better Call Saul 场景1：\n视频链接： https://www.youtube.com/watch?v=dryYPhnvIWw\n终于出现了！Saul Goodman！原名 Jimmy McGill(全名：James Morgan McGill)，他哥哥 Chuck McGill(全名：Charles Lindbergh McGill)唱歌很好听，在前传 \u0026lt; better call saul \u0026gt; 中和 Jimmy 合唱的一首 The Winner Takes It All 很好听。\nSeason 2 Episode 11 \u0026ndash; Mandala 场景1：\n视频链接： https://www.youtube.com/watch?v=W5_HZ7d2xWc\n又一个 Boss 出场了，Gustavo Fring！随着自建销售网络的失败，最终老白找上了商人 Gus。出了一个坑，随后跳进另一个坑，老白此时不知道的是，死亡的阴影又将再次笼罩向他。\nSeason 2 Episode 12 \u0026ndash; Phoenix 场景1：\n视频链接： https://www.youtube.com/watch?v=-kyNBaoCvL8\n剧中 Walter White Jr. 给他父亲做的网站是真实存在的，还有 saul 的网站也是存在的，里面的细节真的很多。\nWalt 晚上在酒吧里遇到了 Jane 的父亲 Donald Margolis，真是奇妙，交谈中，Margolis 告诉他：\nFamily.\nFamily.\nYou can\u0026rsquo;t give up on them. Never.\n这使得 Walt 回去找 Jesse，推了推 Jesse，未能叫醒，反而她的女友 Jane 睡姿从侧卧被推开成了仰面朝上，Jane 被口中呕吐物呛到时，Walt 想要救她但最后还是停止了，Jane 最终因口中呕吐物窒息而死。\n结语 从另一方面来讲，入了 Gus 的坑也使得 Salamanca 家族的人没能杀掉他，也是好事。\n参考资料 Breaking Bad ","date":"2019-08-27T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-classic-scene-of-breaking-bad-2/","title":"细数 Breaking Bad 经典片段 | 二"},{"content":"关于栈和队列，有时会在面试题中看到诸如以下的问题：\n如何使用栈实现队列？ 如何使用队列实现栈？ 栈的特点是 last in, first out (LIFO)，而队列的特点是First-In-First-Out (FIFO)\n接下来根据和队列的特点开始分析一下，首先看第一个问题，要想用栈实现队列，则至少需要两个栈，假如用 stack1 和 stack2 分别表示这两个栈。思路如下：\n进入此 “队列” 时，需要先 push 进 stack1; pop 时如若 stack2 是非空的，则直接从 stack2 pop，如果是空的则需要将 stack1 中的元素全部 push 到 stack2 中，再进行出 pop 操作。\n以下是实现及测试代码：\npublic class StackToQueue { private Stack\u0026lt;Integer\u0026gt; stack1 = new Stack\u0026lt;\u0026gt;(); private Stack\u0026lt;Integer\u0026gt; stack2 = new Stack\u0026lt;\u0026gt;(); private void pushQueue(int num){ stack1.push(num); } private Integer popQueue(){ if(!stack2.empty() || !stack1.empty()){ if(stack2.empty()){ while (!stack1.empty()){ stack2.push(stack1.pop()); } } return stack2.pop(); } else { return -1; } } public static void main(String[] args){ StackToQueue stackToQueue = new StackToQueue(); stackToQueue.pushQueue(1); stackToQueue.pushQueue(2); stackToQueue.pushQueue(3); System.out.println(stackToQueue.popQueue()); System.out.println(stackToQueue.popQueue()); stackToQueue.pushQueue(4); System.out.println(stackToQueue.popQueue()); System.out.println(stackToQueue.popQueue()); } 第二题使用队列实现栈，同样使用 queue1 和 queue2 来分别代表两个队列， 这里偏个题，忽然间发现，里面还有一个 ArrayDeque 的实现，以前没有见到过，查了下资料发现是 jdk6 加的，具有双向的特性，队列和栈的特性集一身，还看到了篇 stack over flow 的提问，详情不再赘述，见文末参考资料。言归正传，队列实现栈的思路如下：\n入 ”栈” 时，假设 1,2,3 依次进入了 queue1，出 “栈” 时，需要先出 3，因此需要先将 1,2 从队列中出来放到 queue2, 然后再次需要出 “栈” 时，需要出 2,因此此时需要先将 1 从 queue2 中出来放到 queue1 中，再从 queue2 中出 2。即出队列时，若队列不为空，需要将 n-1 元素转移到另一个空的队列中。\n以下是实现及测试代码：\npublic class QueueToStack { private Queue\u0026lt;Integer\u0026gt; queue1 = new ArrayDeque\u0026lt;\u0026gt;(); private Queue\u0026lt;Integer\u0026gt; queue2 = new ArrayDeque\u0026lt;\u0026gt;(); private void pushStack(Integer num){ if(!queue1.isEmpty()){ queue1.offer(num); } queue2.offer(num); } private Integer popStack(){ if(queue1.isEmpty() \u0026amp;\u0026amp; queue2.isEmpty()){ return -1; } if(!queue1.isEmpty()){ while (queue1.size() \u0026gt; 1){ queue2.offer(queue1.poll()); } return queue1.poll(); } else{ while (queue2.size() \u0026gt; 1){ queue1.offer(queue2.poll()); } return queue2.poll(); } } public static void main(String[] args){ QueueToStack queueToStack = new QueueToStack(); queueToStack.pushStack(1); queueToStack.pushStack(2); queueToStack.pushStack(3); System.out.println(queueToStack.popStack()); System.out.println(queueToStack.popStack()); queueToStack.pushStack(4); System.out.println(queueToStack.popStack()); System.out.println(queueToStack.popStack()); } } 参考资料 Why is ArrayDeque better than LinkedList java api queue java api ArrayDeque ","date":"2019-08-18T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/stack-to-queue/","title":"栈和队列的相互转换"},{"content":"Breaking Bad 是美国南方的一个俚语，大致意思就是一个人由善开始转为作恶的一个过程。引用 Wikipedia 中的话就是：\nThe title comes from the Southern colloquialism \u0026ldquo;breaking bad\u0026rdquo; which means to \u0026ldquo;raise hell\u0026rdquo; or turn to a life of crime.Gilligan characterized the series as showing Walter\u0026rsquo;s transformation from a soft-spoken Mr. Chips into Scarface.\n关联文章 细数 Breaking Bad 经典片段 | 一 细数 Breaking Bad 经典片段 | 二 细数 Breaking Bad 经典片段 | 三 细数 Breaking Bad 经典片段 | 四 细数 Breaking Bad 经典片段 | 五 Season 1 Episode 1 \u0026ndash; Pilot 场景1：\n视频链接: https://www.youtube.com/watch?v=syrW-M41O3U\n这是剧中 jesse 和 walter 之间的第一次对话，jesse 的着装和表演太棒了，笑起来也很好看。附下面热评第一的评论：\nBenji Morgan: And this my friends is where our dearly beloved Jesse Pinkman signed his soul to the devil himself\n场景2：\n视频链接： https://www.youtube.com/watch?v=6zgggVRvrd0\n他在车里仰起头，笑着问 Mr.white 为什么要做这个。事实上这一个场景才让我真正开始注意 Aaron（饰 Jesse Pinkman）。正如在后面的剧情里，加油站女孩对他的描述是“He had really blue eyes.”，“They were really, really blue.”，“He\u0026rsquo;s dreamy.”，Hank总结道。\nSeason 1 Episode 3 \u0026ndash; \u0026hellip;And the Bag\u0026rsquo;s in the River 场景1：\n视频链接： https://www.youtube.com/watch?v=bBRwg5Lpfa0\nwalter 无法克服心里的障碍，拼命在找不杀 crazy 8 的理由，哪怕只有一点点，甚至于最后直接问他本人，让他找一个理由说服自己。在之后的聚集里，他的儿子在他的网站里：http://www.savewalterwhite.com/ 以及面对记者采访中说他的父亲是一个非常聪明且心地善良的人，包括 Gretchen Schwartz 在第五季的第15集对 walt 评价道：\nBut whatever\u0026ndash;\nwhatever he became,\nthe\u0026ndash;the sweet, kind, brilliant man\nthat we once knew, long ago, he\u0026rsquo;s gone.\n没错，他的却是一个善良的人，但此时内心非常纠结，最终经过在地下室的一番谈话后，walter 决定放了 crazy 8，直至他检查了盘子碎片，发现少了一块\u0026hellip;\nNo, don\u0026rsquo;t do this. Don\u0026rsquo;t do this.\nWhy are you doing this?\nwhy are you doing this?\n场景2：\n视频链接： https://www.youtube.com/watch?v=aGY4T_Vp8cA\n事到如今，为了自保白老师不得不杀了他。在看到 crazy 8 伸手探向腰间的时候，白老师眼泪都掉下来了，这是一个无可挽回的决定。这是 walt 第一次近距离亲自动手用物理方式杀人。\nSeason 1 Episode 4 \u0026ndash; Cancer Man 场景1：\n视频链接： https://www.youtube.com/watch?v=fI52h9YZ-bI\n这老哥也是倒霉，在前传 \u0026lt; better call saul \u0026gt; 中就被 Jimmy 和 Kim 骗了一次，在这里又被 Walt 搞，蛤蛤蛤。\nSeason 1 Episode 5 \u0026ndash; Gray Matter 场景1：\n视频链接： https://www.youtube.com/watch?v=35gWXV3y53s\n家庭会议中，walt 的演讲。其他人的演讲也很棒，可惜没找到完整的演讲视频，Hank 看起来也很萌233\nSeason 1 Episode 6 \u0026ndash; Crazy Handful of Nothin' 场景1：\n视频链接： https://www.youtube.com/watch?v=4IAXG9rj9WQ\njesse 被 tuco 打了，白老师带着雷汞酸盐去报仇。\nSeason 1 Episode 7 \u0026ndash; A No-Rough-Stuff-Type Deal 场景1：\n视频链接： https://www.youtube.com/watch?v=am_6X_B0OPE\n白老师给 jesse 科普铝热剂。\n场景2：\n视频链接： https://www.youtube.com/watch?v=tJpfokxtr7c\nwalt 自制铝热剂开锁，和 jesse 一起去偷甲氨。\n结语 还是第一季看起来欢乐的多啊，到了后面几乎既不怎么能看到 Walter White 和 Jesse Pinkman 的笑容了。\n参考资料 Breaking Bad ","date":"2019-08-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-classic-scene-of-breaking-bad-1/","title":"细数 Breaking Bad 经典片段 |  一"},{"content":"此文仅作个记录\n开始之前，首先需要安装 RabbitMQ 的服务端，由于我此次的安装环境为 Debian，根据官网所说，推荐使用 apt repository on Package Cloud or Bintray这种方式来安装，然而在这里还是遇到了一些问题，想要安装最新的 RabbitMQ，则需要高版本的 Erlang，具体详情可以看这个关于 RabbitMQ 和 Erlang/OPT 的兼容性表格\n然而 Debian 的 Erlang 版本很旧，因此还需要先安装 Erlang，关于这一点，官网上也提到了。因此也给出了解决方案，安装过程此处不再赘述。\n安装完毕之后，其他一些需要注意的地方：比如说默认情况下端口号是 5672，HTTP的端口是 15672，更多默认端口可以参考这里。RabbitMQ 自带了一个管理界面，如若要开启这个 WEB 界面，需要开启一个插件，只需要输入以下命令即可开启：\n$ rabbitmq-plugins enable rabbitmq_management 然后访问 ip:15672 这个地址，这样就可以愉快的使用图形化界面来管理 RabbitMQ 了，更多详情还可以看这里。\n默认情况下还会有一个默认的账户用于登录，账户名和密码都是：guest，而且只能从本机上连接。一般正常使用过程中都是需要装在服务器上，然后远程连接的，新创建一个账户就没有这个限制了。可以使用上面那个图形化界面来添加账户，也可以使用 rabbitmqctl 来创建。命令如下：\n$ rabbitmqctl add_user username password $ rabbitmqctl set_user_tags username administrator $ rabbitmqctl set_permissions -p / username \u0026#34;.*\u0026#34; \u0026#34;.*\u0026#34; \u0026#34;.*\u0026#34; 以上命令大概看英文就知道命令是做什么用的，几乎不用解释，更多关于权限控制的可以看这里\n还有一个关于配置的文档，里面包含很多配置信息，以及很多基础配置的默认值都可以在这里找到，戳这里查看。\n不得不说，RabbitMQ 的文档还是很全面的，基本上遇到的问题都可以在官方文档上找到想要的信息。\n参考资料 RabbitMQ Documentation ","date":"2019-08-05T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/study-note-of-rabbitmq-1/","title":"RabbitMQ 学习笔记 | 一"},{"content":"最近看到一篇发布在 v2ex 文章，po 主抛出了一个问题：“随着年龄增长越来越难以集中注意力，你们有吗？”，他在里面描述道：“解题时的注意力越来越发散，难以在头脑里形成完整的逻辑链”，“反而清楚的记得我在小学时就可以仅凭思考就算出爱因斯坦的那个著名推理题甚至不需要借助纸笔”。\n看到他描述的现象感觉和我之前的一篇文章有一点相似之处，只不过他称之为“注意力”，我在文章中描述的是“想象力的强度”，需要“注意力”，但又不完全是”注意力“。他的经历也从某种程度上佐证了我那个观点——幼年时期的大脑皮层可能更为活跃\n之后我也来尝试不借助纸笔来推理一下那道谜题。结果完全失败了，不借助纸笔只能做到把房子排列的颜色列出来，还有一些附带的零碎信息。之后只能借助纸笔，将它完全画了出来，我来说一下我的思路：\n原题摘抄如下：\nThe situation There are 5 houses in five different colors. In each house lives a person with a different nationality. These five owners drink a certain type of beverage, smoke a certain brand of cigar and keep a certain pet. No owners have the same pet, smoke the same brand of cigar or drink the same beverage. The question is: Who owns the fish?\nHints the Brit lives in the red house the Swede keeps dogs as pets the Dane drinks tea the green house is on the left of the white house the green house\u0026rsquo;s owner drinks coffee the person who smokes Pall Mall rears birds the owner of the yellow house smokes Dunhill the man living in the center house drinks milk the Norwegian lives in the first house the man who smokes blends lives next to the one who keeps cats the man who keeps horses lives next to the man who smokes Dunhill the owner who smokes BlueMaster drinks beer the German smokes Prince the Norwegian lives next to the blue house the man who smokes blend has a neighbor who drinks water Einstein wrote this riddle this century. He said that 98% of the world could not solve it.\nThe solution 由上文可知，房子一共有 red，green，white，yellow，blue 五种颜色。\nhe Norwegian lives in the first house\nthe Norwegian lives next to the blue house\n蓝色一定是排在第二位\nthe green house is on the left of the white house\nthe green house\u0026rsquo;s owner drinks coffee\nthe man living in the center house drinks milk\n以上三句可以推理出绿色一定是在白色左边的，而且绿色不在中间（第三位），所以绿色在第四位，白色在第五位。\nthe Brit lives in the red house\n英国人住的红房子，而住在第一个房子里的挪威人只能是黄色，红色排在第三位。\n因此根据已知的信息我们可以得到一个关系表格：\nHouse 1 2 3 4 5 Color Yellow Blue Red Green White Natl Norwegian Brit Bevg Smokes Pet 再来就是他们的行为：\nthe owner of the yellow house smokes Dunhill\nthe man living in the center house drinks milk\nthe green house\u0026rsquo;s owner drinks coffee\nthe man who keeps horses lives next to the man who smokes Dunhill\n这四句，显而易见，Norwegian 抽的是 Dunhill，Brit 喝得是牛奶，绿房子房主喝得是咖啡，Norwegian 的邻居（即蓝房子房主）家里养的是马。\n此时，关系图表如下所示：\nHouse 1 2 3 4 5 Color Yellow Blue Red Green White Natl Norwegian Brit Bevg Milk Coffee Smokes Dunhill Pet Horse the owner who smokes BlueMaster drinks beer\nthe Dane drinks tea\n结合已知信息，饮料一共有牛奶，咖啡，啤酒，茶和水，其中 3,4 分别是牛奶和咖啡，丹麦人喝茶（排除1，3,4,原因：挪威人，牛奶，咖啡），而抽 BlueMaster 的喝得是啤酒（排除1,3，4,原因：抽 Dunhill，牛奶，咖啡），所以只剩一个水选项，只能给挪威人。因此5号房间只能是抽 BlueMaster，喝啤酒的人。因为丹麦人喝茶，所以只能在2号房间。\nthe man who smokes blend has a neighbor who drinks water\n喝水的是一号房间，只能是二号抽的 blend。\nthe German smokes Prince\n根据 1,2,5 已有 smoke，4 是英国人，推理出 4 号房间是德国人，抽 prince\nthe Swede keeps dogs as pets\n因此，瑞典人只能是 5 号房（1：Norweg，2：Dane，3：Brit，4：German）\nthe person who smokes Pall Mall rears birds\n只有 3 号房间同时缺少 smoke 和 pet，因此 3 号房间抽 Pall Mall，养鸟。\nthe man who smokes blends lives next to the one who keeps cats\n所以只能是 1 号房间养猫（3 号已经养鸟了）\n最后只剩下一个空位，只能是 German 养鱼。\n最后关系图表如下：\nHouse 1 2 3 4 5 Color Yellow Blue Red Green White Natl Norwegian Dane Brit German Swede beverages Water Tea Milk Coffee Beer Smokes Dunhill Blends Pall Mall Prince Blue Master Pet Cat Horse Birds Fish Dogs ","date":"2019-07-24T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/einsteins-five-houses-riddle/","title":"Einstein's five-houses riddle"},{"content":"Redis 官网上有一些推荐的 redis client，在 Java 编程语言分类下，截至发文前，有三个 client 被官方推荐，分别是：Jedis， lettuce， Redisson， Spring Boot 2.X 中默认集成了 lettuce。\n以下是官方对 lettuce 的描述，摘录如下：\nLettuce is a scalable thread-safe Redis client for synchronous, asynchronous and reactive usage. Multiple threads may share one connection if they avoid blocking and transactional operations such as BLPOP and MULTI/EXEC. Lettuce is built with netty. Supports advanced Redis features such as Sentinel, Cluster, Pipelining, Auto-Reconnect and Redis data models.\n因此可以看出，lettuce 是线程安全的，基于 netty，在不包含阻塞和事务的情况下多个线程还可以共用一个连接。相比之下 Jedis 的实现上是直连的 redis server，多线程环境下是非线程安全的。\n言归正传，在开始之前，首先需要在 pom.xml 文件中添加以下依赖：\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-redis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-pool2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 其中值得一提的是，如果不添加 commons-pool2，启动 Spring Application 会报错，大意是找不到 commons-pool2 之类的 blahblahblah\u0026hellip;可以添加以下配置来解决，但还是建议直接加上这个依赖。\n@Bean public LettuceConnectionFactory redisConnectionFactory(){ return new LettuceConnectionFactory(new RedisStandaloneConfiguration(\u0026#34;ip\u0026#34;, 6379)); } 连接 redis 及 lettuce pool 的配置：\nspring.redis.database=0 spring.redis.password= spring.redis.port=6379 spring.redis.host= host ip spring.redis.lettuce.pool.min-idle=5 spring.redis.lettuce.pool.max-idle=10 spring.redis.lettuce.pool.max-active=8 spring.redis.lettuce.pool.max-wait=1ms spring.redis.lettuce.shutdown-timeout=100ms redis 中包含的几种数据结构大都在 Spring Data Redis 中能够找到对应，基本上见文知意，不再赘述。以下是我测试时的 Demo，仅供参考：\n@RunWith(SpringRunner.class) @SpringBootTest public class RedisDemoApplicationTests { @Autowired private StringRedisTemplate stringRedisTemplate; @Test public void contextLoads() { ValueOperations\u0026lt;String,String\u0026gt; valueOperations= stringRedisTemplate.opsForValue(); valueOperations.set(\u0026#34;valueOperations\u0026#34;,\u0026#34;value\u0026#34;); stringRedisTemplate.expire(\u0026#34;valueOperations\u0026#34;,100, TimeUnit.SECONDS); System.out.println(\u0026#34;-------------valueOperations -\u0026gt; key: valueOperations, value: value--------------\u0026#34;); System.out.println(\u0026#34;value:\u0026#34;+valueOperations.get(\u0026#34;valueOperations\u0026#34;)+\u0026#34;\\texpire:\u0026#34;+stringRedisTemplate.getExpire(\u0026#34;valueOperations\u0026#34;)); ListOperations\u0026lt;String,String\u0026gt; listOperations = stringRedisTemplate.opsForList(); listOperations.leftPushAll(\u0026#34;listOperations\u0026#34;,\u0026#34;list\u0026#34;,\u0026#34;Operation\u0026#34;,\u0026#34;s\u0026#34;); stringRedisTemplate.expire(\u0026#34;listOperations\u0026#34;,90, TimeUnit.SECONDS); System.out.println(\u0026#34;-------------listOperations -\u0026gt; key: listOperations, value: list, Operation, s--------------\u0026#34;); System.out.println(\u0026#34;values:\u0026#34;+listOperations.range(\u0026#34;listOperations\u0026#34;,0,-1)+\u0026#34;\\texpire:\u0026#34;+stringRedisTemplate.getExpire(\u0026#34;listOperations\u0026#34;)); HashOperations\u0026lt;String,String,String\u0026gt; hashOperations = stringRedisTemplate.opsForHash(); hashOperations.put(\u0026#34;hashOperations\u0026#34;,\u0026#34;hash\u0026#34;,\u0026#34;Operations\u0026#34;); stringRedisTemplate.expire(\u0026#34;hashOperations\u0026#34;,80, TimeUnit.SECONDS); System.out.println(\u0026#34;-------------hashOperations -\u0026gt; key: hashOperations, value: hash: Operation--------------\u0026#34;); System.out.println(\u0026#34;value:\u0026#34;+hashOperations.get(\u0026#34;hashOperations\u0026#34;,\u0026#34;hash\u0026#34;)+\u0026#34;\\texpire:\u0026#34;+stringRedisTemplate.getExpire(\u0026#34;hashOperations\u0026#34;)); SetOperations\u0026lt;String,String\u0026gt; setOperations = stringRedisTemplate.opsForSet(); setOperations.add(\u0026#34;setOperations\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;1\u0026#34;); stringRedisTemplate.expire(\u0026#34;setOperations\u0026#34;,70, TimeUnit.SECONDS); System.out.println(\u0026#34;-------------setOperations -\u0026gt; key: setOperations, value: 1, 2, 1--------------\u0026#34;); System.out.println(\u0026#34;values:\u0026#34;+setOperations.members(\u0026#34;setOperations\u0026#34;)+\u0026#34;\\texpire:\u0026#34;+stringRedisTemplate.getExpire(\u0026#34;setOperations\u0026#34;)); ZSetOperations\u0026lt;String,String\u0026gt; zSetOperations = stringRedisTemplate.opsForZSet(); zSetOperations.add(\u0026#34;zSetOperations\u0026#34;,\u0026#34;zSet\u0026#34;,10); stringRedisTemplate.expire(\u0026#34;zSetOperations\u0026#34;,60, TimeUnit.SECONDS); System.out.println(\u0026#34;-------------zSetOperations -\u0026gt; key: zSetOperations, value: zSet score: 10--------------\u0026#34;); System.out.println(\u0026#34;value:\u0026#34;+zSetOperations.range(\u0026#34;zSetOperations\u0026#34;,0,-1)+\u0026#34;\\texpire:\u0026#34;+stringRedisTemplate.getExpire(\u0026#34;zSetOperations\u0026#34;)+\u0026#34;\\tscore:\u0026#34;+zSetOperations.score(\u0026#34;zSetOperations\u0026#34;,\u0026#34;zSet\u0026#34;)); } } 其他方法可参考 Spring Data Redis 的 API文档\n参考资料 lettuce github RedisTemplate Spring Data Redis ","date":"2019-07-21T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/study-note-of-spring-data-redis/","title":"Spring Data Redis 学习笔记"},{"content":"许多心理学家和教育家都认为儿童拥有很丰富的想象力，作家和菜头在每年的六一儿童节都会写一篇给孩子们的信，每次都会提到他们的想象力是他们最大的财富。通常认为，儿童的思维模式尚未形成，思想中所受到的限制与规则较成年人来说要少，因此，更有可能会出现天马行空的想象力。\n但也有人认为只是因为孩子们无知，无畏，孩子的想法通常在成年人看来并不觉得惊艳，反而是胡思乱想。通常认为，想象力是对接触到的一些事物的反馈并对其进行意识加工的过程，通常不能凭空创造（或者说很难凭空创造）。持这个结论的基本上基于人类是否有自由意志这一命题，人类自身的决策和行为无意识的受到外界事物的影响，即是对外界事物而作出的反馈。很难找到由人类“自发”做出的决策或行为。因此，凭空创造也几乎不可能了。既然不能凭空创造，而儿童受限于知识的广度，因此往往可能成人的想象力更为丰富。\n在此，我们可以换个角度来讨论，从想象力的强度来考虑。何为想象力的强度？即素材在大脑进行加工时，具像化的程度。就我个人而言，当我还处于幼年期，想象家里的钟表时，能毫不费力的将其具像化，并在上面进行一些加工，使其变成图像或者动画。具象化程度之高，就像在眼前出现一样清晰。而当我现在再去想象钟表，却发现很难再做到这一点，记忆还是很清晰，但是很难根据记忆用想象将它描绘出来，只能完成一个轮廓，当我集中注意力去描绘钟表细节的时候，之前描绘的轮廓又都消失了。\n因此，就我个人的经历而言得出的结论（不具备普适性），我现在想象力的强度远远不及孩提时代，或许是成年后大脑的活跃度降低或是什么原因。因此是否也在某种程度上证明了观点一——儿童具有丰富的想象力。（这里的“丰富”指的是脑部资源的丰富，可以轻松渲染出场景及事物）\n","date":"2019-07-17T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/about-imagination/","title":"关于想象力"},{"content":"关于 Spring Boot 整合 Swagger2，网络上有很多详细的文章，此文仅作个学习记录。\n首先需要引入 Swagger2 的依赖，截止发文前版本号如下：\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.9.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.9.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 然后写一个 Swagger2 的配置类：\n@Configuration @EnableSwagger2 public class SwaggerConfig { @Bean public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .pathMapping(\u0026#34;/\u0026#34;) .select() .apis(RequestHandlerSelectors.basePackage(\u0026#34;com.example.demo.spider.controller\u0026#34;)) .paths(PathSelectors.any()) .build().apiInfo(new ApiInfoBuilder() .title(\u0026#34;Swagger\u0026#34;) .description(\u0026#34;接口信息……\u0026#34;) .version(\u0026#34;1.0\u0026#34;) .contact(new Contact(\u0026#34;sherry\u0026#39;s blog\u0026#34;,\u0026#34;https://wanmei.ml/snow\u0026#34;,\u0026#34;sherry@wanmei.com\u0026#34;)) .license(\u0026#34;MIT License\u0026#34;) .licenseUrl(\u0026#34;https://choosealicense.com/licenses/mit/\u0026#34;) .build()); } } 此时，启动项目，然后进入 http://[ip]:8080/swagger-ui.html 应该就可以看到页面了，但是还没有显示任何接口，需要在接口上加上注解以保证 swagger2 能扫描到，如下所示：\n@RestController @Api(tags = \u0026#34;城市相关接口\u0026#34;) @RequestMapping(value = \u0026#34;/city\u0026#34;) public class CitiesController { @Autowired private ICitiesService citiesService; @GetMapping(value = \u0026#34;/list\u0026#34;) @ApiOperation(\u0026#34;查询城市列表\u0026#34;) List\u0026lt;Cities\u0026gt; getList(){ return citiesService.getList(); } @GetMapping(value = \u0026#34;/{id}\u0026#34;) @ApiOperation(\u0026#34;根据id查询城市位置信息\u0026#34;) @ApiImplicitParam(name = \u0026#34;id\u0026#34;, value = \u0026#34;编号\u0026#34;, defaultValue = \u0026#34;1\u0026#34;, required = true) Cities getCityById(@PathVariable Integer id){ return citiesService.getLocationById(id); } } 此处涉及到的 API 及解释如下所示：\n@Api：用于标记 Controller 的功能 @ApiOperation：用于标记一个方法的功能。 @ApiImplicitParam：用于描述一个参数所代表的意思，默认值及是否必填等相关信息（这里的 required = true 只是在文档中表明必填，不会对接口产生作用），若有多个参数，多个 @ApiImplicitParam 注解需要放在一个 @ApiImplicitParams 注解中 还可以对实体类进行标记：\n@Data @EqualsAndHashCode(callSuper = false) @Accessors(chain = true) @ApiModel public class Cities implements Serializable { private static final long serialVersionUID = 1L; @ApiModelProperty(value = \u0026#34;编号\u0026#34;) private Integer id; @ApiModelProperty(value = \u0026#34;城市名称\u0026#34;) private String city; @ApiModelProperty(value = \u0026#34;位置\u0026#34;) private String location; } @ApiModelProperty：对一个属性进行标记 更多描述及示例点击链接即可。\n除 swagger-ui.html 之外，还有一些默认的文档路径，详情见此处\n参考资料 Springfox Reference Documentation ","date":"2019-07-01T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/spring-boot-and-swagger2/","title":"Spring Boot 整合 Swagger2"},{"content":"在群友的安利（传教）下，成功引起了我的兴趣\u0026hellip;\n在作了一些了解之后，记录如下。以下本文的命令是在 Arch Linux 上进行的，其他发行版暂不作讨论，不过应该也普遍适用。\n安装没什么可说的，直接 sudo pacman -S postgresql 就好了。(其他发行版请使用对应的包管理器)\n安装 PostgreSQL 的时候会同时创建一个名为 postgres 的系统账户。这个账户同时也是 PostgreSQL 数据库中的 Superuser, 因此创建数据库账户或者创建数据库都需要由这个账户来进行操作。\n如果没有指定配置文件直接在 terminal 中键入 postgres 后显示可能会显示如下结果：\npostgres does not know where to find the server configuration file. You must specify the --config-file or -D invocation option or set the PGDATA environment variable. 因此需要先切换到 postgres 账户：\n$ sudo -iu postgres 然后初始化配置：\n$ initdb -D /var/lib/postgres/data 值得一提的是，默认情况下，数据库的编码和语言环境会使用本机的系统编码和语言环境，因此如果系统不是英文环境或者编码不是 utf-8 的还是建议通过指定编码和语言环境的方式来覆盖掉默认值。就像这洋：\n$ initdb --locale en_US.UTF-8 -E UTF8 -D \u0026#39;/var/lib/postgres/data\u0026#39; 上条与上上条命令中的 -D 会指定默认(default)的存储位置。若无特殊需求，一般使用默认位置就行，如果想要修改存储位置，可以看这里，此处不再赘述。\n如果一切顺利，应该会出现以下结果：\nThe files belonging to this database system will be owned by user \u0026#34;postgres\u0026#34;. This user must also own the server process. The database cluster will be initialized with locale \u0026#34;en_US.UTF-8\u0026#34;. The default database encoding has accordingly been set to \u0026#34;UTF8\u0026#34;. The default text search configuration will be set to \u0026#34;english\u0026#34;. Data page checksums are disabled. fixing permissions on existing directory /var/lib/postgres/data ... ok creating subdirectories ... ok selecting default max_connections ... 100 selecting default shared_buffers ... 128MB selecting dynamic shared memory implementation ... posix creating configuration files ... ok running bootstrap script ... ok performing post-bootstrap initialization ... ok syncing data to disk ... ok WARNING: enabling \u0026#34;trust\u0026#34; authentication for local connections You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb. Success. You can now start the database server using: pg_ctl -D /var/lib/postgres/data -l logfile start 然后启动 postgresql server 服务：\n$ sudo systemctl start postgresql.service 到此处事实上已经完成了，但是这一切都是在 postgres 这个账户下进行操作的，为了便于自己本机日常使用的账户进行操作，可以在 postgresql 数据库中创建一个和自己本机账户同名的数据库账户，仍然需要 postgres 这个 Superuser 来继续操作：\n$ createuser --interactive 上条命令执行后，在这里为了方便，我将其设置成了 superuser，交互如下：\nEnter name of role to add: [此处填写你的本机账户名] Shall the new role be a superuser? (y/n) y 创建完用户就可以输入 exit 来换回本来的账户了。接下来创建数据库：\n$ createdb [此处填写数据库名称] 如果创建的数据库用户名称与本机不同名，此时通过 createdb 命令来创建数据库就会出现如下错误：\ncreatedb: could not connect to database template1: FATAL: role \u0026#34;[你的本机账户名]\u0026#34; does not exist 如果一切顺利，就可以通过 psql -d [数据库名称]来访问你的数据库了。\n以下是进入数据库后的一些查询命令：\n\\help -\u0026gt; 查看所有数据库的命令。\n\\help [命令] -\u0026gt; 查看此命令的详细信息及用法。类似于 man page。\n\\du -\u0026gt; 列出所有的账户及其权限。\n\\dt -\u0026gt; 显示当前数据库所有表的摘要信息。\n\\q -\u0026gt; 退出\n参考资料 PostgreSQL Doc Arch Wiki PostgreSQL ","date":"2019-05-29T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-first-exploration-of-postgresql/","title":"初探PostgreSQL"},{"content":"Docker Swarm 入门用到的命令不多，初始化的时候提示写的就很详细，一步步下来感觉用起来很方便。\n初始化 $ sudo docker swarm init 执行上句后，会有类似如下的东西出现：\nSwarm initialized: current node (xxxxxxxxxxxxxxxxxxxxxxxxx) is now a manager.\nTo add a worker to this swarm, run the following command:\ndocker swarm join \u0026ndash;token xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ip]:2377\nTo add a manager to this swarm, run \u0026lsquo;docker swarm join-token manager\u0026rsquo; and follow the instructions.\n加入集群 直接复制初始化后显示的命令，在同一网段的另一台主机上输入即可。如果成功的话，会出现如下反馈：\nThis node joined a swarm as a worker.\n如果不小心关掉了 terminal ，还可以通过以下命令看到 token：\n$ sudo docker swarm join-token worker 还可以查看添加管理节点到集群的 token：\n$ sudo docker swarm join-token manager 查看 查看集群节点列表：\n$ sudo docker node ls 查看集群上的服务：\n$ sudo docker service ls 终止集群 $ sudo docker swarm leave --force 参考资料 docker docs part 3 \u0026amp; part 4 ","date":"2019-05-11T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/docker-swarm-cluster-create/","title":"Docker Swarm 集群创建过程"},{"content":"前言 我对手机的需求不高，不打游戏，只需要续航，有 Google 服务以及 root 就足够了。之前一直使用的 ADUI 的 Global 版本，再加上 Magisk 的 root 管理，配上冰箱也足以应付诸如微信这一类的国产毒瘤了。但之前有一次升级到 Pie 的大版本更新，把我的 root 覆盖掉了。因此，不得不重新再刷入 Magisk。不过 MIUI11 官方说会加入应用冻结的功能，这样一来我连 root 的需求似乎也没有了 /笑\n言归正传，在 Linux 上使用 adb 有些机型还是需要做一些配置，不然 adb devices 会显示：\nList of devices attached\n[device name] unauthorized\n要进行配置之前，首先需要找到自己手机的 USB vendor ID 和 product ID，启用开发者模式，然后打开 usb 调试模式插上手机后在 terminal 中执行：\n$ lsusb 它将会显示出好几条类似 Bus xxx Device xxx: ID xxxx:xxxx 的东西，根据后面显示的公司信息很容易分辨出自己的手机是哪一个，ID 之后的 xxxx：xxxx，前者是 vendor id，后者是 product id\n下面有两种方式来写配置文件：\n添加udev规则 1.首先要确保系统中有安装 android-udev 这个包。可以通过包管理器来安装或者访问source.android.com来手动安装。在这里新建一个文件：/etc/udev/rules.d/51-android.rules，然后写入以下配置，只需修改其中的 vendor id 和 product id 为自己的即可:\nSUBSYSTEM==\u0026ldquo;usb\u0026rdquo;, ATTR{idVendor}==\u0026quot;[VENDOR ID]\u0026quot;, MODE=\u0026ldquo;0660\u0026rdquo;, GROUP=\u0026ldquo;adbusers\u0026rdquo;\nSUBSYSTEM==\u0026ldquo;usb\u0026rdquo;,ATTR{idVendor}==\u0026quot;[VENDOR ID]\u0026quot;,ATTR{idProduct}==\u0026quot;[PRODUCT ID]\u0026quot;,SYMLINK+=\u0026ldquo;android_adb\u0026rdquo;\nSUBSYSTEM==\u0026ldquo;usb\u0026rdquo;,ATTR{idVendor}==\u0026quot;[VENDOR ID]\u0026quot;,ATTR{idProduct}==\u0026quot;[PRODUCT ID]\u0026quot;,SYMLINK+=\u0026ldquo;android_fastboot\u0026rdquo;\n2.然后重新载入新的配置文件：\n$ sudo udevadm control --reload-rules 3.然后将当前的用户添加到 adbusers 这个组里：\n$ sudo gpasswd -a user group 配置adb 在这个位置创建文件 ~/.android/adb_usb.ini ，然后将 vendor id 写入到里面，保存退出即可。\n这两种方式任选其一即可。然后进入解压后的 platform-tools 目录，将下好的 twrp 也放到里面，在目录中启动 terminal，然后执行：\n$ ./adb devices 这样的话，应该就能看到设备被列出来了，类似于这样：\nList of devices attached\n[device name] device\n这样就算是完成了。\n后记 我自己使用的是第二种方式，能够成功找到adb。adb reboot bootloader 后进入 bootloader 也能通过 fastboot devices 找到设备，然而通过 fastboot flash recovery xxxx.img 就会莫名其妙的卡住\u0026hellip;通过 fastboot boot xxxx.img 想要直接进入 twrp 也会卡在 sending\u0026hellip;这里。不知道是什么原因，先挖个坑，以后再慢慢研究好了。\n参考资料 Android Debug Bridge ","date":"2019-05-02T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/adb-use-record-on-linux/","title":"Linux上adb的使用记录"},{"content":"近日全面将 Shadowsockes 向 v2ray 切换，原本 Arch 上用着 sslocal -c /path/filename.config 还挺舒服的，配置文件看起来也比 v2ray 要简单得多，无奈 Shadowsocks 最近表现的一直不大稳定，总是被封 IP。\nv2ray 的服务端和客户端是同一套程序，配置成服务端还是客户端取决于配置文件中 inbounds 和 outbounds 的配置，一般来说 v2ray 官网的 新手上路 中的配置已经足够日常使用。但是为了稳妥起见，还是要进行进一步配置。例如采用 websocket+TLS+Web 这种方案。\nlinux 上客户端的使用最简单的方式就是找一些配置文件改改来用。例如：可以在线生成配置文件的配置文件生成器;再比如 V2Ray 配置文件模板收集仓库 Github;还可以直接导入到 Windows GUI 程序中，然后再导出配置文件来用。\n前几天 python 连接 docker 中的 redis 的时候发现总是出现 Connection refused ，刚开始还以为 docker 网络的配置原因，后来才发现原来是 redis 配置文件的缘故。将 bind 127.0.0.1 着一条注释掉就好了 Hmmm\n今天照例滚系统，在安装 Wps office 的时候 yaourt 提示 No space left on device，看了一下，原来是 /tmp 空间不够。搜寻了一圈之后发现两个解决方案：\nmount -o remount,size=5G /tmp/ umount /tmp \u0026amp;\u0026amp; mount -t tmpfs -o size=1048576,mode=1777 overflow /tmp 第一种要比第二种简洁很多，不过第二种的 mode=1777 没看懂是什么意思，随后去查了 man page，以下引用自 man page：\nSet the mode of all files to value \u0026amp; 0777 disregarding the original permissions. Add search permission to directories that have read permission. The value is given in octal.\n大概就是类似于 chmod ，至于为什么会是 1777 ，以下引用 wikipedia:\nWhen a directory\u0026rsquo;s sticky bit is set, the filesystem treats the files in such directories in a special way so only the file\u0026rsquo;s owner, the directory\u0026rsquo;s owner, or root user can rename or delete the file. Without the sticky bit set, any user with write and execute permissions for the directory can rename or delete contained files, regardless of the file\u0026rsquo;s owner. Typically this is set on the /tmp directory to prevent ordinary users from deleting or moving other users\u0026rsquo; files.\n大致意思就是说一旦设置了 sticky bit ，只有目录/文件的所有者或者 root 账户才能对文件进行写操作，其他的用户即使获得了对这个目录写操作权限，也无法对其进行写操作。\n之后又去 archlinux wiki 上看了看，发现 yaourt 开发者在2018年11月10号的一条 issue 中表示无意再继续维护 yaourt 了，之后 2018 年 11 月 30 号被 aur helper 页面标记为停更，2019 年 3 月 25 号从 aur help 中被移除。\n看了看发现大家比较推荐 yay，自己 makepkg -si 的话确实会麻烦一点，想了一下还是换成了 yay。另一方面 archlinuxcn 源也能解决不少 aur 里的东西，于是再次添加上了 archlinuxcn 源。\n不得不说 wps for linux 新版本 UI 变漂亮了好多。\n嗯，真香。\n参考资料 Project V Sticky_bit aur helper ","date":"2019-04-17T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/casual-talk/","title":"杂谈"},{"content":"前言 最近在复习数据结构，学习了一下 AVL 树，现记录如下。\n什么是 AVL 树 AVL 树是一种平衡二叉查找树(self-balancing binary search tree),由苏联两位科学家 Georgy Adelson-Velsky 和 Evgenii Landis 于1962年在论文《An algorithm for the organization of information》中首次提出。\nAVL 树的性质 AVL 是一个平衡二叉查找树，首先它应是一个二叉查找树（又称二叉排序树），因此，它首先具备如下特性:\n若左子树不空，则左子树上所有结点的值均小于它的根结点的值。 若右子树不空，则右子树上所有结点的值均大于它的根结点的值。 左、右子树也分别为二叉排序树。 AVL 引入了平衡因子，即：\n每个节点的左右子树高度之间的差异小于或等于1。 AVL 树的旋转 通过对节点的旋转来重新平衡树，通常对 AVL 树的旋转有以下四种情况：\nLL(Left Left Case):\nLR(Left Right Case):\nRR(Right Right Case):\nRL(Right Left Case):\np.s. 以上图片通过 draw.io 绘制而成，凑活能看（\n再放一张 gif，便于理解，图源来自 Wikipedia:\nAVL树的时间空间复杂度 以下图表来源于Wikipedia.\nAlgorithm Average Worst case space O(n) O(n) search O(log n) O(log n) insert O(log n) O(log n) delete O(log n) O(log n) 参考资料 https://en.wikipedia.org/wiki/AVL_tree https://www.geeksforgeeks.org/avl-tree-set-1-insertion/ ","date":"2019-03-26T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/avl-tree-study-note/","title":"AVL tree 学习笔记"},{"content":" 最是人间留不住，朱颜辞镜花辞树\n我依然记得她的模样。我还依稀记得，小时候去她家里，她都笑容满面的模样，有时侯她看着我们玩，有时问我一些家里的、生活上的琐事。\n长大一些后，我更想待在家里玩电脑，不再像小时候天天跑别人家里，找别人出去玩。虽然次数开始变得很少，但每次去她家，她都会很热情的拿过来一些东西让我们吃，她每次见到我们都会笑，笑容显得很和煦。离开的时候，都会叫我们以后有空了就来玩。那时候的她看起来依然很健朗。\n直到现在我依然觉得难以相信，只能不得不感叹有时候人的命运真的很难预料。但这却又让我想起另一件事情。\n\u0026hellip;\n今年七月份，我有个很亲近的亲戚也不在了，他们家离我们家不远，只记得小时候爸爸会经常带着我去他们家玩，当时在他们家还拍了照片，在我很小的时候。他们家和我们家院子的布局很像。之后我每次看到这个照片，脑海中都会似有似无的浮现出当时的场景，我甚至都分不清楚这些是真实还是我臆想出来的东西。\n我经常会分不清亲戚之间的关系，以前家里人也都和我说过好多次，我自己也问过好多次，但是每次之后都忘记了，每次碰到认识的亲戚我都不知道该称呼什么，拼命从脑海中搜寻出模糊的记忆，但又怕叫错而不敢说出来，最终都只好看着人家笑笑。\n当家人告诉我这件事情的时候，我刚在北京实习了不到半个月，离家不远，父亲的意思是想让我回去一趟。我觉得关系很近，长大后又很少去那边玩，也总是搞不清该称呼什么，心里也觉得很亏欠，因此我自己也倾向于回家一趟。但事情往往不会遂人愿，在种种原因的结合作用下。最终，我还是没能回家。\n一次又一次的历史证明，父亲总是对的。现在想想当时我当时真应该回去。如果我当时回家的意愿足够坚定的话，还是可以回去的。但如今我再也不能亲自回家为他送行了，我再也不能稍稍弥补一下我心里的歉意了。\n\u0026hellip;\n去年的时候，我的邻居离开的也很突然，我平时称呼她为小国奶奶，她是个很好的人。在我小时候，每次晚上家里停电的时候，父亲就会让我去邻居家看看，我总是兴冲冲的跑出去，跑着进她家门口就开始喊，问她家里有没有停电。\n有段时间她买了个压面机，开始做面条来卖，去她家买面条的人很多，我经常去她家玩，因为会有很多面条都挂在一排一排的竹竿上，就像一个帘子一样，我觉得那样很好玩。有时候她会把面条一边做一边把一头挂在竹竿上，我会帮她拿着竹竿，抬高不让面条掉在地上，慢慢后退，看着面条越来越长。最后举着竹竿挂在外面，看着外面的“竹帘”慢慢变多，就很高兴，像是在完成一个艺术品。小时候什么东西都能玩的起来，总是能找到无尽的乐趣。\n去年暑假我在家，当我看到有个人慌慌张张的跑进我们家大声喊叫，我们当时在用电锯锯钢筋，声音很大，我们都听不到。然后我们关掉电锯，那个人说了句什么，只看到父亲放下手里的活就跑了出去，我也意识到出了什么事情，就连忙跟了上去。当我看到她躺在地上的时候，我不知道作何感想，只是觉得一个时代终结了。\n自从我上大学后，回来就很少碰到邻居，偶尔远远的看见，也只是匆匆走过，很少去主动打招呼。当事情发生后，事后回想起来，感觉世事难料的同时也觉得很奇妙。昨天我恰好碰到她，从她旁边走过，我罕见的和她打了招呼，连我自己都有种久违的感觉。她露出了笑容，目光跟随着我。她还是以前的模样，只是白头发变得多了，身子也佝偻了些，但看起来精神很好，甚至在当时的阳光下她脸上闪现着光芒，是那种由内而外的、柔和的光芒。直到现在我还清楚的记得她当时的每一个动作，她的笑容，她面庞上散发的光辉，记得那种奇妙的，玄之又玄的感觉。这是我见她生前的最后一面。\n","date":"2018-08-30T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/to-the-distant-past/","title":"致遥远的过去"},{"content":" 那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。 ——《黄金时代》王小波\n大三时当我忽然发觉我都已经 21 岁的时候，我和舍友说，他想了想，好似也刚发现一样，啊~都已经 20 多了啊，他感叹道。\n对啊，都 20 多岁了呢，不知不觉，都已经这么老了，虽然和 18、9 岁差别不大，但感觉还是不一样的。\n我一直认为 22 岁就像是个分水岭，22 岁就已经变老了，从数值上来说，21 毕竟还紧挨着 20，虽然年龄看起来大，但感觉上还是年轻的。一旦到了 22，就已经呈现出渐渐远离的姿态，马不停蹄地奔向下一个点，就像宇宙加速膨胀，月球加速远离地球一样。\n时间似乎也在以加速度前进。\n20 岁，以前还小的时候总觉得只存在很遥远的地方，从不敢想象，一直都以为还离得很远，当个位终于向前进了一位，现实就这样忽然间出现在眼前。\n20 岁的时候我会变成什么样子呢？\n嗯，还真是有些失望呢\n","date":"2018-08-04T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/no-longer-young/","title":"不再年轻"},{"content":"中国社会有个很神奇的现象，每逢聚会或商业应酬必定要喝酒，小到还在上学的初中生，大至几十岁的大龄人员，几乎很难看到在同一桌相互认识的同龄人想喝酒的人喝酒，想喝饮料/果汁的人喝饮料/果汁的和谐景象。总有人觉得别人喝酒，自己不和人家一块喝好像不尊重别人。这一点就很奇怪，这难道不是看个人意愿？为什么“酒”这个东西在中国被赋予了如此厚重的意义？\n“酒”的口感设定是很反人类的，为什么这么说？只要将酒这种液体和市面上所有可以称之为“喝”的东西做一个横向对比，我不敢说酒的口感是最差的，但它一定不是最好的，保守点说，它的口感处于中下，这一点应该没什么异议。那为什么人们还要强迫自己喝他们不喜欢的东西呢？如果只看上面看不出酒文化有多么恶劣，那么我来举个例子就一目了然了。现在开始假设：\n很久很久以前，由于生产力低下，食物供给短缺，为了生存和繁衍生息，人类需要尽可能的收集所有食物。“屎”这种大小合适且无需加工即可食用的优点逐渐被大众所推崇。另外人是一种群居动物，因此人们喜欢聚集在一起生产食物并且吃饭，在一起生产食物的时候聊天吹牛也是在劳作休息之余的一种娱乐活动。他们经常会在吃饭的时候一起赞颂这个伟大的造物主，互相敬“屎”也是一种礼貌友好的表现，久而久之便形成了一种优秀社交文化，就这样流传了下来，直至如今。\n还是要承认，洗脑是真实存在的。在如今这个自由开放的年代，仍然会有很多别有用心的人或组织、以各种形式来影响甚至是试图操控别人的思想，前段时间被曝出的有人利用 Facebook 用户信息涉嫌操纵美国大选就是最好的例子。回到本文，原本想喝什么跟别人是没有任何关系的，但为什么一起吃饭的时候拒绝喝酒，别人会感觉到不被尊重？换句话说，两个八竿子打不着的东西被强行揉合到一起，并在人们的心里根深蒂固，这就是酒文化赋予的附加属性，MEANLESS！人类受传统文化荼毒有多深，可见一斑。\n(遵循这种垃圾文化又不会因此寿命而增加一秒(跑\n","date":"2018-05-29T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/talk-about-chinese-drinking-culture/","title":"漫谈中国的饮酒文化"},{"content":"今天遇到了一个问题，是关于前端 CSS 子元素的 margin-top 会影响父元素的问题。搞了好长时间也不知道怎么回事，最后终于解决了，写出来权当做个记录。\n我的 HTML 嵌套关系如下：\n\u0026lt;header id=\u0026#34;site-head\u0026#34;\u0026gt; \u0026lt;a id=\u0026#34;blog-logo\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;logo\u0026#34; style=\u0026#34;background: url(/resources/images/qyc.jpg)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/header\u0026gt; 父元素 CSS：\n#site-head{ max-width: 100%; background-image: url(\u0026#34;/resources/images/header.jpg\u0026#34;); background-size: cover; } 子元素 CSS：\n#blog-logo { display: block; max-width: 100px; margin: 50px auto 0; text-align: center; } 当子元素中 margin-top 为 50px 时，神奇的一幕发生了，子元素并没有相对于父元素向下移动 50px，而是连带着父元素一起向下移动了 50px。\n在 Chrome 的 Developer tools 中查看时，看到就连 body 都向下移动了 50px！之后尝试在父元素中设置 margin 或 body 中设置都没有用，在父元素中设置 padding 也没有效果。\n之后搜索到的 css2.1 盒模型中规定的内容如下：\nIn this specification, the expression collapsing margins means that adjoining margins (no non-empty content, padding or border areas or clearance separate them) of two or more boxes (which may be next to one another or nested) combine to form a single margin.\n所有毗邻的两个或更多盒元素的 margin 将会合并为一个 margin 共享之。毗邻的定义为：同级或者嵌套的盒元素，并且它们之间没有非空内容、Padding 或 Border 分隔。因为嵌套也属于毗邻，所以在样式表中优先级更高的。因此子元素中的 margin 覆盖了父元素的 margin。\n之后找到的解决方法如下：\n父级或子元素使用浮动或者绝对定位 absolute 浮动或绝对定位不参与 margin 的折叠 父级 overflow:hidden; 父级设置 padding（破坏非空白的折叠条件）//对于这条表示怀疑，我之前设置的 padding 并没有起到作用( 父级设置 border 最终我用的父级 overflow:hidden;完美解决问题！\n","date":"2018-05-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/a-question-about-the-css-box-model/","title":"子元素margin-top影响父元素问题"},{"content":"前言 前段时间参加了某头条的笔试，出的五道编程题都跟算法有关。其中有道题大致意思是这样的：输入一个表达式，输出由‘6’这个字符组成的运算结果的图形。也就是说，假设输入5*6+6,就需要输出由‘6’组成的结果为“36”的图形。\n事实上，这道题考得是“表达式求值”。关键点就在于需要将这个表达式拆开并按照加减乘除和括号之间的优先级算法，首先需要算出具体的答案，然后取余跟事先画好的0-9的图形进行匹配即可。可惜我当时一直在想怎么表达出这些毫无规律的“数字图形”，却没意识到考点其实是\u0026lt;数据结构\u0026gt;上曾经学过的表达式求值:(\n一般来说，表达式求值有“中缀表示法”和“后缀表示法”(又称“逆波兰表示法”)两种。适合人类阅读的便是“中缀表示法”，例如：5+6*7 但“后缀表示法”更适合计算机来计算，因为无需判断操作符号的优先级，例如：567*+\n虽然“逆波兰表示法”更容易编程，然而事实上，一般都会输入“中缀表达式”，因此还要转化为“逆波兰表示法”，所以两种算法个人感觉没有哪个更为简单。\n要判断运算符优先级，首先要将数字和运算符分两边存储，然后看第一个运算符和第二个运算符之间的大小，如果第一个比第二个大或者相等就可以先算第一个，反之则要先计算第二个，很符合先进先出的规则。这样就很自然的想到用到栈来表示。\n中缀表达式 以下是“中缀表达式”在栈中执行过程，假设表达式为：5+6*7/8\n首先，遇到 5 ，把 5 送到操作数栈，遇到 + ，送到操作符栈：\n操作数栈 操作符栈 5 + 遇到 6，压入操作数栈中\n操作数栈 操作符栈 6 5 + 遇到乘，由于 * 的优先级高于 + ，所以，现在就什么也不做，只把乘号进栈：\n操作数栈 操作符栈 6 * 5 + 遇到 7 ，压入操作数栈：\n操作数栈 操作符栈 7 6 * 5 + 遇到 / ，即可计算 6*7 ，从操作数栈中取出两个数字，从操作符中取出一个操作符，并将结果压入操作数栈：\n操作数栈 操作符栈 6*7 5 + 将 / 入操作符栈：\n操作数栈 操作符栈 6*7 / 5 + 将 8 入操作数栈：\n操作数栈 操作符栈 8 6*7 / 5 + 全部压入栈中后，每次只需从操作数中取出两个数字，从操作符中取出一个运算符，并将其结果压入操作数栈中即可。\n调度场算法 以下来源于Wikipedia:\n调度场算法（Shunting Yard Algorithm）是一个用于将中缀表达式转换为后缀表达式的经典算法，由艾兹格·迪杰斯特拉引入，因其操作类似于火车编组场而得名。\nInput: 3 + 4 × 2 ÷ ( 1 − 5 ) ^ 2 ^ 3\nToken Action Output(in RPN) Operator stack Notes 3 Add token to output 3 + Push token to stack 3 + 4 Add token to output 3 4 + × Push token to stack 3 4 × + × has higher precedence than + 2 Add token to output 3 4 2 × + ÷ Pop stack to output 3 4 2 × + ÷ and × have same precedence (same up) Push token to stack 3 4 2 × ÷ + ÷ has higher precedence than + ( Push token to stack 3 4 2 × ( ÷ + 1 Add token to output 3 4 2 × 1 ( ÷ + − Push token to stack 3 4 2 × 1 − ( ÷ + 5 Add token to output 3 4 2 × 1 5 − ( ÷ + ) Pop stack to output 3 4 2 × 1 5 − ( ÷ + Repeated until \u0026ldquo;(\u0026rdquo; found (same up) Pop stack 3 4 2 × 1 5 − ÷ + Discard matching parenthesis ^ Push token to stack 3 4 2 × 1 5 − ^ ÷ + ^ has higher precedence than ÷ 2 Add token to output 3 4 2 × 1 5 − 2 ^ ÷ + ^ Push token to stack 3 4 2 × 1 5 − 2 ^ ^ ÷ + ^ is evaluated right-to-left 3 Add token to output 3 4 2 × 1 5 − 2 3 ^ ^ ÷ + end Pop entire stack to output 3 4 2 × 1 5 − 2 3 ^ ^ ÷ + 可以看出，基本上是和“中缀表达式”原理差不多的，也是需要比较运算符的优先级，按照计算的先后顺序排序。\n逆波兰表达式 以下例子来源于 Wikipedia:\n例如：中缀表达式__5+((1+2)*4)−3__写作__512+4*+3−__\n输入 操作 堆栈 注释 5 入栈 5 1 入栈 5, 1 2 入栈 5, 1, 2 + 加法运算 5, 3 (1, 2)出栈；将结果（3）入栈 4 入栈 5, 3, 4 * 乘法运算 5, 12 (3, 4)出栈；将结果（12）入栈 + 加法运算 17 (5, 12)出栈；将结果 (17)入栈 3 入栈 17, 3 − 减法运算 14 (17, 3)出栈；将结果（14）入栈 计算完成时，栈内只有一个操作数，这就是表达式的结果：14\n程序 再次回到这个笔试题目，我这里做了些改动，毕竟手动画出用‘6’组成的0-9的图形很累，也不美观，因此我在AsciiArt的常用问题页面找了个自动生成AsciiArt的网页，经过对比，感觉“larry3d”这个字体比较美观，因此我选择了这个来生成图案。\npackage interview; import java.util.Scanner; import java.util.Stack; public class num_graphic { private String getGraphic(char rel){ String zero= \u0026#34;\\n\u0026#34; + \u0026#34; __ \\n\u0026#34; + \u0026#34; /\u0026#39;__`\\\\ \\n\u0026#34; + \u0026#34;/\\\\ \\\\/\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\ \\\\ \\\\ \\\\ \\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\ \\\\_\\\\ \\\\\\n\u0026#34; + \u0026#34; \\\\ \\\\____/\\n\u0026#34; + \u0026#34; \\\\/___/ \\n\u0026#34; + \u0026#34; \u0026#34;; String one=\u0026#34;\\n\u0026#34; + \u0026#34; _ \\n\u0026#34; + \u0026#34; /\u0026#39; \\\\ \\n\u0026#34; + \u0026#34;/\\\\_, \\\\ \\n\u0026#34; + \u0026#34;\\\\/_/\\\\ \\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\ \\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\_\\\\\\n\u0026#34; + \u0026#34; \\\\/_/\\n\u0026#34; + \u0026#34; \u0026#34;; String two=\u0026#34; ___ \\n\u0026#34; + \u0026#34; /\u0026#39;___`\\\\ \\n\u0026#34; + \u0026#34;/\\\\_\\\\ /\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\/_/// /__ \\n\u0026#34; + \u0026#34; // /_\\\\ \\\\\\n\u0026#34; + \u0026#34; /\\\\______/\\n\u0026#34; + \u0026#34; \\\\/_____/ \\n\u0026#34; + \u0026#34; \u0026#34;; String three=\u0026#34; __ \\n\u0026#34; + \u0026#34; /\u0026#39;__`\\\\ \\n\u0026#34; + \u0026#34;/\\\\_\\\\L\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\/_/_\\\\_\u0026lt;_ \\n\u0026#34; + \u0026#34; /\\\\ \\\\L\\\\ \\\\\\n\u0026#34; + \u0026#34; \\\\ \\\\____/\\n\u0026#34; + \u0026#34; \\\\/___/ \\n\u0026#34; + \u0026#34; \u0026#34;; String four=\u0026#34;\\n\u0026#34; + \u0026#34; __ __ \\n\u0026#34; + \u0026#34;/\\\\ \\\\\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\ \\\\ \\\\\\\\ \\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\ \\\\\\\\ \\\\_ \\n\u0026#34; + \u0026#34; \\\\ \\\\__ ,__\\\\\\n\u0026#34; + \u0026#34; \\\\/_/\\\\_\\\\_/\\n\u0026#34; + \u0026#34; \\\\/_/ \\n\u0026#34; + \u0026#34; \u0026#34;; String five=\u0026#34;\\n\u0026#34; + \u0026#34; ______ \\n\u0026#34; + \u0026#34;/\\\\ ___\\\\ \\n\u0026#34; + \u0026#34;\\\\ \\\\ \\\\__/ \\n\u0026#34; + \u0026#34; \\\\ \\\\___``\\\\ \\n\u0026#34; + \u0026#34; \\\\/\\\\ \\\\L\\\\ \\\\\\n\u0026#34; + \u0026#34; \\\\ \\\\____/\\n\u0026#34; + \u0026#34; \\\\/___/ \\n\u0026#34; + \u0026#34; \u0026#34;; String six=\u0026#34; ____ \\n\u0026#34; + \u0026#34; /\u0026#39;___\\\\ \\n\u0026#34; + \u0026#34;/\\\\ \\\\__/ \\n\u0026#34; + \u0026#34;\\\\ \\\\ _``\\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\ \\\\L\\\\ \\\\\\n\u0026#34; + \u0026#34; \\\\ \\\\____/\\n\u0026#34; + \u0026#34; \\\\/___/ \\n\u0026#34; + \u0026#34; \u0026#34;; String seven=\u0026#34;\\n\u0026#34; + \u0026#34; ________ \\n\u0026#34; + \u0026#34;/\\\\_____ \\\\\\n\u0026#34; + \u0026#34;\\\\/___//\u0026#39;/\u0026#39;\\n\u0026#34; + \u0026#34; /\u0026#39; /\u0026#39; \\n\u0026#34; + \u0026#34; /\u0026#39; /\u0026#39; \\n\u0026#34; + \u0026#34; /\\\\_/ \\n\u0026#34; + \u0026#34; \\\\// \\n\u0026#34; + \u0026#34; \u0026#34;; String eight=\u0026#34;\\n\u0026#34; + \u0026#34; __ \\n\u0026#34; + \u0026#34; /\u0026#39;_ `\\\\ \\n\u0026#34; + \u0026#34;/\\\\ \\\\L\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\/_\u0026gt; _ \u0026lt;_ \\n\u0026#34; + \u0026#34; /\\\\ \\\\L\\\\ \\\\\\n\u0026#34; + \u0026#34; \\\\ \\\\____/\\n\u0026#34; + \u0026#34; \\\\/___/ \\n\u0026#34; + \u0026#34; \u0026#34;; String nine=\u0026#34;\\n\u0026#34; + \u0026#34; __ \\n\u0026#34; + \u0026#34; /\u0026#39;_ `\\\\ \\n\u0026#34; + \u0026#34;/\\\\ \\\\L\\\\ \\\\ \\n\u0026#34; + \u0026#34;\\\\ \\\\___, \\\\ \\n\u0026#34; + \u0026#34; \\\\/__,/\\\\ \\\\ \\n\u0026#34; + \u0026#34; \\\\ \\\\_\\\\\\n\u0026#34; + \u0026#34; \\\\/_/\\n\u0026#34; + \u0026#34; \u0026#34;; switch (rel){ case \u0026#39;0\u0026#39;: return zero; case \u0026#39;1\u0026#39;: return one; case \u0026#39;2\u0026#39;: return two; case \u0026#39;3\u0026#39;: return three; case \u0026#39;4\u0026#39;: return four; case \u0026#39;5\u0026#39;: return five; case \u0026#39;6\u0026#39;: return six; case \u0026#39;7\u0026#39;: return seven; case \u0026#39;8\u0026#39;: return eight; case \u0026#39;9\u0026#39;: return nine; default: System.out.println(\u0026#34;Unknown error...\u0026#34;); } return \u0026#34;\u0026#34;; } private float evaluate(String expression) { char[] tokens = expression.toCharArray(); Stack\u0026lt;Float\u0026gt; stackOfNum = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Character\u0026gt; stackOfOps = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; tokens.length; i++) { if (tokens[i] == \u0026#39; \u0026#39;) continue; if (tokens[i] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; tokens[i] \u0026lt;= \u0026#39;9\u0026#39;) { StringBuilder str = new StringBuilder(); while (i \u0026lt; tokens.length \u0026amp;\u0026amp; tokens[i] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; tokens[i] \u0026lt;= \u0026#39;9\u0026#39;) { str.append(tokens[i++]); } i--; // 回退一位 stackOfNum.push(Float.parseFloat(str.toString())); } else if (tokens[i] == \u0026#39;(\u0026#39;) stackOfOps.push(tokens[i]); else if (tokens[i] == \u0026#39;)\u0026#39;) { while (stackOfOps.peek() != \u0026#39;(\u0026#39;) stackOfNum.push(calculate(stackOfOps.pop(), stackOfNum.pop(), stackOfNum.pop())); stackOfOps.pop(); } else if (tokens[i] == \u0026#39;+\u0026#39; || tokens[i] == \u0026#39;-\u0026#39; || tokens[i] == \u0026#39;*\u0026#39; || tokens[i] == \u0026#39;/\u0026#39;) { while (!stackOfOps.empty() \u0026amp;\u0026amp; hasPrecedence(tokens[i], stackOfOps.peek())) stackOfNum.push(calculate(stackOfOps.pop(), stackOfNum.pop(), stackOfNum.pop())); stackOfOps.push(tokens[i]); } } while (!stackOfOps.empty()) stackOfNum.push(calculate(stackOfOps.pop(), stackOfNum.pop(), stackOfNum.pop())); return stackOfNum.pop(); } private boolean hasPrecedence(char op1, char op2) { if (op2 == \u0026#39;(\u0026#39; || op2 == \u0026#39;)\u0026#39;) return false; return (op1 != \u0026#39;*\u0026#39; \u0026amp;\u0026amp; op1 != \u0026#39;/\u0026#39;) || (op2 != \u0026#39;+\u0026#39; \u0026amp;\u0026amp; op2 != \u0026#39;-\u0026#39;); } private float calculate(char op, float b, float a) { switch (op) { case \u0026#39;+\u0026#39;: return a + b; case \u0026#39;-\u0026#39;: return a - b; case \u0026#39;*\u0026#39;: return a * b; case \u0026#39;/\u0026#39;: if (b == 0) { throw new UnsupportedOperationException(\u0026#34;Cannot divide by zero\u0026#34;); } return a / b; } return 0; } public static void main(String[] args){ Scanner in=new Scanner(System.in); System.out.print(\u0026#34;Enter expression:\u0026#34;); String input=in.next(); // String[] parts=input.split(\u0026#34;(?=[+-/*])|(?\u0026lt;=[+-/*])\u0026#34;); num_graphic ng=new num_graphic(); int result=(int)ng.evaluate(input); String str = result+\u0026#34;\u0026#34;; for (int i=0;i\u0026lt;str.length();i++){ System.out.println(ng.getGraphic(str.charAt(i))); } } } 参考资料 逆波兰表达式：https://en.wikipedia.org/wiki/Reverse_Polish_notation 调度场算法：https://en.wikipedia.org/wiki/Shunting-yard_algorithm http://www.network-science.de/ascii/ https://www.asciiart.eu/faq ","date":"2018-04-16T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/an-interview-question/","title":"一道笔试题"},{"content":"When I was a child, Whenever things in life have two or more options, I don’t know how to choose. Or when things are difficult for me, I don\u0026rsquo;t know how to do is right.\nWhen I saw 20s people encounter problems, they could handled it very well. They seem to know everything. So I thought I can do this like them when I 20s. At that time, I will no need anyone to ask for help.\nNow I\u0026rsquo;m 22. I fount I still can\u0026rsquo;t make a choice right now for difficult things. I still don\u0026rsquo;t know how to do is right. I am trying to find a perfect way to slove difficult question in the life, there may not be a \u0026lsquo;perfect\u0026rsquo; way at all. I have also seen some 30s people ask some question or chat on forum, sometimes I can feel their negative emotions. Obviously, they can\u0026rsquo;t solve all the problems either. There is a saying in the Chinese Analects：三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲，不逾矩。Can really no doubt at forty? I don\u0026rsquo;t think so. This question may be when I 40 years old, then I will be know.\nEvery adult is a child, they can\u0026rsquo;t slove everything problem. they are also need keep learning. Everyone is the same. The difference with children is that the older the more difficult to be forgiven if make a same mistake. The cost of mistakes will increase. Life does not allow them too many opportunities to try, so they can only be cautious, walking every step of the ice. They also have negative emotions, but they are not easily displayed in front of people.\n","date":"2018-04-12T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/forty-years-old/","title":"四十不惑"},{"content":"最近准备面试，复习一下数据结构，顺便总结下概念，加深印象，算法什么的以后慢慢补充～\n树 树(Tree)是(n\u0026gt;=0)个节点的有限集。当n\u0026gt;0,其余节点可分为m(m\u0026gt;0)个互不相交的有限集的集合(e.g. 有限集T1,T2\u0026hellip;)，其中每个集合又是一棵树，称为根的__子树(SubTree)。节点拥有的子树的个数称为__节点的度(Degree)。 度为0的节点称为__叶子节点(Leaf)或__终端节点。不为0的称为__非终端节点__或__分支节点__。节点的子树的根称为该节点的__孩子(Child)，相应的，该节点称为孩子的__双亲(Parent)。\n如果将树中节点的各子树堪称从左至右是有次序的(即不能互换)，则称该树为__有序树__，否则为__无序树__。森林(Forest)是m(m\u0026gt;0)棵互不相交的树的集合。\n二叉树 __二叉树(Binary Tree)__中每个节点至多只有两颗子树(即二叉树中不存在度大于2的节点)，二叉树的子树有左右之分，其次序不能任意颠倒。\n深度为k且有2^k-1个节点的二叉树称为__满二叉树__\n二叉树的性质：\n在二叉树的第i层上至多有2ⁱ⁻¹个节点(i\u0026gt;1)。 深度为k的二叉树至多有2ᵏ⁻¹个节点(k\u0026gt;=1)。 对任何一棵二叉树T，如果其终端节点树为n₀,度为2的节点数为n₂,则n₀=n₂+1。 具有n个节点的完全二叉树的深度为Log₂n+1。 AVL树 AVL树是一种自平衡的二叉查找树，详见: AVL树学习笔记\n遍历二叉树 遍历二叉树(Traversing Binary Tree)：按照某条搜索路径巡访树中每个节点，使得每个节点均被访问一次，而且仅被访问一次。\n二叉树的遍历方法总共有六种，但是一般限定为先左后右，因此只剩下三种方式，分别是__先序遍历(DLR)__，中序遍历(LDR)，后序遍历(LRD)。\n具体算法：\n线索二叉树 左子树 左标志域 数据 右标志域 右子树 lchild LTag data RTag rchild LTag包括：0 lchild域所指节点的左孩子;1 lchild域所指节点的前驱\nRTag包括：0 rchild域所指节点的右孩子;1 rchild域所指节点的后继\n这种节点结构构成的额二叉链表作为二叉树的存储结构，称为__线索链表__。其中指向节点前驱和后继的指针，叫做__线索__。加上线索的二叉树称为__线索二叉树__。\n赫夫曼树 __赫夫曼树__又称最优二叉树，即带权路径长度最短的树。\n从树中一个节点到另一个节点之间的分支构成这两个节点之间的路径，路径上的分支数目称为__路径长度__。从树根到每个节点的路径长度之和称为__树的路径长度__。__树的带权路径长度__为树中所有叶子节点的带权路径长度之和，通常记作WPL=\n赫夫曼编码 查找 静态查找表 为记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值称为查找算法在查找成功时的__平均查找长度__。对于有n个记录的表，查找成功的平均查找长度为：ASL=\n动态查找表 二叉排序树性质：\n若它的左子树不空，则左子树上所有节点的值均小于它根节点的值 若它的右子树不空，则右子树上所有节点的值均大于它根节点的值 它的左右子树也分别为二叉排序树 哈希表 排序方式 排序方式分为__内部排序__和__外部排序__，以下排序我会一一复习一遍并加入一些看法，篇幅可能会比较长。因此我会另开文章，专门进行讨论学习。先开个坑，慢慢写。\n内部排序 插入排序:直接插入排序, 二分插入排序, 希尔排序 交换排序:冒泡排序, 快速排序 选择排序:直接选择排序, 堆排序 归并排序 基数排序 插入排序 直接插入排序\n二分插入排序\n希尔排序\n交换排序 冒泡排序\n快速排序\n选择排序 直接选择排序\n堆排序\n归并排序 基数排序 外部排序 外部排序于我个人而言不常用，因此以后用到在补吧。\n复杂度比较 排序算法 平均时间复杂度 最好情况 最坏情况 空间复杂度 排序方式 稳定性 冒泡排序 O(n^2) O(n) O(n^2) O(1) In-Place 稳定 选择排序 O(n^2) O(n^2) O(n^2) O(1) In-Place 不稳定 插入排序 O(n^2) O(n) O(n^2) O(1) In-Place 稳定 希尔排序 O(n log n) O(n log^2 n) O(n log^2 n) O(1) In-Place 不稳定 归并排序 O(n log n) O(n log n) O(n log n) O(n) Out-Place 稳定 快速排序 O(n log n) O(n log n) O(n^2) O(log n) In-Place 不稳定 堆排序 O(n log n) O(n log n) O(n log n) O(1) In-Place 不稳定 计数排序 O(n+k) O(n+k) O(n+k) O(k) Out-Place 稳定 桶排序 O(n+k) O(n+k) O(n^2) O(n+k) Out-Place 稳定 基数排序 O(n*k) O(n*k) O(n*k) O(n+k) Out-Place 稳定 ","date":"2018-03-25T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/summary-of-data-structure/","title":"数据结构知识点总结"},{"content":"前言 Recently,I was learning the Spring Framework.\nAt first, I learn it from Spring official website of the guide. When I completed the first few guides, I find that I didn’t even understand why. So I had to give up.\nAfter that, I looked for other guides to learn and saw many examples of IOC(Inversion of Control), DI(Dependency Injection), and AOP(Aspect Oriented Programming). I probably understand, but I still can\u0026rsquo;t use the Spirng framework. on the forum, Someone told me that I only need more practice. But I don\u0026rsquo;t even know it how to work, e.g. annotation.\nObviously, I encountered resistance.\nOne day, I searched \u0026ldquo;Why is learning Spring Framework so hard\u0026rdquo; on search engines, I found the answer in quora. The high-vote answer is very good and inspiring. So I decided to relearn the spring framework from the official website. Just like a ring. Three months later, I returned to the origin.\nThanks for that article again!\n以下是可能会用到的资料：\nSpring Framework Documentation\nhttps://docs.spring.io/spring/docs/\nSpring官方建议使用Maven、Gradle之类的包管理工具，因此官网上隐藏了下载地址，不过还是可以通过链接访问的\nSpring-framework-release，截止博文发表之前，版本号为spring-framework-5.0.4.RELEASE\nhttps://repo.spring.io/release/org/springframework/spring/\nSpring核心容器依赖于Common-logging的JAR包，下载地址如下：\nhttps://commons.apache.org/proper/commons-logging/download_logging.cgi\n原文摘录 原文链接: http://springtutorials.com/spring-tutorial-1/\nA simple question for you before I begin:\nCan you count from 1 to 20?\nHere, Let me help you. Go ahead and read it out loud.\nOne. Two. Three. Four. Five. Six. Seven. Eight. Nine. Ten. Eleven. Twelve. Thirteen. Fourteen. Fifteen. Sixteen. Seventeen. Eighteen. Nineteen. Twenty.\nDo you see any pattern in the numbers above? Anything that rhymes with the words or the way you count them?\nSome of these end with ‘teen’ in them but is there anything else?\nUnlearn everything you know about numbers and see if you can spot anything that will help you see it?\n(Hint: There is none)\nMy daughter was 3 (she is 7 now) when she had to go through this exercise and she found it very challenging.\nI think she was 4 when she started to count a little more…\nTwenty One. Twenty Two. Twenty Three. Twenty Four. Twenty Five. Twenty Six. Twenty Seven. Twenty Eight. Twenty Nine. Thirty.\nDid she see any pattern now? Of course, she did. ‘Twenty‘ seemed to show up everywhere.\nCounting from thirty to forty was not any different now. She was over the learning curve and needed few corrections here and there.\nShe spent almost a full year learning to count from 1 to 20. But she spent only a few months going from 20 to 100.\nLet me clarify this. Counting from 1 to 20 is the hardest thing you can do.\nThere is no pattern here.\nYou have to learn it the hard way. Get over this curve and life becomes easier.\nTake that as a big lesson in life. Start anything and you have to go through the grind. Once you are past the initial struggle, things get easier.\nCan you predict what I am going to say next:\nLearning Spring Framework (or anything new) is no different from learning to count.\nIt is challenging at first but becomes easier as you progress. You will make mistakes. We all do. Have some patience.\nAs a kid, It took me a while to learn the colors of the rainbow in its correct order. And then my best friend gave me a pattern – ROYGBIV or VIBGYOR. I still remember it decades later.\nAs a Spring Developer, you want to learn why things work the way they work. The syntax, the annotations, the examples will become easier to understand that way. A pattern will emerge sooner or later from the initial randomness.\nIt is worth the effort to go through this randomness. A good foundation is the core of any learning. Find your own randomness.\nBuilding a RESTful Web Service 源文档：https://spring.io/guides/gs/rest-service/\n部分代码摘录如下：\nsrc/main/java/hello/Greeting.java package hello; public class Greeting { private final long id; private final String content; public Greeting(long id, String content) { this.id = id; this.content = content; } public long getId() { return id; } public String getContent() { return content; } } src/main/java/hello/GreetingController.java package hello; import java.util.concurrent.atomic.AtomicLong; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class GreetingController { private static final String template = \u0026#34;Hello, %s!\u0026#34;; private final AtomicLong counter = new AtomicLong(); @RequestMapping(\u0026#34;/greeting\u0026#34;) public Greeting greeting(@RequestParam(value=\u0026#34;name\u0026#34;, defaultValue=\u0026#34;World\u0026#34;) String name) { return new Greeting(counter.incrementAndGet(), String.format(template, name)); } } @RequestMapping注解确保对/greeting的HTTP请求映射到greeting()方法中，默认映射所有HTTP操作，所以即使不指定GET，PUT还是POST也没关系.若想指定映射方式可使用@RequestMapping(method=GET)的方式.\n@RequestParam将查询字符串name的值绑定到greeting()方法的name参数中.查询字符参数为可选,默认为required=true.\n传统的MVC控制器和上面的RESTful Web服务控制器之间的一个主要区别在于HTTP响应主体的创建方式.这个RESTful Web服务控制器只需填充并返回一个Greeting对象,而不是依赖视图技术将问候数据的服务器端呈现呈现给HTML.对象数据将作为JSON直接写入HTTP响应.\n@RestController为Spring 4的新注解,它将类标记为控制器,其中每个方法都返回一个域对象而不是视图.它是@Controller和@ResponseBody的缩写.\nsrc/main/java/hello/Application.java package hello; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } @SpringBootApplication是一个方便的注释，它增加了以下所有内容：\n@Configuration将类标记为应用程序上下文的bean定义的来源。\n@EnableAutoConfiguration通知Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。\n通常你会为Spring MVC应用程序添加@EnableWebMvc，但Spring Boot在类路径中看到spring-webmvc时会自动添加。 这将该应用程序标记为Web应用程序并激活关键行为，例如设置DispatcherServlet。\n@ComponentScan告诉Spring在hello包中查找其他组件，配置和服务，以便找到控制器。\n测试 打包：mvn package\n测试运行:java -jar gs-rest-service-0.1.0.jar\n访问：http://localhost:8080/greeting\n或者加入参数：http://localhost:8080/greeting?name=User\n","date":"2018-03-18T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/learn-spring-framework/","title":"Learn Spring Framework"},{"content":"I remember Let\u0026rsquo;s share our memories and make sure this website does not disappear.\n很明显，这是一个分享记忆的网站，网站本身做的也是非常炫酷。\n初次进入 I remember 时，它就像一个充满了闪光沙粒的异世界——由记忆组成。这个世界给予了充分的自由，可以拖动鼠标向前行进或后退，前后左右，甚至斜着走。去任何你想去的地方，探索任何你想探索的东西。\n鼠标滚轮可以进行视角的放大或缩小，放大后可以点击每一个闪光，从而查看别人分享的记忆。人们在这里分享心情、游记甚至表达对未来的寄托。这个完全由用户上传，汇聚了来自全世界的记忆的地方，以此组成一个完整的记忆世界。\n还可以通过关键字来搜寻类似的记忆，过程特效也做的非常棒。如此炫酷的网站，还不快来体验一下！\n友情提示: 打开后可能会感觉风扇狂转，这不是错觉:D\n1000 Awesome things 快节奏的生活使人终日忙忙碌碌，还要关注着很多事情，人的大脑就像CPU一样不停歇的运转，仿佛上帝终于发现让 CPU 闲置就是浪费这个道理一样。长久下来难免就会产生很多负面情绪，很难开心起来。\n即使有了闲暇的时候，也没办法完全放松下来。总感觉时间过的那么快，什么都来不及去做。大概再也回不到过去那种“忙的时候忙，闲的时候能静下来思考些东西而不必考虑时间流逝或者什么都不想只管玩”生活状态了。\n上文转载的文章《长大后之所以不快乐，是因为成年人丧失了获取快乐的天赋！》中提到的《生命中最美好的事都是免费的》这本书以及摘抄的 80 个能另人开心起来的美妙时刻便是脱胎于这个网站。\n单单那 80 个能令人开心起来的美妙时刻就让人感觉很平静，何况是 1000 个！\n说个我个人最近的：\n经常在那家板面店吃饭，我和店主都认识了。每天订的板面，店主做好后，出门前在微信上跟我说一声，随后我回应一声就穿好外套下楼。每次都是我们两个__同时__到达后门，时间上刚刚好，经常精确到秒级。 ","date":"2018-03-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/recommend-two-sites/","title":"Recommend two websites"},{"content":" 此文系转载，原文来源：豆瓣，地址:https://www.douban.com/note/323805946/\n不知道你是否注意到这样一种情况：\n那些容易快乐的人，常常都被冠以这样的评价：热爱生活！\n可他妈的什么叫热爱生活？积极？坦然？开放？热忱？都对又都不对！\n罗曼罗兰也说：生活中只有一种英雄主义，那就是在认清生活真相之后依然热爱生活。可是这也没说太清楚。\n当我读到《孟子·离娄下》这一句的时候，突然发现这才是一切的答案：“大人者，不失其赤子之心者也。”\n啥意思？网上有一个解释我认为很好——伟大的人是童心未泯的人。\n赤子是初生婴儿。孩子们为什么会很容易快乐，因为他们有一颗赤子之心。而一旦人们上岁数，绝大多数人已经没有这种赤子之心了。\n世界还是这个世界，你还是你。可是你不快乐了，你和世界的实际关系变了吗？没有变，变得是你的那颗心，你失去了那个获取快乐的天赋。\n就连知乎这种社区，当有人问“为什么长大以后反而不容易快乐”的时候，最火的答案给快乐的定义是这样子：【快乐 = 现实 - 期望】！\n看到了吧，成年人的世界里快乐是算计出来的！但是你睁大眼睛看看周围的孩子们，他们去捉虫子的时候会“现实”减去“期望”吗？他们奔跑在雪地里撒欢的时候会“现实”减去“期望”吗？他们戴着面具和你捉迷藏的时候会“现实”减去“期望”吗？并没有！\n事实上，大部分成年人已经异化为世俗社会的绝对奴隶！除了算计之外，忽视了生活中非常多的快乐！而那些容易快乐的，热爱生活的人，他们之所以容易满足，正是因为他们捕捉快乐的能力还健在！\n其实，每个人每天都有值得高兴的时刻！可悲的是不容易快乐的人，即使注意到了，也没法把他们当成生活的能量源泉之一！\n如果你说：我的生活一团糟，哪里有快乐的事情？好，让我用《生命中最美好的事都是免费的》这本书里的一小部分事情来提醒你一下，那些随处可见的免费的快乐，我不信你没有享受过他们：\n这样我就随便选80个事情，实际这本书里提到了200多个事，你需要做的就是每念一句话，就脑补一下是否有过相同经历，然后感受一下自己那时的感想（也可以看几个就拉倒结尾，结尾有段总结也许看了没坏处）：\n长途旅行后回到你自己的床上 偷偷携带便宜糖果进入电影院 那个卡在牙缝中的菜叶子终于从你牙缝里出来了 正在播放的歌词好像就是为你而写的 学了一个新词，突然走到哪儿都能看见它 当你回家时狗狗真的很兴奋 快要睡着前，有人给你掖一掖被角 婴儿在你怀里渐渐入睡 遗失好久的东西，在你最不经意的时候却找到了它 在超市收银处挑选了一条最快的队 你讲了一个特冷的笑话，却有人笑了 当你刚好松开加油枪，结果是个整数 夜深人静脱掉高跟鞋，光着脚走回家 穿上那条最显你身材的裤子 在温暖的被窝里脱掉袜子 和你亲爱的人一起打盹 在遥远的外地看见家乡的车牌 你要见的人比你来得还迟 在深夜空荡的街道独自一人骑着单车 注视了某人好久，终于想起他是谁 清空电脑回收站 闻着咝咝作响的培根香味醒来 在快餐厅上班的朋友多给了你一点快餐 穿上你刚从商店买的鞋 在公园里找到最完美的一片草地坐下 如果你们在彼此面前放屁很自在 独自在家裸身走来走去 插播广告时换台，按回去时正好节目又播开了 跟一帮朋友会面，他们停下交谈来欢呼你的到来 脚踩在结冰的水坑上，冰面发出清脆的咔嚓声 有人夸赞你的新发型 公路旅行的最初几个小时 电话响了，是你心里正在想的那个人 踢掉汽车挡泥板上冻住的雪块 艰难骑车到山顶，再飞速冲下山去 深夜把你送到家的朋友，直到看着你进了屋才离去 收音机调得很完美，没有一点杂音 早上醒来好渴，手边刚好有一杯水 牛排接触热烤架的声音 无意中发现某台在重播你最爱的电视剧 随手翻开书就是你想找的那一页 用嘴接住食物 雨刷和你听着的歌是同一个节拍 坐在你刚铺好的床上，欣赏你打扫房间后的成果 欢快地奔跑到门口，迎接下班回家的爸爸妈妈 把垃圾远远投进垃圾箱 解开长长的马尾辫 学会一个新的快捷键 剧情揭晓之际，你猜到了一个复杂的情节转折 用手指在热蒸汽的镜子上画画 发现云朵的奇形怪状 密友之间那长长的、惬意的静默 那个你不想参加的社交活动被取消了 有一个人为你留电梯门 寒夜里大口喝着热汤 饮料泡沫到了杯子边缘但没溢出来 某人给你占了个座位 你点的外卖出人意料地早到了 吃小时候最爱吃的东西 下载速度好快噢 看见老人手牵着手 看见一只超级开心的狗狗在散步 熟食柜台的伙计让你免费品尝熟食样品 拧上发条的咔嗒声 掉了一个玻璃杯，迅速伸出你的脚丫，玻璃杯打到你的脚丫，没有掉在地板上碎裂 跑步前进赶公交赶火车，竟然赶上了 给抽屉里的一只孤儿袜子找到洗漱一新的、一度失散的弟弟妹妹 在你的笔记本或手机没电关机前，你飞速插上电源 陌生人路过，主动提出给你和你身边的人照一张合影 用吸尘器清洁一块脏地毯，听见小石子全部被吸进软管的声音 步行或者骑单车，比堵车中的汽车快 积雪在你靴子下面咯吱作响 餐厅送你的免费面包是热的 漫长一日后摘下眼镜或隐形镜片 在高速公路上伴你一路行驶的那辆陌生车辆 连根拔起一株野草 初吻前期待的时刻 你不在时室友打扫了房间 深秋的夜晚，把车窗放下四处兜风 你的宠物留意到你心情不好，跑过来蹭你 好了，那么上面这些你读了有什么感受？我猜至少你会感觉有那么些事情是很美妙的吧？那就对了！事实上大部分的人的日常生活中，都不缺少这样那样的小快乐！！\n这些是尼尔·帕斯理查这本《生命中最美好的事都是免费的》这本书中少部分内容，他用一颗敏感的心收集到了很多让人们感觉很美好的寻常小事。作者曾创建了一个专门收集这种小快乐的博客，叫“1000件了不起的事”，这些事情，看似微不足道，但确实很美妙。这个博客在2009年获得Webby 奖。这个奖被称作互联网的奥斯卡，可见其分量。\n为什么这么一个网站会受人追捧？其实回到开头的问题，可以知道，人们花时间去收集和整理这些令你愉悦的瞬间，实际上有助于你找回那种与生俱来的天赋！这本书中所涉及到的内容是免费的也是快乐的，是微笑的但是是实实在在的，awesome things是极好的小事，正如小确幸一词！村上村树也说过，没有小确幸的人生，不过是干巴巴的沙漠罢了。\n希望我们在干巴巴的成人世界里，能逐渐找回遗失掉的寻找快乐的天赋！\n也希望你跟帖分享那些生活中的快乐点滴。\n原文地址:https://www.douban.com/note/323805946/\n","date":"2018-03-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/chasing-happiness/","title":"追逐快乐"},{"content":" 马伯庸《寂静之城》未删节版本全文\n发表在 2005 年第 5 期《科幻世界》上的本文由于众所周知的原因进行了删节。以下是发在马伯庸个人网站上的原文。\nAnd in the naked light I saw ten thousand people, maybe more.\nPeople talking without speaking, people hearing without listening.\nPeople writing songs that voices never shared, no one dared disturb the sound of silence.\n—— The sound of silence\n美利坚合众国，2015 年，纽约。\n当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。\n其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。\n阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。\n电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。\n“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。\n“19842015”\n阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音。\n他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。 话筒里的声音仍旧在继续着。 “关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”\n“知道了，谢谢。”\n阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。\n电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。\n每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此 19842015 就是阿瓦登，阿瓦登就是19842015.阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。\n有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。\n“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登 EMAIL 信箱的服务器；还有时候它是监察网络的 FBI 特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。\n简直就象是老大哥一样无微不至。\n电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。\n音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。\n“缔造健康的互联网络，美国万岁！”\n音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”\n这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和 BBS 论坛。其中 BBS 选项呈现灰色，说明这项功能还没有开通。\n整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。\n阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。\n他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE 浏览器没有地址栏，就算知道地址也没有用处。\n“您有一封新邮件。”\n系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。\n“To: 19842015\nFrom：10045687\nSubject: 模块、已经、完成、当前、项目、是否、开始。”\n阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。\n这封信很简短，但是内容很充实。19842015 是阿瓦登的网络编号，而 10045687 则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。 阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的 TXT 文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。\n“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。\n这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。\n他对照着这份列表，很快就完成了一封文字风格与来信差不多的 EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。\n接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。\n阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者 USB 接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。\n完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的 EMAIL。\n这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。\n阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。\n他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的 BBS 论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。\n阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。\n纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。\n“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。\n这时候正是 11 月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。\n距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。\n站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：\n“烟，有吗？”\n男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。\n阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：\n“没有。”\n男人很失望，又一次不甘心地张开嘴。\n“酒，有吗？”\n“没有。”\n阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。\n这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。\n阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。\n这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。\n“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他 X 的，老 * 受够了……”\n男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。\n而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。\n警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。\n联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。\n“他，是，你朋友？”\n“我，不，认识。”\n警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。\n阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。\n街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”\n阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。\n大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。\n车站对面就是阿瓦登要去的地方，那是有关部门负责受理 BBS 论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。\nBBS 论坛是一种奇特的东西，从理论上来讲它完全多余，BBS 的功能完全可以由 EMAIL 新闻组来取代，后者更容易管理和审查。而且申请使用 BBS 论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设 BBS 则几乎是不可能。\n因此真正对 BBS 有兴趣的人少之有少。阿瓦登当初之所以决定申请 BBS 论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。\n阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用 BBS 论坛回想起一些当年的事情。\n阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部 BBS 论坛科。”\n一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。\n“公民，请您站在原地不要动。”\n一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。\n“缔造健康的互联网络，美国万岁。”\n阿瓦登跟着声音重复了一遍。\n“请前往八号窗口。”\n电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。\n阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。\n“请把文件放入盒子里。”\n柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。\n“请把文件放入盒子里。”\n声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。\n“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。\n很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。\n“你申请 BBS 服务的目的是什么？”\n喇叭后的女声浸满了纯粹事务性的腔调。\n“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”\n阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。\n对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。\n“最后手续确认，你已经获得 BBS 论坛浏览权。”\n“谢谢。”\n“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。\n“这是有关部门核发给你的 BBS 论坛统一用户名与密码，BBS 论坛列表、互联网 BBS 论坛使用指南及相应法规、以及最新健康网络词汇列表。”\n阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。\n他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。\n“手续办理完毕，请离开网络部回到自己的工作岗位上。”\n甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。\n在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到 BBS 的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。\n如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。\n忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。\n阿瓦登很快注意到，在装有 BBS 论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母 i。\n很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照 BBS 论坛统一用户名与密码、BBS 论坛列表、互联网 BBS 论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：title\n题目？这是什么意思？\n阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？\n这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。\n阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。\n无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。 他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用 BBS 论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。\n回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。\n过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。 信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。\n阿瓦登打开了包含有 BBS 论坛的用户名、密码和 BBS 论坛列表的两封信。他看到自己的论坛通用用户名叫做 19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS 论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。\n小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。\n阿瓦登又打开了那份 BBS 列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新 BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。\n居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。\n阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了 TITLE 五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。\n一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为 BBS 论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU,YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。\n忽然，他又想到了那个神秘的 title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟 title 有关系？\n阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的 title 部分。五张光盘各隐藏着一个字母，凑到一起就是 title，那么按照这个方式，那五封 EMAIL 的 title 凑到一起，就变成了一句话：去用户学习论坛。”\n阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。\n用户论坛是一个事务性论坛，里面是一些关于 BBS 用户资料的投诉帖和管理帖，斑竹的是一个叫 19387465 的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：\n“每周日辛普森大楼 5 层 B 户。”\n又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL 和 BBS 论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。\n究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼 5 层 B 户又会发生什么事情呢？\n阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。\n营造健康的互联网络。\nFUXKYOU, YOUSONOFBITCH。\n阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。\n在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。 日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。\n阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。\n他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。\n值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着 B 户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。\n阿瓦登深深吸了一口气，伸手去按电纽。\n电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：\n“你，找谁？”\n女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部 BBS 论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。\n看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：\n“title。”\n阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。\n女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。\n一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。\n阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。\n他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：\n“欢迎加入说话会！”\n“说话会？”\n出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。\n“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。\n阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”\n“你们，是什么，人，这，是，哪里？”\n阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。 “这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”\n另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。\n阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。” 她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。\n“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。\n“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。\n“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他。\n“你是怎么知道这个集会的？”\n阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。\n“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”\n“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”\n于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：\n“可以问个问题吗？说话会到底是什么？”\n带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：\n“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。\n“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。\n“可是，要说些什么呢？”阿瓦登又问道。\n“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”\n这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。\n“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”\n阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。\n“我不会离开的，我要加入你们，说话。”\n“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”\n她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”\n“假名？”\n“是的，和我户籍本上的名字是不同的。”\n“可是，为什么？”\n“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”\n阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。\n通过介绍，阿瓦登了解到阿尔特弥斯是网络部 BBS 论坛管理科的职员，今年 23 岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。\n接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41 岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。\n那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。\n“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。\n说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。\n“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。\n“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。\n“真的什么都可以？”\n“什么都可以，在这里没有任何限制。”\n阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”\n在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。” “我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。\n“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。\n“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。\n屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。\n“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”\n“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”\n瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请 BBS 论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为 BBS 论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对 BBS 论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请 BBS 论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”\n“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。\n“你是第二个找到说话会的人，第一个是杜拉丝小姐。”\n阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”\n阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：\n“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”\n“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。\n“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。\n“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”\n大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。\n很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。\n“王二，你可曾看过《1984》？”\n阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？” “这是一本书的名字。”\n“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要 FIND 和 REPLACE 两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”\n“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”\n阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。\n“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。\n“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”\n“太好了，然后她写下来了，对吗？”\n“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”\n大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。\n杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。\n“1984 的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。\n“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”\n“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。\n“就好象同样是 0 和 1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”\n阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。\n“很不错的比喻，王二，就是如此，真不愧是程序员。”\n谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。\n“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”\n阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。\n“活动？还有什么活动？”\n阿瓦登奇怪地问道，说话会除了说话还有其他活动？\n“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”\n“完全交流？”\n“就是 intercourse”\n“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。\n“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”\n兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”\n阿瓦登的脸色涨红，热的仿佛夏季的电脑 CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。\n还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。 最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。\n强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……\n……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。\n“很舒服，对不对？”她问道。\n“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”\n“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：\n“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”\n“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。\n“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。\n“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。\n“谢谢你。”\n阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。\n这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”\n“我记住了。”阿瓦登回答，然后转身要走。\n“王二。”\n阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”\n阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。\n此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲 1984 的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号 19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。\n有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。\n在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政 polit/ic”、“pol/itic”等近乎无限种表达方式。\n当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。\n这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。\n这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。\n尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。\n“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”\n瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。\n“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”\n“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。\n“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”\n杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。\n不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。\n从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。\n他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间 里，你是 19842015，而我是 19387465。”\n对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。\n除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的 EMAIL 与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个 title 一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。\n讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。\n“FUXKYOU, YOUSONOFBITCH！”\n每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。\n这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。\n偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。\n有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是 EMAIL 与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL 新闻组里也全是类似主题。\n不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。\n阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”\n杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。\n“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于 intercourse 的快乐。\n“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。\n“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。\n阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以 24 小时工作的旁观者并没发出任何警报。\n阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。\n今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。\n车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。\n有什么地方不对劲！\n他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。\n也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。\n“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。\n他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。 这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。\n这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。\n阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。\n他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。\n他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU,\nYOUSONOFBITCH”都不能说。\n从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。\n另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。 阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封 EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。\n其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。\n说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的 EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。\n因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。\n与词汇列表更新速度相对的，EMAIL 和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。\n这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。 然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。\n阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论 EMAIL，新闻组，BBS 论坛还是其他什么现在全部都变成了一样的东西。\n从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。\n忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。\n阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。\n于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。\n如今各大平台关键字屏蔽，信息监控，折叠算法，删贴层出不穷。加上某墙的存在，将我们死死限制在一个封闭的牢笼里。所有的情形就像是按照小说的剧本，正在逐步变为现实。\n白名单真的不远了。\n10年前看完觉得这是个笑话\n10年后，现实成了一个笑话\n寂静之城，一语成谶\n——豆瓣某已注销用户\n","date":"2018-02-07T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-silence-city/","title":"寂静之城 (The Silence City)"},{"content":"前言 前一段时间发现国内的Coding可以部署动态Pages，意味着不需要购买服务器就可以免费得到一个带评论的动态博客，还是很不错的，毕竟Github的静态Pages要评论的话只能借助第三方服务，而且Coding在国内，速度上有天然优势。\n体验 于是美滋滋的注册了一个帐号，现在的注册人数应该不多，三位数纯英文的用户名都可以轻松注册的到（最低要求三位），想当年注册个Google帐号六位纯英文的已经很难了，而且各种奇葩丑到爆六位英文组合都被人注册了……\n之后进入了主界面，不得不说，虽然界面和Github比较像，但这不是重点，重点是那个WEBIDE的DEMO试玩了一下，真的是AWESOME，在来就是那个动态Pages了，启动部署后发现网址居然是好长（\u0026gt;30位）的一个随机码.coding.io，果然如官网所说会得到一个”xxx.coding.io“的网址:(，之前还以为是用户名+coding.io，就像Github的静态页面一样。现在这就比较坑了，不搞个域名都没什么实用的价值……然而自定义域名需要银牌会员以上，想成为银牌会员需要完善身份信息，然后还是受限制的自定义域名，每次访问都会出现“该网站托管在 Coding Pages 上” ，然后再跳转到原站。想要不受限制，需要升级到金牌会员以上，也就是充值199/year……\n免费的东西果然还是不能想太多，考虑到WordPress过于臃肿，于是我选择了Typecho，Coding有个官方的pages-demo项目，其中README中截图显示可以在创建仓库时直接从github开源项目中导入仓库，我认真的找了下，骗子！明明没有这个选项！（不知道是不是被官方在后期更新中砍掉了)，只好自己推了，从官网下载后解压，原本想直接上传上去，结果却提示有非法字符，后来发现文件中似乎有一些\u0026quot;@\u0026ldquo;字符，这样的话只能用Git了。\n最后用Git推送到Coding时，出现了一个错误，如下所示：\nerror: failed to push some refs to \u0026lsquo;../xxx.git\u0026rsquo;\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: See the \u0026lsquo;Note about fast-forwards\u0026rsquo; in \u0026lsquo;git push \u0026ndash;help\u0026rsquo; for details.\n原因可能是因为创建Coding仓库的时候带了一个README，和本地仓库不同步，可能需要git pull一下，我当时没试，直接git push -f origin master强制推送上去了。\n最后重新部署一下，访问网址，然后根据动态Pages中所提供的数据库连接信息填写数据库信息，安装成功！\n","date":"2018-02-05T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-first-experience-of-coding-dynamic-pages/","title":"Coding动态Pages初体验"},{"content":"前几天，有人往群里发了一首音乐，是仙剑奇侠传一中的经典音乐。\n每次听到仙剑的经典音乐，总会把我拉进回忆漩涡里。那种奇特而又熟悉的感觉，就想起在玩仙剑四的场景。在游戏里探索，进入民宅搜索可用的物资，在村子里四处闲逛。\n村子环境很好，各种小木屋，很漂亮，有些还是二层小楼房。神游仙境，每次看到人就想过去跟他对话。恬静舒适悠闲的环境，深深向往之。那真是相当神奇的体验。以至于它深深嵌入到我的记忆里，每次音乐响起就能感受到那种真实。因此有人说，仙剑最大的成就并不是游戏，而是音乐。\n我最先接触到到的是仙剑一，通过电视剧。之后开始玩的第一部仙剑系列游戏便是仙剑奇侠传四，当时没通关，现在想想真是遗憾。之后仙剑三热播，那时候我已经很少看电视了。由于各电视台来来回回播了好几遍，偶尔别人在看的时候，我也在旁边跟着看一段。断断续续，竟然也拼凑完了后半部。不过讲真，我个人并不喜欢仙剑三，就后半部而言感觉电视拍的太假，可能精彩的部分在前半部吧(雾，不过音乐还是一如既往的赞！\n当天晚上听到那首曲子后，忽然发现对于曾经在我心里留下这么深记忆的系列作品，我却从未认真了解过它。之后我逛了一些论坛，wiki，才发现它都已经出到了第六部。遗憾的是再也没有了以前的号召力，或许只有真正的粉丝(此粉丝非彼粉丝XD)才会一直追随仙剑这么久吧。\n如今仙剑系列游戏做了一部又一部，现在的制作团队早已不是以前的了，这样一个大IP如今只剩下情怀了吧。\n\u0026hellip;\n这也是 2017 年最后一篇博文了。\n再见了，2017。 ","date":"2017-12-31T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/new-year-eve/","title":"New Year's Eve"},{"content":" 就像在河的对岸\n我看不到她，她看不到我\n但似乎能够感受到来自对岸细若游丝的信号\n像一根随时都会断掉的线\n就像是宇宙中遥远星辰散发着若有若无的光芒\n我不知道该如何回应\n耳边的轻音乐让我一度以为回到了从前\n那段缓慢的不知忧虑的时光\n随之而来的洪流将这一切击的粉碎\n窗外一眼望去仍然是被树木遮掩\n四周依然是熟悉的景物，一如三年以前\np.s. 轻音乐：歌曲：命 歌手：石田勝範\n","date":"2017-11-10T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/line/","title":"线"},{"content":"2105 年，我在一个婚礼现场，周围有一些熟悉的人，他们是小学同学，另外还有一些不熟悉的人。\n我们都在沙子上坐着，背靠着身后长约五六米，高约一米的破败围墙，静静的看着前方来来往往的人，百无聊赖。黄土弥漫在空气中，有轻微的朦胧感。左前方似乎是一座被黄沙掩盖的只剩下上半截的城堡，人们在那里或来回走动，或聚在一起讨论着什么，大概是婚礼前的准备事宜吧。一眼望去，四周都是看不到边的荒漠。沙子很厚，时不时有人从沙子地下钻出来，一会又钻进去，大概是很好玩。\n其中有两个同学似乎是禁止进入的，管理人员一来我和其他同学便合伙把他藏在沙子里。等人走后，再让他出来。\n这时候阳光直射过来，我们都低下头紧紧的蜷缩在围墙后面，就像是末日中等待救赎的人。\n“什么，你问我为啥是 2105 年？”\n“我怎么知道啊衰！”\n","date":"2017-10-20T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/a-dream/","title":"一个梦"},{"content":"体验了 Win10 一个多月后，感觉不光系统臃肿，还有些迷之 BUG，首先是点关机后，系统实际上并未关闭，根据网上的方法禁用了 intel management engine interface 驱动后解决。另一个是看视频暂停后，再继续声音会突然变大，只能在系统音量那随便调一下就正常。虽然并不怎么影响使用，但作为完美主义者这是绝对无法忍受的。曾数次 Google，无论是禁用声音效果还是改声卡驱动都无济于事……\n心灰意懒，于是在使用了 Win10 一个多月后，我又决定要换系统了:D，这大概是我使用 Windows 系统以来时间最短的一个版本了吧（笑\n为了方便，还是自己重新写一个吧，基本上是从官网复制一遍，省的每次都要去翻官网的文档，以下制作启动盘等准备工作省略，直接从进入 live 环境开始。\n安装前的准备工作 联网 网线直接 dhcpd\n如果没有网线，直接手机开 USB 共享网络，插到电脑上，然后再 dhcpd 😜\n开个玩笑，一定要连无线网络的话，官网文档见：Iwd，我也摘抄如下：\nFirst, if you do not know your wireless device name, list all Wi-Fi devices:\n[iwd]# device list If the device or its corresponding adapter is turned off, turn it on:\n[iwd]# device device set-property Powered on [iwd]# adapter adapter set-property Powered on Then, to initiate a scan for networks (note that this command will not output anything):\n[iwd]# station device scan You can then list all available networks:\n[iwd]# station device get-networks Finally, to connect to a network:\n[iwd]# station device connect SSID 更新系统时钟 默认情况下连上网络就会自动更新的，可以用以下命令查看一下：\n# timedatectl 分区 这里只写使用 64-bit x64 UEFI 引导启动的情况，毕竟 2023 年了，32-bit IA32 UEFI 和 MBR 越来越少了\n还是要查看一下启动模式：\n# cat /sys/firmware/efi/fw_platform_size 返回结果的解释，这里就直接复制官网了：\nIf the command returns 64, then system is booted in UEFI mode and has a 64-bit x64 UEFI. If the command returns 32, then system is booted in UEFI mode and has a 32-bit IA32 UEFI; while this is supported, it will limit the boot loader choice to GRUB. If the file does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired (UEFI vs BIOS), refer to your motherboard\u0026rsquo;s manual.\n如果上面的命令返回 64 的话，就可以继续了，其他情况可以 return 了 🤣\n首先查看分区：\n# fdisk -l 就会看到磁盘例如 /dev/sda, /dev/sdb ，或者已有的分区例如 /dev/sda1,/dev/sda2\n假设 /dev/sda 是一个全新的、未创建分区表的磁盘，输入以下命令开始操作 /dev/sda ：\n# fdisk /dev/sda 上述命令执行完后，输入 m 可以查看 help\n首先创建 UEFI 引导分区，输入 g 创建一个 GPT 分区表，然后输入 n 新建分区，起始序号和 First sector 默认回车就行，Last sector 输入 +512M 回车，创建完默认是类型 Linux filesystem，输入 p 可以查看新创建的分区，输入 t 选择分区序号来修改分区类型，输入 l 可以查看所有的类型，输入 uefi 将分区类型修改为 EFI。然后再次输入 n 创建 root 分区，一路回车默认即可，最后输入 w 保存\n保存完，再次执行 fdisk -l 就会看到类似如下结果：\nDevice Start End Sectors Size Type /dev/sda1 2048 1050623 1048576 512M EFI System /dev/sda2 省略 省略 省略 省略 Linux filesystem 格式化分区 格式化 UEFI 分区建议使用 FAT32 格式，详情见官网文档EFI_system_partition#Format_the_partition，具体我也摘抄如下：\nTo prevent potential issues with other operating systems and since the UEFI specification says that UEFI \u0026ldquo;encompasses the use of FAT32 for a system partition, and FAT12 or FAT16 for removable media\u0026rdquo;[5], it is recommended to use FAT32.\n所以格式化 EFI 分区输入如下命令:\n# mkfs.fat -F 32 /dev/sda1 然后格式化 root 分区：\n# mkfs.ext4 /dev/sda2 挂载文件系统 # mkdir /mnt/boot # mount /dev/sda1 /mnt/boot # mount /dev/sda2 /mnt 安装 选择镜像 编辑以下文件：\n# vim /etc/pacman.d/mirrorlist 将 Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 放到第一行，保存退出\n安装必要的软件包 # pacstrap -K /mnt base linux linux-firmware 系统配置 生成 fstab 文件 执行下面的命令:\n# genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 查看生成的结果:\n# cat /mnt/etc/fstab Chroot 执行以下命令切换到新系统:\n# arch-chroot /mnt 设置时区 # ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 生成 /etc/adjtime 文件：\n# hwclock --systohc 本地化 编辑文件 /etc/locale.gen，找到 en_US.UTF-8 UTF-8 这一行并取消注释，然后保存\n执行以下命令生成 locales：\n# locale-gen 编辑文件 /etc/locale.conf（没有就创建），然后写入 LANG=en_US.UTF-8\n网络配置 创建 /etc/hostname 文件，写入:\n# echo \u0026#34;arch\u0026#34; \u0026gt;\u0026gt; /etc/hostname 编辑 /etc/hosts 文件:\n# echo -e \u0026#34;127.0.0.1 localhost\\n::1 localhost\\n127.0.1.1 arch.localdomain arch\u0026#34; \u0026gt;\u0026gt; /etc/hosts 修改密码 # passwd Boot loader 不同的 CPU 需要安装不同的 Microcode：\nAMD CPU 安装：\n# pacman -S amd-ucode Intel CPU 安装：\n# pacman -S intel-ucode 接下来安装 GRUB：\n# pacman -S grub efibootmgr 然后执行：\n# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB 配置 GRUB：\n# grub-mkconfig -o /boot/grub/grub.cfg 安装软件 顺便再装一些必要的软件:\n# pacman -S sudo vim dhcpd netctl wpa_supplicant 重启 # exit # umount /mnt/boot # umount /mnt # reboot 个人化的相关配置 创建普通用户 以下来自官网：Users and groups\n-m/\u0026ndash;create-home 默认创建用户名同名目录\n-G/\u0026ndash;groups 额外添加组，例如: wheel\n-s/\u0026ndash;shell 指定用户登录 shell 的路径，例如：/bin/bash。另外也可以去 /etc/shells 这个文件查看来确定 shell 路径\n执行以下命令创建普通用户，替换中括号及其内容\n# useradd -m -G [additional_groups] -s [login_shell] [username] 创建 Swap 文件 以创建 8 GiB Swap 文件为例：\n# dd if=/dev/zero of=/swapfile bs=1M count=8k status=progress 设置权限：\n# chmod 0600 /swapfile 格式化为 Swap:\n# mkswap -U clear /swapfile 最后编辑 /etc/fstab 文件，将这一行 /swapfile none swap defaults 0 0 添加进去\n参考资料 https://wiki.archlinux.org/title/Installation_guide https://wiki.archlinux.org/title/General_recommendations ","date":"2017-10-18T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/arch-linux-installation-guide/","title":"ArchLinux 安装教程"},{"content":"前言 主力系统之前一直用着 Win7，最近也开始感觉有点审美疲劳。一直考虑是换成 Win10 还是 Ubuntu，考虑再三还是选择了 Win10\u0026hellip;\n体验了 Win10 半个月后，感觉系统过于臃肿。今天忽然发现 Win10 还有个 beta 项目————适用于 Linux 的 Windows 子系统。后来查了下才知道早在今年三月份就有了\u0026hellip;(lll￢ω￢)既然如此，那果断要来体验一把！\n教程 根据官方的 Guide，首先要查看系统的 OS 版本号和系统类型。系统类型必须是 64 位操作系统以及 OS 版本号要在 1607+\n查看方法：\n设置-\u0026gt;系统-\u0026gt;关于\n安装 之后需要安装适用于 Linux 的 windows 子系统。\n1.以管理员运行 Windows PowerShell，输入以下内容回车\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n2.重新启动Windows\n之后打开开发者人员模式。方法如下：\n设置-\u0026gt;更新和安全-\u0026gt;针对开发人员\n开启后，打开 命令提示符，输入 bash，会提示下载 Ubuntu，输入 Y 回车即可。\n提示：如果国内下载速度过慢或根本无法下载，需要自备梯子。\n卸载 打开命令提示符，输入 lxrun /uninstall /full，然后根据提示输入 Y 即可开始卸载。\n体验结论 这个 Windows 内置的 Linux 就是将 Linux 的系统调用实时的转换成 Windows 的系统调用，就像是 Linux 上的 Wine 的反向技术。Wine 可以将 Windows 上的应用放到 Linux 上运行，这势必会降低微软的市场占有率，感到危险，微软有所动作也是理所当然。wine 开源，微软也毫无办法。\n不过 Windows 内置的 Linux 感觉并不自由，内置的文件不能用 Windows 的工具来创建或修改。否则可能会出现文件损坏导致 Linux 系统无法使用。因此，如果是 Linux 的初学者，用这个还不错，但是要当作开发环境，那就算了吧。\n参考资料 官方安装指南 详情链接 ","date":"2017-08-29T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/the-first-experience-of-win10-built-in-linux-sub-system/","title":"Win10 内置 Linux 子系统初体验"},{"content":" 《一日囚》作者：柳文扬\n发表于2002年11期《科幻世界》\nB先生死了。就在他搬进这座大楼不到二十四小时。\nB先生是昨夜，不，准确地说是今天凌晨0点住进来的。那时夜雾弥漫，有两个黑衣男子陪着他，拎着三只大提箱，敲开我值班的房门，要租一间不带家具的房子。这个要求有点奇怪，因为大多数人都想要有家具的房间。\n“请问你们要租多大的屋子？”我打量着B的光头问。他戴着眼镜，苍白而又腼腆，脸上有种愁苦的模样。\n一个黑衣男人说：“最小的单元就可以了。一间卧室，带厨房和洗手间。”\n“请原谅，三个人住这么小的房子是不是太挤了……”我说。\n黑衣人面无表情，指了指B：“就他自己住。”\n“好吧，您想租多久？半年还是一年？”我问B。\nB先生低声说：“一天……”\n“什么？”我没听清楚。\n黑衣人说：“租一个月吧。这是你们最短的租期？”\n“对。”我拿出登记簿，让B写下自己的名字。黑衣人付了一个月租金，然后我带他们上电梯，到了大楼16层的那个小套间。\nB先生对客厅表示满意，但他抱怨房子的视野太狭窄了。黑衣男人们冷淡地沉默着，把大箱子打开，里面竟装满了简易的家具：折叠的帆布衣柜、充气床垫，还有一些换洗衣服。最后，B安顿下来，一个黑衣人看了看表，说：“8月18日了，现在是凌晨0点整。”\n两个黑衣人走了。我对B说：“早点休息吧，希望您在这里住得愉快。”\n他点头说：“是啊，愉快……我不会打扰你们太久的。”\n“您说什么？”\n一瞬间，他眼睛里流露出虚弱和渴望，好像要说什么。我被吓住了。但他马上恢复了常态，也就是说，恢复了那种腼腆和愁苦的模样。\n“麻烦你了。请让我休息吧。”他客气地把我送出门外。\n这就是我记忆中的昨夜。\n仅隔二十几个小时，B就死在房间里。他死后形容枯槁，看上去老了很多。\n那两个黑衣人穿过夜雾走进大楼，还带了一位医生模样的人。我现在还不懂，他们是如何预知B先生的死讯的。当他们要我打开那间屋子的门，发现B毫无生气地躺在客厅地下时，他们一点也不惊讶。医生走过去，翻开B的眼皮，然后摸摸他的脖子，转身对两个黑衣人点了点头。\n“他死了。”\n他们想抬起B先生的尸体，我拦在门口说：“等一下，我应该去报警。还有，我都没有发现他已经死了，你们是怎么知道的呢？”\n一个黑衣人走过来，低沉地说：“不必报警。”他拿出一份证件给我看，那是种让人无法怀疑其权威性的身份证明。我沉默了。\n他们在房间里翻来翻去，把所有简易家具拆开，每一件衣服都抖开来看——我发现那些衣服都很旧，而且都是一模一样的套装。B在这儿住了还不满一天，难道能在房子里藏什么东西吗？最后，他们将屋中的一切装进大提箱，抬起B，消失在门外，只剩我一个人站在四壁皆白、空空如也的房间里。\n对这个死去的人，我有种奇怪的感觉。我认识他只有二十几个钟头，但却像是多年的老友似的。细究原因，大概是他每次见我都表现出老友一般的熟稔。\nB先生真的有些古怪。他的精力一定非常旺盛，单看外表会被欺骗的。他苍白憔悴，仿佛弱不禁风，但是他整整一天频繁地出入于大楼内外，仅仅被我看见的就有十几次。他好像可以突然间出现在这里，又突然间出现在那里。\n自从午夜安排好房间，我第一次看见B先生竟是在半分钟后。谁知道他是怎么样飞快地、神不知鬼不觉地下了楼，无声地站在我旁边。\n我目瞪口呆地盯着他。他眼睛红红的，仿佛换了一个人，急切地问我：“现在怎么样？”\n“什么怎么样？”我莫名其妙地说。\n“现在是几点？几号了？”他梦游一样问。\n我几乎被他吓住，很快地回答：“8月18日凌晨……0点过1分。您是什么时候下来的？”\n他没有理睬我的问题，呆了呆，说：“哦，是这样……谢谢你。”\n他回去睡了。但早上3点钟，我竟透过窗子看见他在楼外。他佝偻着身子，从雾气里慢慢地移动过来，苍白的脸像一盏昏灯。我赶忙出去，打开玻璃大门。他疲倦地走进来。\n“您才安顿下来，不好好睡一觉吗？”我说，“是什么时候出去的？”\n“什么？”他愣了一下，然后说，“哦，我不累。我出去的时候，你没看到？”\n我迟疑地说：“可是，楼门一直是锁着的啊……”难道他是从十六层的窗户中爬下来的吗？\n“是么？”他微笑，“你记错了吧，我是从这里出去的。”\n眼看他的背影蹒跚着走进电梯，我锁好楼门，回到值班室里打盹。\n早晨七点半，他经过前厅，对我说：“早上好！”\n“早上好！”我很惊讶，他只睡了这么一会儿，居然有精神出去散步。\n奇怪的是，只过了几秒钟——至少在我的印象里，只过了很短暂的时间——又看到他经过前厅向楼门外走去。他冲我打招呼，就像刚才没见过面似的：“早上好！”\n我诧异地望着他，他走出了楼门。\n大约一个小时后，他乘着一辆出租车停在楼外，慢慢从车上挪出来，疲惫不堪地走进大楼，也不理睬我，直接上了电梯。\nB先生怎么了？他在外面这一个小时做了什么？我想得走了神，却又看到他微笑着从我面前经过，道了一声：“辛苦！”就去按电梯的按钮。\n我捧住头，使劲闭上眼睛又睁开。我疯了吗？我的大脑提前老化了吗？我在做梦吗？\n我在前台上趴了一会儿，想养养精神。一抬头，就看到B愁苦地在大厅里走动着。我下意识地弹了起来！他对我羞涩而凄凉地笑笑：“我丢了件东西……”他茫然地说，“一定要找到，一定要找到……”\n“您丢了什么？”我问他。\n他摇摇头，走出了楼门。\n我跟着他走到门外，身后有只手拍了拍我的肩，真是差一点叫我跳起来！\n原来是住在1608号的那位老寡妇，她非常神经质，而且，说起来她还是B先生的隔壁邻居。\n“他叫什么？”她伸出一根瘦得像巫婆的手指头，远远指着B先生的背影。\n“B。怎么啦？”我问。\n老太太低声说：“他很怪！”\n这我知道，但怎么跟她说呢？\n她看见B消失在拐角，把嘴凑在我耳边说：“刚才我听见他的房子里有人在哭！”\n“哭？”我觉得她太敏感了。\n“没错！我趴在门上听到了！”她忽然转向里面，脸上皱起惊恐的纹路。\nB先生又从里面走出来了。\n我也百思不解，但是客气地问了一句：“您丢的东西找到了吗？”\n“什么？”他抬起头来，惊疑地望着我，“什么东西？”\n真是莫名其妙。\n他走出楼门。老太太拉着我跟出去，停在阳光下面，悄悄地说：“一个妖怪！”\nB在远处上了出租车。我转过身，想着老太太的话，无意地向上一瞥。\n我看见十六楼上，B先生房间的窗内有个人影。我退远几步，用手遮住阳光重新分辨。没错，是他的房间，那个清瘦而衰颓的人影移到了窗帘后面。我吓出一身冷汗。\n“你看见了？你看见了？”老太太激动地念着。\n我扯着老太太，在她的心脏和腿脚允许的情况下尽快跑到管理室，拿上电棍，乘电梯上了十六层，在B的门口站住。我们紧张地倾听着。\n“B先生！您在里面吗？”我轻轻敲门。没有人回答。\n老太太尖利的手指掐得我生疼。我拿出备用钥匙打开了门，必须搞清楚。我手握电棍，走进宁静狭小的房间。\n里面空荡荡的。\n老太太干瘪的嘴唇哆嗦着：“他是个妖怪，他是幽灵……”她惊惶地转动脑袋四处张望，好像这间屋子里真的有什么看不见的幽灵。\n“我们快离开吧！”她使劲拉我的衣服。我也害怕了。\n就是这样。我确实在今天一天里看到B先生十几次出入于楼门内外，而且，他的容貌像雾中的猫头鹰一般不可捉摸，一会儿苍老，一会儿又变得比较年轻。他的衣服也时新时旧。这个世界上是没有幽灵的，但我拿不准B先生是什么。\n快到中午的时候，他拿着一副纸牌走到前厅，要跟我玩一会儿。\n我无法拒绝，他明显地苍老了，真奇怪。而且他眼睛下面有暗淡的黑晕，目光仿佛是发高烧的病人。\n他向我展露出令人惊叹的牌技，就算我把牌洗得再彻底，他还是能记住每一张牌的位置。我更加相信他是个隐藏在现代城市里的巫师。\n最后，他把牌丢在台子上，说：“这一点也不神秘，我不是什么魔法师。年轻人，去买一副偏光眼镜吧。这牌留给你。有些时候你会发现，一件不可思议的事情，换一副眼镜就能看得清清楚楚。”\n我真的托人去眼镜店帮我买了副便宜的偏光镜，戴上它再看那副纸牌，原来每一张的背面都用特殊墨水做着标记。\n这是B先生教我的一件最有趣的事，也许他另有用意，但我没有猜破。\n吃过午饭，我发现他站在楼门口，呆望着对面的路灯。\n“天气很好。”我小心地跟他打招呼。\n“是啊，天气每次都是这样。我倒希望某一次看见下雨。”他更像是在喃喃自语，然后他奇怪地说，“你瞧那盏路灯。”\n“路灯？”\n“对，它一直在那儿吗？”\n我仔细看了看路灯，又看看他：“当然，它早就在那儿，一直在。”\n“它……没有……没有被打破过？”他耳语似的问我，仿佛心怀恐惧。\n“没有吧。”我摇摇头。这是拿不准的，附近的顽童很多，而我来这儿当管理员才两个月。\n他问出一个令我浑身发冷的问题：“你没看见过路灯碎片从地面上飞起来，自动地重新组合好吗？”\n阳光灿烂，他的脸还是那么苍白。我的心像被看不见的冰冷的手狠狠捏住了。他看出我在害怕，就笑一笑进去了。\n老实说，才认识一天就能让我这样害怕的人，B先生算头一个。\n我不敢再主动招呼他。下午我又看见他进进出出，来来去去。有时也跟我说话，但没有特别奇怪的事情发生。\n夜里，他就死了。\n两个黑衣人把B的尸体和屋子里所有东西都搬走以后，我站在他的卧室里茫然四顾，雪白的墙壁，一尘不染的地板。黑衣人想在房间中搜寻什么？B先生难道真的在这里藏了东西吗？回忆着B的种种诡异之处，我感觉这房间把我的心牢牢吸引住了。这里留着他的灵魂，我荒唐地对自己说。\n突然，在灵机一动之下，我从衣袋里取出那副偏光眼镜。戴上它后，我惊呆了。\n老天哪，墙壁上写满了字。\n毫无疑问，这是B先生特意写给我的，他成功地瞒过了那两个黑衣人。我把门从里面锁好，回到卧室激动地读着墙上的字。这儿写着一个最让人毛骨悚然的故事：\n我写下这些，是因为我预感到自己就要死了。我一直渴望对人说出自己的遭遇，但我不敢。现在，我用这种方法告诉你，世界不像你想的那么简单。\n在墙上写字是因为：1，他们在最后会把所有能移动的东西都拿走，留下的只有墙壁；2，用这么原始、简单和不可靠的办法才能骗过他们。你很聪明，理解了我对你所做的暗示。\n我死后没人能看到我的坟墓，让我来悼念自己吧：B，65岁，死于长久的孤独和生命力枯竭。他是个罪人，然而又是个可怜的牺牲者。我在这个地方，在这一刻，被囚禁了十年。\n十年。\n噩梦是这样开始的，由于人类共同的弱点，我犯了罪，大罪。在我的世界里，在你还没有见到、无法想像的世界里，我得知自己将接受什么样的惩罚。\n法官说：“你被处以一日无期徒刑：在有生之年，你将永远过着同一天——我们为你随机选择的那一天，2008年8月18日。你的一切生命活动都只限于这二十四小时之内，直到自然赋予你的生命结束。作为一种人道主义的优待，你可以在一座热闹的都市中服刑，但在服刑期间，你不能对周围的任何人提起关于你和你所受的刑罚，否则，我们将把你转移到一个封闭的小空间内，在孤独中度过刑期。”\n你理解吗？朋友，这是无止境的噩梦。\n据说我是第一批被处以时间囚禁的罪人之一。他们还不能了解这一技术的全部内涵，我们算是实验品。\n一开始，我对这刑罚的可怕之处还没有真正的体会。这是座热闹繁华的城市，处处充满生机。我住进自己的房间，对置身于开放的大世界里感到高兴，我透过玻璃窗观察下面的人群，不准备担忧以后的日子。\n第一天——我这样说是按照自己的习惯，其实我度过的这十年，这三千六百多个日子，对你们来说都是同一天。第一天，我早早地起了床，打算出去散步，呼吸一下这座都市的空气。我的邻居，1608号的那位太太——她真是个细心人——热情地问候我。\n“您好！您是新搬来的邻居吗？”\n我答道：“是的。很高兴认识您。”\n“您从哪里来？”\n我把早已编好的谎言对她说了一番。她最后说：“希望您在这儿住得愉快！”\n在楼下我对你打了个招呼：“早上好！”你对我报以关心。\n走到大街上，我在拐角处的报童手里买了一份报纸，先看了看日期：2008年8月18日，头版的新闻很吸引人。我过马路，在对面的咖啡馆里要了早餐，巴西咖啡和烤面包。我看报纸，咖啡馆老板对我说：“我觉得您很面生。”\n“对，我是刚刚搬来的。”我回答。\n“喜欢我们这里么？”\n“很好，大家都很友善，咖啡很香。”我向他微笑。\n接下来我去公园散步，看场电影，吃午饭，在市政广场坐着喂鸽子，逗弄躺在婴儿车里的小孩。\n吃过晚饭后，在街道上漫步，直到疲倦才回家。我躺在床上睡觉，一觉醒来，仍然是2008年8月18日。\n第二天（还是按照我的习惯说的），我在同一时刻出门。1608号的太太站在楼道里问：“您好！您是新搬来的邻居吗？”\n我答道：“是的。很高兴认识您。”\n“您从哪里来？”\n这真有趣，我又一字不差地说了那番话。她最后说：“希望您在这儿住得愉快！”\n我又在下面问候了你，在街拐角买了同一份报纸：2008年8月18日的日报，头版的新闻对我来说早已是往事。我过马路，在对面的咖啡馆里要了早餐，还是巴西咖啡和烤面包。我看报纸，咖啡馆老板对我说：“我觉得您很面生。”\n这一切都像钟摆一样准确。\n我说出了跟昨天一模一样的回答。我感到自己好像一个无意间走进一部老电影里的客串者，我知道电影里发生的一切，但其他角色却对此一无所知。\n公园、电影、午饭、鸽子、婴儿车里的小孩……一模一样的场景，一模一样的事，惟一不同的只有我。不，惟一不同的只有我的心。我很清楚，这个日子我已经是第二次度过。这感觉真怪，2008年8月18日，这一天是否像录像带一样永远保存在某处，保存在宇宙的一个神秘角落？而我则被施了咒语，一次次地进入这盘录像带，带着了解一切的心，却被迫重复着一成不变的情节……\n在开始的几天里，我并不沮丧，也没有害怕，甚至还抱着一种优越感和好奇的兴趣，观察这发疯的世界。我按照固定的时间表过日子，我记熟了在每个时刻、每个地点将遇到的人，以及他们将做的事情。我背诵着自己的台词，还在心里替对方念出他想说的话，我暗自对他说：“嘿，我知道你下一分钟要做什么。”\n但我很快厌倦了。如果你觉得生活中的某个日子是快乐的、丰富多彩的，那只因为它是惟一的，是转瞬即逝的。永不逝去的一天是可怕的一天，它会由新鲜变为陈旧，变为腐烂，变为恶毒。\n我默默地服刑。第一个星期，我快乐；第二个星期，我累了；第三个星期，我愤怒；第四个星期，我想到死；第五个星期，我知道自己将会发疯。真不可思议，在同一个人身上，在同一天，竟可以承载这么多的眼泪、愤怒、挣扎、绝望和疯狂。我躲在房间里痛哭，用力咬着自己的手。时间囚禁之刑，无法打破、不能逃脱的监牢。\n有一种魔力笼罩着我，每当一个二十四小时的周期即将过去，我似乎要追随着时间之流，冲破牢笼；那魔力一下子又把我拉回二十四小时之前，于是一切周而复始。我又开始见到昨天见到的人，重复昨天做过的事。最可怕的是，只有我清楚这一切，其他人对此一无所知。我多羡慕他们，多嫉妒他们！对他们来说，我被永世困在其中的这一天只是生命中的千万个平凡日子之一。他们将无知无识地度过这普通的一天，然后把它忘记，走进我永远也看不到的“明天”。可我呢，我还要在循环往复的苦刑中挣扎下去，得不到一点同情和援助……\n而且，要知道，除了我自己之外，其余的一切人、一切事，都是固定不变的，在每一次循环当中比原子钟还更稳定。所以，我必须注意每一件事的准确时刻，以免与这个世界脱节。我有一个固定的时刻表，精确到秒。在这钟表般的世界里我是惟一可变的因素，但我却要强迫自己成为钟表里的一个零件。我是罪有应得，但我要告诉你，这种刑罚过于残酷了，即便是对我这样的罪人。\n时间的囚徒，比空间的囚徒更可悲。全世界都与你无关，只有你独自在不变的时光中老去，日复一日地重复着比死亡还苍白的生活。\n时间是多么可怕、伟大和不可驾驭的东西。我是想说，当猴子学会了一种把戏，它只能想到凭借这把戏来换一点食物。人，只有人，才会把他所掌握的一切权力和知识都用于“惩罚”。\n在无数次孤独的发作之后我决定破坏规则，看一看能给世界造成多大的麻烦。我扔掉了时刻表，故意在头一天的早上七点三十分整出门，而在第二天早上的七点三十分十五秒出门。我在比平时晚半分钟的时间进入咖啡馆，要热面包卷和冰咖啡。在下一个循环中，再晚半分钟进去，要蛋糕、柠檬冻和香草冰激凌。我选择不同的时刻——但相差不超过一分钟——从报童手里买报纸。我在每个循环中换着看不同的电影。我这次踩死一只蜗牛，下次却把它从地上捡起来放进草丛里。出于一种可笑的仓皇失措，为了逃离牢笼般的感觉，我曾经到处乱跑，跑到城市的边缘，再乘坐出租车回来。\n我在郊外过夜，仿佛希望这能帮助自己奇迹般地逃离被困于今天的命运。我蜷缩在草丛中，看着星星。时间一秒一秒地流逝，每一秒钟都在心中撞击出洪大的回响。午夜十二点，我激动地坐起来，在星空下奔跑。我狂喊着：“出租车！出租车！”我上车就问司机：“现在是几点？今天是几号？”\n“0点十分啦。您喝得够多的，今天是8月18日。”司机说。我的心沉了下去。汽车穿过入睡的城市，停在被夜雾笼罩的大楼前，已是凌晨三点，我还要回到那间小屋，回到监牢中的监牢里睡觉。\n我的歇斯底里症发作了不止一次。我幻想着，在某个特殊的时刻“再次”进入大楼，就能打破魔法。我从郊外回来，在午夜十二点整走进楼门，问你：“几点了？今天是几号？”\n小伙子，记得吗？你说：“十二点啦，您住进这儿快有一整天了。今天当然是8月18号。”就是这个时刻，魔法的转折点，我要在你的见证之下突破了……我激动万分，盯住你，在那里站了一会儿，又问你：“现在怎么样？”\n“什么怎么样？”仅隔几秒钟，你就像完全忘了刚才的事。我有种不祥的感觉，我说：“现在是几点？几号了？”\n你惊讶地回答：“8月18日凌晨……0点过1分。您是什么时候下来的？”\n你知道当时我是多么绝望吗？\n我还有过更疯狂的主意：我想带着几个人走得远远的，走到郊外去。晚上，我们围坐在篝火旁，我要在午夜时分讲一个故事。当时钟越过12点，又回到二十四小时前的瞬间，我会看到什么情形？那几个人会像幻影一样消失吗？他们又会看到什么？他们会发现自己忽然从家里的卧室中来到了野外吗？\n我不敢做那样的实验，风险太大了，可能会伤害别人。我只能用自己作实验品，给世界找一点小小的麻烦。\n世界没有垮掉，无论我怎么躁动，都像笼中困兽的挣扎一样无济于事。只有寥寥几次，我从你和别人的目光中看出了诧异与恐惧。你们发现了吗？我不清楚。\n本来我有种可怕的猜疑：这刑罚只是一种心理层面的感受，只有我的“灵魂”（我只能这么说）被硬生生地剥离出来，拉回一次次循环的开始，而肉体则像行尸走肉一样，僵硬地重复着比钟摆还准确的固定行为。也许为了打消这种恐惧，我才故意在每天的行动中做了一点变化。没有遇到阻碍，而且，我慢慢地发现自己的身体在衰老，我放心了。\n如果你的外部行动被限制在一个小范围内，那么你会发现，心灵的活动将变得十倍百倍地丰富和激烈。我不是科学爱好者，但现在却对时间这个东西产生了兴趣。我很想知道自己是用什么方式被一次次拉回8月18日的凌晨0点，我还想知道，时间是什么，被困在时间中的人又如何与世界发生关系。\n后来的日子里，我一直在观察和思索，这样反而不太难过。我列出了几种被抛入时间循环的方式。\n第一种，像那些物理学家所说的，每当我被“拉回”一次，时间就在这里产生了一个分支，出现了一个新的“平行世界”，在这个新世界里，除了我本人，其余的一切都与原来的世界相同。但是，我有证据否定这种理论：这个新世界中的人将不会知道原来那个世界在8月18日发生的事，可有一次，你突然问我：“您丢的东西找到了吗？”我大惑不解。想来这是因为在后面的某次循环当中，我将丢失一样东西，而时刻却在此时之前。后来证实了这个猜测，我的钱夹丢失了，时刻是上午九点。\n还有一种最简单的解释：8月18日这一天是固定不变的，只有我一次次地回到这天当中，重复我的生活。但这会造成一个难点，我反复地度过这二十四小时，度过了三千六百五十次。我一个人在此期间所耗费的物质，比如水和电，会超过整个大楼中其他居民用量的总合。难道没人发现这桩怪事么？\n有一次，我一言不发地走到大楼对面的路灯底下，脱下鞋子，用它打碎了路灯，然后我穿好鞋走回大厅里。当时你惊讶极了，你一定认为我发疯了。不，我在思考问题。\n在路灯被打破后的整整一天里，我记住了每个人看着我的神情、对我所说的话。次日（我习惯的说法），我一早就发现路灯好好地立在那里，当然啦，我还没有去打它呢。这一天真的与前一个循环大不相同。我的存在使世界变得充满悖论。我在这次循环当中，在上午九点打碎了街上一盏路灯，那么在别人即旁观者眼里，这盏路灯在九点之后就应该不存在了；但在此次循环之前的那些天里，路灯一直存在到一天的结束。旁观者究竟会“记得”哪一种情况呢？\n记得我问过你，在一个中午。你完全不知道我打碎过路灯。\n我的最后一个猜测是：每当一个循环结束，我就仿佛被单独拉出这个世界，而那神秘的魔力，即操纵时间的力量，使整个世界（除我之外）退回到二十四小时之前的初始状态，然后我又被扔进世界里面，一切重新开始。那就是说，无论我在服刑期间做了什么，把路灯打碎多少次，旁观者都只会“记得”最后一次循环。\n不知我猜得对不对，多想向某个旁观者询问一下啊。\n但丢掉钱夹的事，还有你看到我不按时刻表行动时的诧异，又如何解释呢？\n大概，在旁观者眼中，我在若干次循环中的行为，像立体空间的物体在平面上的投影一样，被叠加于一天里面，于是形成了这么一种情况：你看着我走出大楼，然后又看见一个我走出大楼，而紧接着，你可能发现我的房间里仍有一个我。我所处的微观时间循环被嵌套在整个宏观的时间之内，于是在外人看来就有了一种粒子态一般测不准的“闪动”。\n如果有一位超然的观察者俯视这座城市，他会发现我就像一个做布朗运动的粒子那样，狂乱而无序地出现在各个角落。这一秒钟在东边，下一秒钟又到了西边，甚至在同一秒钟里出现在几个地方。普通人如果留意我的行踪，一定会被这奇怪的现象搞疯的。我很遗憾在将要死去的时候才发现了思考的乐趣。我相信，那些孤守在灯塔上的人不会疯狂，因为他们是思想者。\n但惟一不公平的是，他们的每一天都是不同的。\n我要死了，我仍然没有明白时间是什么，被困于时间中的人又怎样与世界发生联系……再见了，朋友，你将幸福地进入明天，把今天的我永远忘记。而那个明天是我绝对无法想像的。再见。\n我摘下眼镜，墙壁又变得洁白无瑕。这一切真的发生过吗？我又戴上眼镜，B先生写下的字迹布满了整面墙。\n应该把这些字涂抹掉。谁知道以后的住户会不会戴起偏光眼镜来看这墙壁呢？B先生此时已经死了，但在此时之前，在2008年8月18日凌晨0点到夜里10点，他依然活着，永远活着，一次一次地活着。他的秘密仍然不能泄露。\n我看了看手表，已经是11点半了。我忽然激动起来。\nB先生是今天0点住进来的，他的死亡时间是今夜10点，而现在是11点半，距离一个循环结束还有半小时！他在墙上写着，他曾在午夜12点从郊外回来，希望由我见证他突破时间的牢笼。我有办法验证他的猜想了。\n“一个”B先生已经死了。如果在12点，“另一个”B先生从外面回来，那就至少能证明他的一部分猜想。可那种情况会多么诡异、恐怖和激动人心啊。\n如果是那样，如果“另一个”回来了，我应该对他说什么？B先生，您已经死了，现在的您是无数镜子里的鬼魂之一？我能不能这样认为：当我们这些幸福的人无知无识地越过了今天午夜，进入B先生无法求得也无法想像的明天；在被我们超越、抛弃和遗忘的这一天里，还有一个、两个、无数个B，无可奈何、循环往复地永远被困于此。我对这些道理一点都不懂，也想不明白。\n我怀着莫大的期望和恐惧，坐在大楼门口的管理员室内，望着窗外的夜世界。\n我头一次注意到时间是这么奇妙，每一秒钟都仿佛在我心中跳跃着流过。流逝，流逝，流逝……在某一次循环当中，B先生此时此刻还坐在由郊外赶回来的出租车上。我心乱如麻，等待他穿过夜晚的浓雾，苍白的脸像一盏灯一样往大楼里走来；等待他从时间的某个角落佝偻着走来；等待他迷茫绝望地一边寻找一边走来。从未知走进未知，从无限走进无限，从幽暗走进幽暗，从牢笼走进牢笼。我要紧紧拉着他的手，不，我要紧紧地抱住他，跟他一起度过由今天到明天的那一秒钟。如果这样，我能够把他带进明天吗？或者是他把我拉进那循环的魔咒当中？天哪，我在想些什么？12点钟就要到了，我的心跳几乎停止。\n窗外，夜雾茫茫。\n","date":"2017-07-16T00:00:00Z","permalink":"https://ireflux.github.io/snow/post/one-day-prisoner/","title":"一日囚"}]